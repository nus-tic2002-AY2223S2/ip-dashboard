[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"HappyM0ment"},"content":"# duke.Duke project template","lastModifiedDate":"2023-04-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"HappyM0ment"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-04-04"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"HappyM0ment":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"HappyM0ment"},"content":"    mainClassName \u003d \"duke.Duke\"","lastModifiedDate":"2023-04-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"HappyM0ment"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2023-04-10"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-10"}],"authorContributionMap":{"HappyM0ment":3,"-":40}},{"path":"src/main/java/duke/DateValidator.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HappyM0ment"},"content":"package duke;","lastModifiedDate":"2023-04-09"},{"lineNumber":2,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":3,"author":{"gitId":"HappyM0ment"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-04-09"},{"lineNumber":4,"author":{"gitId":"HappyM0ment"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-04-09"},{"lineNumber":5,"author":{"gitId":"HappyM0ment"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-04-09"},{"lineNumber":6,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":7,"author":{"gitId":"HappyM0ment"},"content":"import duke.Event;","lastModifiedDate":"2023-04-11"},{"lineNumber":8,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-11"},{"lineNumber":9,"author":{"gitId":"HappyM0ment"},"content":"public class DateValidator {","lastModifiedDate":"2023-04-09"},{"lineNumber":10,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":11,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":12,"author":{"gitId":"HappyM0ment"},"content":"     *  Attribute","lastModifiedDate":"2023-04-10"},{"lineNumber":13,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":14,"author":{"gitId":"HappyM0ment"},"content":"    private static String dateFormat \u003d \"yyyy-MM-dd HH:mm\";","lastModifiedDate":"2023-04-09"},{"lineNumber":15,"author":{"gitId":"HappyM0ment"},"content":"    private static String displayFormat \u003d \"dd MMM yyyy HH:mm\";","lastModifiedDate":"2023-04-09"},{"lineNumber":16,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":17,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":18,"author":{"gitId":"HappyM0ment"},"content":"     *  Constructor","lastModifiedDate":"2023-04-10"},{"lineNumber":19,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":20,"author":{"gitId":"HappyM0ment"},"content":"    public DateValidator() {","lastModifiedDate":"2023-04-09"},{"lineNumber":21,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":22,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-09"},{"lineNumber":23,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":24,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":25,"author":{"gitId":"HappyM0ment"},"content":"     * validateInput method will validate the date input by user to fix it to a format","lastModifiedDate":"2023-04-10"},{"lineNumber":26,"author":{"gitId":"HappyM0ment"},"content":"     * @param dateString date input in String datatype","lastModifiedDate":"2023-04-10"},{"lineNumber":27,"author":{"gitId":"HappyM0ment"},"content":"     * @return TRUE if date format is valid, else FALSE","lastModifiedDate":"2023-04-10"},{"lineNumber":28,"author":{"gitId":"HappyM0ment"},"content":"     * @throws DateTimeParseException if date input is in wrong format","lastModifiedDate":"2023-04-11"},{"lineNumber":29,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":30,"author":{"gitId":"HappyM0ment"},"content":"    public static boolean validateInput(String dateString) {","lastModifiedDate":"2023-04-09"},{"lineNumber":31,"author":{"gitId":"HappyM0ment"},"content":"        DateTimeFormatter df \u003d DateTimeFormatter.ofPattern(dateFormat);","lastModifiedDate":"2023-04-09"},{"lineNumber":32,"author":{"gitId":"HappyM0ment"},"content":"        try {","lastModifiedDate":"2023-04-09"},{"lineNumber":33,"author":{"gitId":"HappyM0ment"},"content":"            LocalDateTime dt \u003d LocalDateTime.parse(dateString, df);","lastModifiedDate":"2023-04-09"},{"lineNumber":34,"author":{"gitId":"HappyM0ment"},"content":"            return true;","lastModifiedDate":"2023-04-09"},{"lineNumber":35,"author":{"gitId":"HappyM0ment"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-04-09"},{"lineNumber":36,"author":{"gitId":"HappyM0ment"},"content":"            //handle exception","lastModifiedDate":"2023-04-09"},{"lineNumber":37,"author":{"gitId":"HappyM0ment"},"content":"            return false;","lastModifiedDate":"2023-04-09"},{"lineNumber":38,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-09"},{"lineNumber":39,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-09"},{"lineNumber":40,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":41,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":42,"author":{"gitId":"HappyM0ment"},"content":"     * convertStringToDate method will convert a string input into a LocalDateTime variable date using the same conversion","lastModifiedDate":"2023-04-10"},{"lineNumber":43,"author":{"gitId":"HappyM0ment"},"content":"     * @param dateString date input in String datatype","lastModifiedDate":"2023-04-10"},{"lineNumber":44,"author":{"gitId":"HappyM0ment"},"content":"     * @return a LocalDateTime variable after conversion","lastModifiedDate":"2023-04-10"},{"lineNumber":45,"author":{"gitId":"HappyM0ment"},"content":"     * @throws DateTimeParseException if date input is in the wrong format","lastModifiedDate":"2023-04-10"},{"lineNumber":46,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":47,"author":{"gitId":"HappyM0ment"},"content":"    public static LocalDateTime convertStringToDate(String dateString) throws DukeException {","lastModifiedDate":"2023-04-09"},{"lineNumber":48,"author":{"gitId":"HappyM0ment"},"content":"        if(validateInput(dateString))","lastModifiedDate":"2023-04-09"},{"lineNumber":49,"author":{"gitId":"HappyM0ment"},"content":"        {","lastModifiedDate":"2023-04-09"},{"lineNumber":50,"author":{"gitId":"HappyM0ment"},"content":"            DateTimeFormatter df \u003d DateTimeFormatter.ofPattern(dateFormat);","lastModifiedDate":"2023-04-09"},{"lineNumber":51,"author":{"gitId":"HappyM0ment"},"content":"            LocalDateTime dateFormatted \u003d LocalDateTime.parse(dateString, df);","lastModifiedDate":"2023-04-09"},{"lineNumber":52,"author":{"gitId":"HappyM0ment"},"content":"            return dateFormatted;","lastModifiedDate":"2023-04-09"},{"lineNumber":53,"author":{"gitId":"HappyM0ment"},"content":"        }else {","lastModifiedDate":"2023-04-09"},{"lineNumber":54,"author":{"gitId":"HappyM0ment"},"content":"            throw new DukeException(\"Date Format Error\");","lastModifiedDate":"2023-04-09"},{"lineNumber":55,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-09"},{"lineNumber":56,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-09"},{"lineNumber":57,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":58,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":59,"author":{"gitId":"HappyM0ment"},"content":"     * convertDateToString method will convert a LocalDateTime input into a formatted String output for date","lastModifiedDate":"2023-04-10"},{"lineNumber":60,"author":{"gitId":"HappyM0ment"},"content":"     * @param lclDateTime date input in LocalDateTime datatype","lastModifiedDate":"2023-04-10"},{"lineNumber":61,"author":{"gitId":"HappyM0ment"},"content":"     * @return a formatted date in String format","lastModifiedDate":"2023-04-10"},{"lineNumber":62,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":63,"author":{"gitId":"HappyM0ment"},"content":"    public static String convertDateToString(LocalDateTime lclDateTime) {","lastModifiedDate":"2023-04-09"},{"lineNumber":64,"author":{"gitId":"HappyM0ment"},"content":"        DateTimeFormatter df \u003d DateTimeFormatter.ofPattern(dateFormat);","lastModifiedDate":"2023-04-09"},{"lineNumber":65,"author":{"gitId":"HappyM0ment"},"content":"        return lclDateTime.format(df);","lastModifiedDate":"2023-04-09"},{"lineNumber":66,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-09"},{"lineNumber":67,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":68,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":69,"author":{"gitId":"HappyM0ment"},"content":"     * convertDateToDisplay method will convert a LocalDateTime into a formatted String output for display purposes","lastModifiedDate":"2023-04-10"},{"lineNumber":70,"author":{"gitId":"HappyM0ment"},"content":"     * @param lclDateTime date input in LocalDateTime datatype","lastModifiedDate":"2023-04-10"},{"lineNumber":71,"author":{"gitId":"HappyM0ment"},"content":"     * @return a formatted date in String format for display","lastModifiedDate":"2023-04-10"},{"lineNumber":72,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":73,"author":{"gitId":"HappyM0ment"},"content":"    public static String convertDateToDisplay(LocalDateTime lclDateTime) {","lastModifiedDate":"2023-04-09"},{"lineNumber":74,"author":{"gitId":"HappyM0ment"},"content":"        DateTimeFormatter df \u003d DateTimeFormatter.ofPattern(displayFormat);","lastModifiedDate":"2023-04-09"},{"lineNumber":75,"author":{"gitId":"HappyM0ment"},"content":"        return lclDateTime.format(df);","lastModifiedDate":"2023-04-09"},{"lineNumber":76,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-09"},{"lineNumber":77,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":78,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":79,"author":{"gitId":"HappyM0ment"},"content":"     * isDateEqual method compare 2 LocalDateTime to check if it is equals","lastModifiedDate":"2023-04-10"},{"lineNumber":80,"author":{"gitId":"HappyM0ment"},"content":"     * @param firstDate date input in LocalDateTime datatype to be compared","lastModifiedDate":"2023-04-10"},{"lineNumber":81,"author":{"gitId":"HappyM0ment"},"content":"     * @param secondDate date input in LocalDateTime datatype to be compared","lastModifiedDate":"2023-04-10"},{"lineNumber":82,"author":{"gitId":"HappyM0ment"},"content":"     * @return TRUE if date is equal; FALSE if date is equal","lastModifiedDate":"2023-04-10"},{"lineNumber":83,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":84,"author":{"gitId":"HappyM0ment"},"content":"    public static boolean isDateEqual(LocalDateTime firstDate, LocalDateTime secondDate) {","lastModifiedDate":"2023-04-09"},{"lineNumber":85,"author":{"gitId":"HappyM0ment"},"content":"        assert firstDate !\u003d null : \"first date input cannot be null\";","lastModifiedDate":"2023-04-10"},{"lineNumber":86,"author":{"gitId":"HappyM0ment"},"content":"        assert secondDate !\u003d null : \"second date input cannot be null\";","lastModifiedDate":"2023-04-10"},{"lineNumber":87,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":88,"author":{"gitId":"HappyM0ment"},"content":"        if(firstDate.equals(secondDate)) {","lastModifiedDate":"2023-04-09"},{"lineNumber":89,"author":{"gitId":"HappyM0ment"},"content":"            return true;","lastModifiedDate":"2023-04-09"},{"lineNumber":90,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-09"},{"lineNumber":91,"author":{"gitId":"HappyM0ment"},"content":"        else {","lastModifiedDate":"2023-04-09"},{"lineNumber":92,"author":{"gitId":"HappyM0ment"},"content":"            return false;","lastModifiedDate":"2023-04-09"},{"lineNumber":93,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-09"},{"lineNumber":94,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-09"},{"lineNumber":95,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":96,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-11"},{"lineNumber":97,"author":{"gitId":"HappyM0ment"},"content":"     * isEventDateClash method compare 2 Event date to check if it clashes","lastModifiedDate":"2023-04-11"},{"lineNumber":98,"author":{"gitId":"HappyM0ment"},"content":"     * only under 2 conditions will the events not clash","lastModifiedDate":"2023-04-11"},{"lineNumber":99,"author":{"gitId":"HappyM0ment"},"content":"     * - newEvent endDate isBefore existingEvent startDate OR newEvent startDate isAfter existingEvent endDate","lastModifiedDate":"2023-04-11"},{"lineNumber":100,"author":{"gitId":"HappyM0ment"},"content":"     * @param eventExisting event obj input that exists to be compared","lastModifiedDate":"2023-04-11"},{"lineNumber":101,"author":{"gitId":"HappyM0ment"},"content":"     * @param eventNew event obj input that is to be added to be compared","lastModifiedDate":"2023-04-11"},{"lineNumber":102,"author":{"gitId":"HappyM0ment"},"content":"     * @return TRUE if event clashs; FALSE if doesn\u0027t","lastModifiedDate":"2023-04-11"},{"lineNumber":103,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-11"},{"lineNumber":104,"author":{"gitId":"HappyM0ment"},"content":"    public static boolean isEventDateClash(Event eventExisting, Event eventNew) {","lastModifiedDate":"2023-04-11"},{"lineNumber":105,"author":{"gitId":"HappyM0ment"},"content":"        assert eventExisting !\u003d null : \"first event obj input cannot be null\";","lastModifiedDate":"2023-04-11"},{"lineNumber":106,"author":{"gitId":"HappyM0ment"},"content":"        assert eventNew !\u003d null : \"second event obj input cannot be null\";","lastModifiedDate":"2023-04-11"},{"lineNumber":107,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-11"},{"lineNumber":108,"author":{"gitId":"HappyM0ment"},"content":"        if(eventNew.getEnd().isBefore(eventExisting.getStart()) || eventNew.getStart().isAfter(eventExisting.getEnd())) {","lastModifiedDate":"2023-04-11"},{"lineNumber":109,"author":{"gitId":"HappyM0ment"},"content":"            return false;","lastModifiedDate":"2023-04-11"},{"lineNumber":110,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-11"},{"lineNumber":111,"author":{"gitId":"HappyM0ment"},"content":"        else","lastModifiedDate":"2023-04-11"},{"lineNumber":112,"author":{"gitId":"HappyM0ment"},"content":"        {","lastModifiedDate":"2023-04-11"},{"lineNumber":113,"author":{"gitId":"HappyM0ment"},"content":"            return true;","lastModifiedDate":"2023-04-11"},{"lineNumber":114,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-11"},{"lineNumber":115,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-11"},{"lineNumber":116,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-11"},{"lineNumber":117,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-11"},{"lineNumber":118,"author":{"gitId":"HappyM0ment"},"content":"}","lastModifiedDate":"2023-04-09"}],"authorContributionMap":{"HappyM0ment":118}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HappyM0ment"},"content":"/**","lastModifiedDate":"2023-04-04"},{"lineNumber":2,"author":{"gitId":"HappyM0ment"},"content":" *  DONE BY: A0227169X; ANG JIA JIN, GABRIEL","lastModifiedDate":"2023-04-04"},{"lineNumber":3,"author":{"gitId":"HappyM0ment"},"content":" */","lastModifiedDate":"2023-04-04"},{"lineNumber":4,"author":{"gitId":"HappyM0ment"},"content":"package duke;","lastModifiedDate":"2023-04-04"},{"lineNumber":5,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":6,"author":{"gitId":"HappyM0ment"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-04-09"},{"lineNumber":7,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":8,"author":{"gitId":"HappyM0ment"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-03-17"},{"lineNumber":9,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":10,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-07"},{"lineNumber":11,"author":{"gitId":"HappyM0ment"},"content":"     *  Attributes","lastModifiedDate":"2023-04-07"},{"lineNumber":12,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-07"},{"lineNumber":13,"author":{"gitId":"HappyM0ment"},"content":"    protected LocalDateTime by;","lastModifiedDate":"2023-04-09"},{"lineNumber":14,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":15,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-07"},{"lineNumber":16,"author":{"gitId":"HappyM0ment"},"content":"     *  Constructor","lastModifiedDate":"2023-04-07"},{"lineNumber":17,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-07"},{"lineNumber":18,"author":{"gitId":"HappyM0ment"},"content":"    public Deadline(String description, LocalDateTime by) {","lastModifiedDate":"2023-04-09"},{"lineNumber":19,"author":{"gitId":"HappyM0ment"},"content":"        super(description);","lastModifiedDate":"2023-03-17"},{"lineNumber":20,"author":{"gitId":"HappyM0ment"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-03-17"},{"lineNumber":21,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":22,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":23,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-07"},{"lineNumber":24,"author":{"gitId":"HappyM0ment"},"content":"     * @return the deadline of Task","lastModifiedDate":"2023-04-07"},{"lineNumber":25,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-07"},{"lineNumber":26,"author":{"gitId":"HappyM0ment"},"content":"    public LocalDateTime getBy() {","lastModifiedDate":"2023-04-09"},{"lineNumber":27,"author":{"gitId":"HappyM0ment"},"content":"        return by;","lastModifiedDate":"2023-03-17"},{"lineNumber":28,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":29,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":30,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-07"},{"lineNumber":31,"author":{"gitId":"HappyM0ment"},"content":"     * change the deadline of Task","lastModifiedDate":"2023-04-07"},{"lineNumber":32,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-07"},{"lineNumber":33,"author":{"gitId":"HappyM0ment"},"content":"    public void setBy(LocalDateTime by) {","lastModifiedDate":"2023-04-09"},{"lineNumber":34,"author":{"gitId":"HappyM0ment"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-03-17"},{"lineNumber":35,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":36,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":37,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-07"},{"lineNumber":38,"author":{"gitId":"HappyM0ment"},"content":"     * print out Task\u0027s standard output","lastModifiedDate":"2023-04-07"},{"lineNumber":39,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-07"},{"lineNumber":40,"author":{"gitId":"HappyM0ment"},"content":"    @Override","lastModifiedDate":"2023-03-17"},{"lineNumber":41,"author":{"gitId":"HappyM0ment"},"content":"    public String toString() {","lastModifiedDate":"2023-03-17"},{"lineNumber":42,"author":{"gitId":"HappyM0ment"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + DateValidator.convertDateToDisplay(by) + \")\";","lastModifiedDate":"2023-04-09"},{"lineNumber":43,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":44,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":45,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":46,"author":{"gitId":"HappyM0ment"},"content":"}","lastModifiedDate":"2023-03-17"}],"authorContributionMap":{"HappyM0ment":46}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HappyM0ment"},"content":"/**","lastModifiedDate":"2023-04-04"},{"lineNumber":2,"author":{"gitId":"HappyM0ment"},"content":"*  DONE BY: A0227169X; ANG JIA JIN, GABRIEL","lastModifiedDate":"2023-04-04"},{"lineNumber":3,"author":{"gitId":"HappyM0ment"},"content":"*/","lastModifiedDate":"2023-04-04"},{"lineNumber":4,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":5,"author":{"gitId":"HappyM0ment"},"content":"package duke;","lastModifiedDate":"2023-04-04"},{"lineNumber":6,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":7,"author":{"gitId":"HappyM0ment"},"content":"import duke.command.Command;","lastModifiedDate":"2023-04-04"},{"lineNumber":8,"author":{"gitId":"HappyM0ment"},"content":"import duke.parser.Parser;","lastModifiedDate":"2023-04-04"},{"lineNumber":9,"author":{"gitId":"HappyM0ment"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-04-04"},{"lineNumber":10,"author":{"gitId":"HappyM0ment"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-04-04"},{"lineNumber":11,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":13,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":14,"author":{"gitId":"HappyM0ment"},"content":"    /********************************************/","lastModifiedDate":"2023-04-04"},{"lineNumber":15,"author":{"gitId":"HappyM0ment"},"content":"    private Ui ui;","lastModifiedDate":"2023-04-04"},{"lineNumber":16,"author":{"gitId":"HappyM0ment"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-04-04"},{"lineNumber":17,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":18,"author":{"gitId":"HappyM0ment"},"content":"    private Storage storage;","lastModifiedDate":"2023-04-04"},{"lineNumber":19,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":20,"author":{"gitId":"HappyM0ment"},"content":"    public Duke() {","lastModifiedDate":"2023-04-11"},{"lineNumber":21,"author":{"gitId":"HappyM0ment"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-04-04"},{"lineNumber":22,"author":{"gitId":"HappyM0ment"},"content":"        storage \u003d new Storage();","lastModifiedDate":"2023-04-11"},{"lineNumber":23,"author":{"gitId":"HappyM0ment"},"content":"        try {","lastModifiedDate":"2023-04-04"},{"lineNumber":24,"author":{"gitId":"HappyM0ment"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2023-04-04"},{"lineNumber":25,"author":{"gitId":"HappyM0ment"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-04-04"},{"lineNumber":26,"author":{"gitId":"HappyM0ment"},"content":"            ui.showLoadingError(e.getMessage());","lastModifiedDate":"2023-04-11"},{"lineNumber":27,"author":{"gitId":"HappyM0ment"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2023-04-04"},{"lineNumber":28,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-04"},{"lineNumber":29,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":30,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":31,"author":{"gitId":"HappyM0ment"},"content":"    public void run() {","lastModifiedDate":"2023-04-04"},{"lineNumber":32,"author":{"gitId":"HappyM0ment"},"content":"        ui.showWelcomeMessage();","lastModifiedDate":"2023-04-04"},{"lineNumber":33,"author":{"gitId":"HappyM0ment"},"content":"        boolean isItBye \u003d false;","lastModifiedDate":"2023-04-04"},{"lineNumber":34,"author":{"gitId":"HappyM0ment"},"content":"        while (!isItBye) {","lastModifiedDate":"2023-04-04"},{"lineNumber":35,"author":{"gitId":"HappyM0ment"},"content":"            try {","lastModifiedDate":"2023-04-04"},{"lineNumber":36,"author":{"gitId":"HappyM0ment"},"content":"                String fullCommand \u003d ui.readCommand();","lastModifiedDate":"2023-04-04"},{"lineNumber":37,"author":{"gitId":"HappyM0ment"},"content":"                ui.showDividerLine();","lastModifiedDate":"2023-04-04"},{"lineNumber":38,"author":{"gitId":"HappyM0ment"},"content":"                Command c \u003d Parser.parse(fullCommand);","lastModifiedDate":"2023-04-04"},{"lineNumber":39,"author":{"gitId":"HappyM0ment"},"content":"                c.execute(tasks, ui, storage);","lastModifiedDate":"2023-04-04"},{"lineNumber":40,"author":{"gitId":"HappyM0ment"},"content":"                isItBye \u003d c.isItBye();","lastModifiedDate":"2023-04-04"},{"lineNumber":41,"author":{"gitId":"HappyM0ment"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-04-04"},{"lineNumber":42,"author":{"gitId":"HappyM0ment"},"content":"                ui.showError(e.getMessage());","lastModifiedDate":"2023-04-04"},{"lineNumber":43,"author":{"gitId":"HappyM0ment"},"content":"            } finally {","lastModifiedDate":"2023-04-04"},{"lineNumber":44,"author":{"gitId":"HappyM0ment"},"content":"                ui.showDividerLine();","lastModifiedDate":"2023-04-04"},{"lineNumber":45,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-04"},{"lineNumber":46,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-04"},{"lineNumber":47,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":48,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":49,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":50,"author":{"gitId":"HappyM0ment"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-04-04"},{"lineNumber":51,"author":{"gitId":"HappyM0ment"},"content":"        new Duke().run();","lastModifiedDate":"2023-04-11"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"HappyM0ment":50,"-":3}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HappyM0ment"},"content":"/**","lastModifiedDate":"2023-04-04"},{"lineNumber":2,"author":{"gitId":"HappyM0ment"},"content":" *  DONE BY: A0227169X; ANG JIA JIN, GABRIEL","lastModifiedDate":"2023-04-04"},{"lineNumber":3,"author":{"gitId":"HappyM0ment"},"content":" */","lastModifiedDate":"2023-04-04"},{"lineNumber":4,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":5,"author":{"gitId":"HappyM0ment"},"content":"package duke;","lastModifiedDate":"2023-04-04"},{"lineNumber":6,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":7,"author":{"gitId":"HappyM0ment"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-03-18"},{"lineNumber":8,"author":{"gitId":"HappyM0ment"},"content":"    public DukeException(String errMsg) {","lastModifiedDate":"2023-03-18"},{"lineNumber":9,"author":{"gitId":"HappyM0ment"},"content":"        super(errMsg);","lastModifiedDate":"2023-03-18"},{"lineNumber":10,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-18"},{"lineNumber":11,"author":{"gitId":"HappyM0ment"},"content":"}","lastModifiedDate":"2023-03-18"}],"authorContributionMap":{"HappyM0ment":11}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HappyM0ment"},"content":"/**","lastModifiedDate":"2023-04-04"},{"lineNumber":2,"author":{"gitId":"HappyM0ment"},"content":" *  DONE BY: A0227169X; ANG JIA JIN, GABRIEL","lastModifiedDate":"2023-04-04"},{"lineNumber":3,"author":{"gitId":"HappyM0ment"},"content":" */","lastModifiedDate":"2023-04-04"},{"lineNumber":4,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":5,"author":{"gitId":"HappyM0ment"},"content":"package duke;","lastModifiedDate":"2023-04-04"},{"lineNumber":6,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":7,"author":{"gitId":"HappyM0ment"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-04-11"},{"lineNumber":8,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-11"},{"lineNumber":9,"author":{"gitId":"HappyM0ment"},"content":"public class Event extends Task {","lastModifiedDate":"2023-03-17"},{"lineNumber":10,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":11,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-07"},{"lineNumber":12,"author":{"gitId":"HappyM0ment"},"content":"     *  Attributes","lastModifiedDate":"2023-04-07"},{"lineNumber":13,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-07"},{"lineNumber":14,"author":{"gitId":"HappyM0ment"},"content":"    protected LocalDateTime start;","lastModifiedDate":"2023-04-11"},{"lineNumber":15,"author":{"gitId":"HappyM0ment"},"content":"    protected LocalDateTime end;","lastModifiedDate":"2023-04-11"},{"lineNumber":16,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":17,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-07"},{"lineNumber":18,"author":{"gitId":"HappyM0ment"},"content":"     *  Constructor","lastModifiedDate":"2023-04-07"},{"lineNumber":19,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-07"},{"lineNumber":20,"author":{"gitId":"HappyM0ment"},"content":"    public Event(String description, LocalDateTime start, LocalDateTime end) {","lastModifiedDate":"2023-04-11"},{"lineNumber":21,"author":{"gitId":"HappyM0ment"},"content":"        super(description);","lastModifiedDate":"2023-03-17"},{"lineNumber":22,"author":{"gitId":"HappyM0ment"},"content":"        this.start \u003d start;","lastModifiedDate":"2023-03-17"},{"lineNumber":23,"author":{"gitId":"HappyM0ment"},"content":"        this.end \u003d end;","lastModifiedDate":"2023-03-17"},{"lineNumber":24,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":25,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":26,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-07"},{"lineNumber":27,"author":{"gitId":"HappyM0ment"},"content":"     *  @return start value of Task","lastModifiedDate":"2023-04-07"},{"lineNumber":28,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-07"},{"lineNumber":29,"author":{"gitId":"HappyM0ment"},"content":"    public LocalDateTime getStart() {","lastModifiedDate":"2023-04-11"},{"lineNumber":30,"author":{"gitId":"HappyM0ment"},"content":"        return start;","lastModifiedDate":"2023-03-17"},{"lineNumber":31,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":32,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":33,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-07"},{"lineNumber":34,"author":{"gitId":"HappyM0ment"},"content":"     * Change start value of Task","lastModifiedDate":"2023-04-07"},{"lineNumber":35,"author":{"gitId":"HappyM0ment"},"content":"     * @param start","lastModifiedDate":"2023-04-10"},{"lineNumber":36,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-07"},{"lineNumber":37,"author":{"gitId":"HappyM0ment"},"content":"    public void setStart(LocalDateTime start) {","lastModifiedDate":"2023-04-11"},{"lineNumber":38,"author":{"gitId":"HappyM0ment"},"content":"        this.start \u003d start;","lastModifiedDate":"2023-03-17"},{"lineNumber":39,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":40,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":41,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-07"},{"lineNumber":42,"author":{"gitId":"HappyM0ment"},"content":"     * @return end value of Task","lastModifiedDate":"2023-04-07"},{"lineNumber":43,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-07"},{"lineNumber":44,"author":{"gitId":"HappyM0ment"},"content":"    public LocalDateTime getEnd() {","lastModifiedDate":"2023-04-11"},{"lineNumber":45,"author":{"gitId":"HappyM0ment"},"content":"        return end;","lastModifiedDate":"2023-03-17"},{"lineNumber":46,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":47,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":48,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-07"},{"lineNumber":49,"author":{"gitId":"HappyM0ment"},"content":"     * Change end value of Task","lastModifiedDate":"2023-04-07"},{"lineNumber":50,"author":{"gitId":"HappyM0ment"},"content":"     * @param end end time of the event","lastModifiedDate":"2023-04-10"},{"lineNumber":51,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-07"},{"lineNumber":52,"author":{"gitId":"HappyM0ment"},"content":"    public void setEnd(LocalDateTime end) {","lastModifiedDate":"2023-04-11"},{"lineNumber":53,"author":{"gitId":"HappyM0ment"},"content":"        this.end \u003d end;","lastModifiedDate":"2023-03-17"},{"lineNumber":54,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":55,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":56,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-07"},{"lineNumber":57,"author":{"gitId":"HappyM0ment"},"content":"     * toString() method will print out Task\u0027s standard output","lastModifiedDate":"2023-04-10"},{"lineNumber":58,"author":{"gitId":"HappyM0ment"},"content":"     * @return string format","lastModifiedDate":"2023-04-10"},{"lineNumber":59,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-07"},{"lineNumber":60,"author":{"gitId":"HappyM0ment"},"content":"    @Override","lastModifiedDate":"2023-03-17"},{"lineNumber":61,"author":{"gitId":"HappyM0ment"},"content":"    public String toString() {","lastModifiedDate":"2023-03-17"},{"lineNumber":62,"author":{"gitId":"HappyM0ment"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + DateValidator.convertDateToDisplay(start) + \" to: \" + DateValidator.convertDateToDisplay(end) + \")\";","lastModifiedDate":"2023-04-11"},{"lineNumber":63,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":64,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":65,"author":{"gitId":"HappyM0ment"},"content":"}","lastModifiedDate":"2023-03-17"}],"authorContributionMap":{"HappyM0ment":65}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HappyM0ment"},"content":"/**","lastModifiedDate":"2023-04-04"},{"lineNumber":2,"author":{"gitId":"HappyM0ment"},"content":" *  DONE BY: A0227169X; ANG JIA JIN, GABRIEL","lastModifiedDate":"2023-04-04"},{"lineNumber":3,"author":{"gitId":"HappyM0ment"},"content":" */","lastModifiedDate":"2023-04-04"},{"lineNumber":4,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":5,"author":{"gitId":"HappyM0ment"},"content":"package duke;","lastModifiedDate":"2023-04-04"},{"lineNumber":6,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":7,"author":{"gitId":"HappyM0ment"},"content":"public class Task {","lastModifiedDate":"2023-03-17"},{"lineNumber":8,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-03"},{"lineNumber":9,"author":{"gitId":"HappyM0ment"},"content":"    * Attributes","lastModifiedDate":"2023-04-03"},{"lineNumber":10,"author":{"gitId":"HappyM0ment"},"content":"    */","lastModifiedDate":"2023-04-03"},{"lineNumber":11,"author":{"gitId":"HappyM0ment"},"content":"    protected String description;","lastModifiedDate":"2023-03-17"},{"lineNumber":12,"author":{"gitId":"HappyM0ment"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-03-17"},{"lineNumber":13,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":14,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-03"},{"lineNumber":15,"author":{"gitId":"HappyM0ment"},"content":"    *  Constructor","lastModifiedDate":"2023-04-03"},{"lineNumber":16,"author":{"gitId":"HappyM0ment"},"content":"    */","lastModifiedDate":"2023-04-03"},{"lineNumber":17,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-03"},{"lineNumber":18,"author":{"gitId":"HappyM0ment"},"content":"    public Task(String description) {","lastModifiedDate":"2023-03-17"},{"lineNumber":19,"author":{"gitId":"HappyM0ment"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-03-17"},{"lineNumber":20,"author":{"gitId":"HappyM0ment"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-03-17"},{"lineNumber":21,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":22,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":23,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-03"},{"lineNumber":24,"author":{"gitId":"HappyM0ment"},"content":"     *  getDescription() method will return the description of Task","lastModifiedDate":"2023-04-08"},{"lineNumber":25,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-03"},{"lineNumber":26,"author":{"gitId":"HappyM0ment"},"content":"    public String getDescription() {","lastModifiedDate":"2023-03-17"},{"lineNumber":27,"author":{"gitId":"HappyM0ment"},"content":"        return this.description; // returns the value stored in the description attribute","lastModifiedDate":"2023-03-17"},{"lineNumber":28,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":29,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":30,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":31,"author":{"gitId":"HappyM0ment"},"content":"     *  setDescription() method will change the description of Task","lastModifiedDate":"2023-04-08"},{"lineNumber":32,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":33,"author":{"gitId":"HappyM0ment"},"content":"    public void setDescription(String newDescription) {","lastModifiedDate":"2023-03-17"},{"lineNumber":34,"author":{"gitId":"HappyM0ment"},"content":"        this.description \u003d newDescription; // changes the description with the new input","lastModifiedDate":"2023-03-17"},{"lineNumber":35,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":36,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":37,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":38,"author":{"gitId":"HappyM0ment"},"content":"     *  getTaskStatus() method will return the status of the Task","lastModifiedDate":"2023-04-08"},{"lineNumber":39,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":40,"author":{"gitId":"HappyM0ment"},"content":"    public String getTaskStatus() {","lastModifiedDate":"2023-03-17"},{"lineNumber":41,"author":{"gitId":"HappyM0ment"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2023-03-17"},{"lineNumber":42,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":43,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":44,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":45,"author":{"gitId":"HappyM0ment"},"content":"     *  markAsDone() method will mark the current Task object as done by changing the isDone to TRUE","lastModifiedDate":"2023-04-08"},{"lineNumber":46,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":47,"author":{"gitId":"HappyM0ment"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-03-17"},{"lineNumber":48,"author":{"gitId":"HappyM0ment"},"content":"        this.isDone \u003d true; // converts isDone attribute to \u0027TRUE\u0027","lastModifiedDate":"2023-03-17"},{"lineNumber":49,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":50,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":51,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-08"},{"lineNumber":52,"author":{"gitId":"HappyM0ment"},"content":"     *  markAsUndone() method will un-mark the current task object as undone by changing the isDone to FALSE","lastModifiedDate":"2023-04-08"},{"lineNumber":53,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-08"},{"lineNumber":54,"author":{"gitId":"HappyM0ment"},"content":"    public void markAsUndone() {","lastModifiedDate":"2023-03-17"},{"lineNumber":55,"author":{"gitId":"HappyM0ment"},"content":"        this.isDone \u003d false; // converts isDone attribute to \u0027FALSE\u0027","lastModifiedDate":"2023-03-17"},{"lineNumber":56,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":57,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":58,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-08"},{"lineNumber":59,"author":{"gitId":"HappyM0ment"},"content":"     *  toString() method will print out duke.Task\u0027s standard output","lastModifiedDate":"2023-04-08"},{"lineNumber":60,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-08"},{"lineNumber":61,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":62,"author":{"gitId":"HappyM0ment"},"content":"    @Override","lastModifiedDate":"2023-03-17"},{"lineNumber":63,"author":{"gitId":"HappyM0ment"},"content":"    public String toString() {","lastModifiedDate":"2023-03-17"},{"lineNumber":64,"author":{"gitId":"HappyM0ment"},"content":"        return \"[\" + this.getTaskStatus() + \"] \" + this.description;","lastModifiedDate":"2023-03-17"},{"lineNumber":65,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":66,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":67,"author":{"gitId":"HappyM0ment"},"content":"}","lastModifiedDate":"2023-03-17"}],"authorContributionMap":{"HappyM0ment":67}},{"path":"src/main/java/duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HappyM0ment"},"content":"/**","lastModifiedDate":"2023-04-04"},{"lineNumber":2,"author":{"gitId":"HappyM0ment"},"content":" *  DONE BY: A0227169X; ANG JIA JIN, GABRIEL","lastModifiedDate":"2023-04-04"},{"lineNumber":3,"author":{"gitId":"HappyM0ment"},"content":" */","lastModifiedDate":"2023-04-04"},{"lineNumber":4,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":5,"author":{"gitId":"HappyM0ment"},"content":"package duke;","lastModifiedDate":"2023-04-04"},{"lineNumber":6,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":7,"author":{"gitId":"HappyM0ment"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-03-17"},{"lineNumber":8,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":9,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-07"},{"lineNumber":10,"author":{"gitId":"HappyM0ment"},"content":"     *  Constructor","lastModifiedDate":"2023-04-07"},{"lineNumber":11,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-07"},{"lineNumber":12,"author":{"gitId":"HappyM0ment"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-03-17"},{"lineNumber":13,"author":{"gitId":"HappyM0ment"},"content":"        super(description);","lastModifiedDate":"2023-03-17"},{"lineNumber":14,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":15,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":16,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-07"},{"lineNumber":17,"author":{"gitId":"HappyM0ment"},"content":"     *  toString() method will print out Task\u0027s standard output","lastModifiedDate":"2023-04-10"},{"lineNumber":18,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-07"},{"lineNumber":19,"author":{"gitId":"HappyM0ment"},"content":"    @Override","lastModifiedDate":"2023-03-17"},{"lineNumber":20,"author":{"gitId":"HappyM0ment"},"content":"    public String toString() {","lastModifiedDate":"2023-03-17"},{"lineNumber":21,"author":{"gitId":"HappyM0ment"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-03-17"},{"lineNumber":22,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":23,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":24,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":25,"author":{"gitId":"HappyM0ment"},"content":"}","lastModifiedDate":"2023-03-17"}],"authorContributionMap":{"HappyM0ment":25}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HappyM0ment"},"content":"/**","lastModifiedDate":"2023-04-04"},{"lineNumber":2,"author":{"gitId":"HappyM0ment"},"content":" *  DONE BY: A0227169X; ANG JIA JIN, GABRIEL","lastModifiedDate":"2023-04-04"},{"lineNumber":3,"author":{"gitId":"HappyM0ment"},"content":" */","lastModifiedDate":"2023-04-04"},{"lineNumber":4,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":5,"author":{"gitId":"HappyM0ment"},"content":"package duke;","lastModifiedDate":"2023-04-04"},{"lineNumber":6,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":7,"author":{"gitId":"HappyM0ment"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-04-04"},{"lineNumber":8,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":9,"author":{"gitId":"HappyM0ment"},"content":"public class Ui {","lastModifiedDate":"2023-04-04"},{"lineNumber":10,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":11,"author":{"gitId":"HappyM0ment"},"content":"     *  Attribute","lastModifiedDate":"2023-04-04"},{"lineNumber":12,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":13,"author":{"gitId":"HappyM0ment"},"content":"    private static String loadingError \u003d \"No file found\";","lastModifiedDate":"2023-04-04"},{"lineNumber":14,"author":{"gitId":"HappyM0ment"},"content":"    private static String uiDivider \u003d \"____________________________________________________________\";","lastModifiedDate":"2023-04-04"},{"lineNumber":15,"author":{"gitId":"HappyM0ment"},"content":"    private static String byeMsg \u003d \"Bye. Hope to see you again soon\";","lastModifiedDate":"2023-04-07"},{"lineNumber":16,"author":{"gitId":"HappyM0ment"},"content":"    private static Scanner scanObj;","lastModifiedDate":"2023-04-04"},{"lineNumber":17,"author":{"gitId":"HappyM0ment"},"content":"    private static String input;","lastModifiedDate":"2023-04-04"},{"lineNumber":18,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":19,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":20,"author":{"gitId":"HappyM0ment"},"content":"     *  Constructor","lastModifiedDate":"2023-04-04"},{"lineNumber":21,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":22,"author":{"gitId":"HappyM0ment"},"content":"    public Ui() {","lastModifiedDate":"2023-04-04"},{"lineNumber":23,"author":{"gitId":"HappyM0ment"},"content":"        scanObj \u003d new Scanner(System.in);","lastModifiedDate":"2023-04-04"},{"lineNumber":24,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":25,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":26,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":27,"author":{"gitId":"HappyM0ment"},"content":"     *  this method will show the initial welcome message upon starting the app","lastModifiedDate":"2023-04-04"},{"lineNumber":28,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":29,"author":{"gitId":"HappyM0ment"},"content":"    public void showWelcomeMessage() {","lastModifiedDate":"2023-04-04"},{"lineNumber":30,"author":{"gitId":"HappyM0ment"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2023-04-04"},{"lineNumber":31,"author":{"gitId":"HappyM0ment"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2023-04-04"},{"lineNumber":32,"author":{"gitId":"HappyM0ment"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2023-04-04"},{"lineNumber":33,"author":{"gitId":"HappyM0ment"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2023-04-04"},{"lineNumber":34,"author":{"gitId":"HappyM0ment"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2023-04-04"},{"lineNumber":35,"author":{"gitId":"HappyM0ment"},"content":"        System.out.println(\"Hello from\\n\" + logo);","lastModifiedDate":"2023-04-04"},{"lineNumber":36,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":37,"author":{"gitId":"HappyM0ment"},"content":"        this.showDividerLine();","lastModifiedDate":"2023-04-04"},{"lineNumber":38,"author":{"gitId":"HappyM0ment"},"content":"        System.out.println(\"Hello! I\u0027m Duke\");","lastModifiedDate":"2023-04-04"},{"lineNumber":39,"author":{"gitId":"HappyM0ment"},"content":"        System.out.println(\"Here\u0027s the possible instructions as follows:\");","lastModifiedDate":"2023-04-08"},{"lineNumber":40,"author":{"gitId":"HappyM0ment"},"content":"        System.out.println(\" Add Task [Please follow format] -\u003e Add new Task into task list\");","lastModifiedDate":"2023-04-08"},{"lineNumber":41,"author":{"gitId":"HappyM0ment"},"content":"        System.out.println(\" -\u003e Todo e.g.: \u0027todo \u003cdescription\u003e\u0027 \");","lastModifiedDate":"2023-04-08"},{"lineNumber":42,"author":{"gitId":"HappyM0ment"},"content":"        System.out.println(\" -\u003e Dateline e.g.: \u0027deadline \u003cdescription\u003e /by \u003cdeadline\u003e\u0027 \");","lastModifiedDate":"2023-04-08"},{"lineNumber":43,"author":{"gitId":"HappyM0ment"},"content":"        System.out.println(\" -\u003e Event e.g.: \u0027event \u003cdescription\u003e /from \u003cstart date\u003e /to \u003cend date\u003e\u0027 \");","lastModifiedDate":"2023-04-08"},{"lineNumber":44,"author":{"gitId":"HappyM0ment"},"content":"        System.out.println(\"    -\u003e-\u003e date format in terms of \u0027yyyy-mm-dd HH:mm\u0027 \");","lastModifiedDate":"2023-04-11"},{"lineNumber":45,"author":{"gitId":"HappyM0ment"},"content":"        System.out.println(\" Mark / Unmark / Delete Task; [insert comma between numbers if want to perform Mass Operations]\");","lastModifiedDate":"2023-04-08"},{"lineNumber":46,"author":{"gitId":"HappyM0ment"},"content":"        System.out.println(\" List -\u003e List all Tasks \");","lastModifiedDate":"2023-04-08"},{"lineNumber":47,"author":{"gitId":"HappyM0ment"},"content":"        System.out.println(\" Bye -\u003e Exit\");","lastModifiedDate":"2023-04-08"},{"lineNumber":48,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":49,"author":{"gitId":"HappyM0ment"},"content":"        this.showDividerLine();","lastModifiedDate":"2023-04-08"},{"lineNumber":50,"author":{"gitId":"HappyM0ment"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2023-04-04"},{"lineNumber":51,"author":{"gitId":"HappyM0ment"},"content":"        this.showDividerLine();","lastModifiedDate":"2023-04-04"},{"lineNumber":52,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":53,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":54,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":55,"author":{"gitId":"HappyM0ment"},"content":"     *  this method will print out a divider line","lastModifiedDate":"2023-04-04"},{"lineNumber":56,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":57,"author":{"gitId":"HappyM0ment"},"content":"    public void showDividerLine() {","lastModifiedDate":"2023-04-07"},{"lineNumber":58,"author":{"gitId":"HappyM0ment"},"content":"        System.out.println(uiDivider);","lastModifiedDate":"2023-04-04"},{"lineNumber":59,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":60,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-08"},{"lineNumber":61,"author":{"gitId":"HappyM0ment"},"content":"     *  this method will print out next line","lastModifiedDate":"2023-04-08"},{"lineNumber":62,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-08"},{"lineNumber":63,"author":{"gitId":"HappyM0ment"},"content":"    public void printEmptyLine() {","lastModifiedDate":"2023-04-08"},{"lineNumber":64,"author":{"gitId":"HappyM0ment"},"content":"        System.out.println();","lastModifiedDate":"2023-04-08"},{"lineNumber":65,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-08"},{"lineNumber":66,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":67,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":68,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":69,"author":{"gitId":"HappyM0ment"},"content":"     * this method will print out a loading error","lastModifiedDate":"2023-04-04"},{"lineNumber":70,"author":{"gitId":"HappyM0ment"},"content":"     * @param msg input to be shown","lastModifiedDate":"2023-04-11"},{"lineNumber":71,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":72,"author":{"gitId":"HappyM0ment"},"content":"    public void showLoadingError(String msg) {","lastModifiedDate":"2023-04-11"},{"lineNumber":73,"author":{"gitId":"HappyM0ment"},"content":"        System.out.println(loadingError + \"; \" + msg);","lastModifiedDate":"2023-04-11"},{"lineNumber":74,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":75,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":76,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-07"},{"lineNumber":77,"author":{"gitId":"HappyM0ment"},"content":"     * this method will print motherhood bye statement","lastModifiedDate":"2023-04-07"},{"lineNumber":78,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-07"},{"lineNumber":79,"author":{"gitId":"HappyM0ment"},"content":"    public void showByeMsg() {","lastModifiedDate":"2023-04-12"},{"lineNumber":80,"author":{"gitId":"HappyM0ment"},"content":"        System.out.println(byeMsg);","lastModifiedDate":"2023-04-07"},{"lineNumber":81,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-07"},{"lineNumber":82,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":83,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":84,"author":{"gitId":"HappyM0ment"},"content":"     * this method will take in an input command from the user and returns it","lastModifiedDate":"2023-04-10"},{"lineNumber":85,"author":{"gitId":"HappyM0ment"},"content":"     * @return gives back the next input by the user","lastModifiedDate":"2023-04-11"},{"lineNumber":86,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":87,"author":{"gitId":"HappyM0ment"},"content":"    public String readCommand()","lastModifiedDate":"2023-04-07"},{"lineNumber":88,"author":{"gitId":"HappyM0ment"},"content":"    {","lastModifiedDate":"2023-04-04"},{"lineNumber":89,"author":{"gitId":"HappyM0ment"},"content":"        input \u003d scanObj.nextLine();","lastModifiedDate":"2023-04-04"},{"lineNumber":90,"author":{"gitId":"HappyM0ment"},"content":"        return input;","lastModifiedDate":"2023-04-04"},{"lineNumber":91,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":92,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":93,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":94,"author":{"gitId":"HappyM0ment"},"content":"     * this method will take in an error and display it out","lastModifiedDate":"2023-04-04"},{"lineNumber":95,"author":{"gitId":"HappyM0ment"},"content":"     * @param errorMessage input message to be displayed","lastModifiedDate":"2023-04-11"},{"lineNumber":96,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":97,"author":{"gitId":"HappyM0ment"},"content":"    public void showError(String errorMessage)","lastModifiedDate":"2023-04-07"},{"lineNumber":98,"author":{"gitId":"HappyM0ment"},"content":"    {","lastModifiedDate":"2023-04-04"},{"lineNumber":99,"author":{"gitId":"HappyM0ment"},"content":"        System.out.println(\"Error caught: \" + errorMessage);","lastModifiedDate":"2023-04-04"},{"lineNumber":100,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":101,"author":{"gitId":"HappyM0ment"},"content":"}","lastModifiedDate":"2023-04-04"}],"authorContributionMap":{"HappyM0ment":101}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HappyM0ment"},"content":"/**","lastModifiedDate":"2023-04-04"},{"lineNumber":2,"author":{"gitId":"HappyM0ment"},"content":" *  DONE BY: A0227169X; ANG JIA JIN, GABRIEL","lastModifiedDate":"2023-04-04"},{"lineNumber":3,"author":{"gitId":"HappyM0ment"},"content":" */","lastModifiedDate":"2023-04-04"},{"lineNumber":4,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":5,"author":{"gitId":"HappyM0ment"},"content":"package duke.command;","lastModifiedDate":"2023-04-04"},{"lineNumber":6,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":7,"author":{"gitId":"HappyM0ment"},"content":"import duke.*;","lastModifiedDate":"2023-04-07"},{"lineNumber":8,"author":{"gitId":"HappyM0ment"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-04-04"},{"lineNumber":9,"author":{"gitId":"HappyM0ment"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-04-04"},{"lineNumber":10,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":11,"author":{"gitId":"HappyM0ment"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-04-08"},{"lineNumber":12,"author":{"gitId":"HappyM0ment"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-04-08"},{"lineNumber":13,"author":{"gitId":"HappyM0ment"},"content":"import java.util.Collections;","lastModifiedDate":"2023-04-08"},{"lineNumber":14,"author":{"gitId":"HappyM0ment"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-04-08"},{"lineNumber":15,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":16,"author":{"gitId":"HappyM0ment"},"content":"public class Command {","lastModifiedDate":"2023-04-04"},{"lineNumber":17,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":18,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":19,"author":{"gitId":"HappyM0ment"},"content":"     *  Attribute","lastModifiedDate":"2023-04-04"},{"lineNumber":20,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":21,"author":{"gitId":"HappyM0ment"},"content":"    private boolean isByeAttribute;","lastModifiedDate":"2023-04-09"},{"lineNumber":22,"author":{"gitId":"HappyM0ment"},"content":"    private String[] seperatedInput;","lastModifiedDate":"2023-04-07"},{"lineNumber":23,"author":{"gitId":"HappyM0ment"},"content":"    private String commandName;","lastModifiedDate":"2023-04-07"},{"lineNumber":24,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":25,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":26,"author":{"gitId":"HappyM0ment"},"content":"     *  Constructor w 2 input","lastModifiedDate":"2023-04-04"},{"lineNumber":27,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":28,"author":{"gitId":"HappyM0ment"},"content":"    public Command(String[] seperatedInput) {","lastModifiedDate":"2023-04-04"},{"lineNumber":29,"author":{"gitId":"HappyM0ment"},"content":"        this.seperatedInput \u003d seperatedInput;","lastModifiedDate":"2023-04-04"},{"lineNumber":30,"author":{"gitId":"HappyM0ment"},"content":"        this.commandName \u003d seperatedInput[0];","lastModifiedDate":"2023-04-07"},{"lineNumber":31,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":32,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":33,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":34,"author":{"gitId":"HappyM0ment"},"content":"     *  Constructor w 1 input (Bye, List etc.)","lastModifiedDate":"2023-04-04"},{"lineNumber":35,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":36,"author":{"gitId":"HappyM0ment"},"content":"    public Command(String input) {","lastModifiedDate":"2023-04-04"},{"lineNumber":37,"author":{"gitId":"HappyM0ment"},"content":"        this.commandName \u003d input;","lastModifiedDate":"2023-04-07"},{"lineNumber":38,"author":{"gitId":"HappyM0ment"},"content":"        isByeAttribute \u003d checkIsBye(input);","lastModifiedDate":"2023-04-09"},{"lineNumber":39,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":40,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":41,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-07"},{"lineNumber":42,"author":{"gitId":"HappyM0ment"},"content":"     * This method checks if command line is \u0027bye\u0027","lastModifiedDate":"2023-04-09"},{"lineNumber":43,"author":{"gitId":"HappyM0ment"},"content":"     * @param input command parameter to check for \u0027bye\u0027 command","lastModifiedDate":"2023-04-09"},{"lineNumber":44,"author":{"gitId":"HappyM0ment"},"content":"     * @return True if command is \u0027bye\u0027, False if command is not \u0027bye\u0027","lastModifiedDate":"2023-04-09"},{"lineNumber":45,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-07"},{"lineNumber":46,"author":{"gitId":"HappyM0ment"},"content":"    public boolean checkIsBye(String input) {","lastModifiedDate":"2023-04-07"},{"lineNumber":47,"author":{"gitId":"HappyM0ment"},"content":"        if (input.equalsIgnoreCase(\"bye\")) {","lastModifiedDate":"2023-04-04"},{"lineNumber":48,"author":{"gitId":"HappyM0ment"},"content":"            return true;","lastModifiedDate":"2023-04-04"},{"lineNumber":49,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-04"},{"lineNumber":50,"author":{"gitId":"HappyM0ment"},"content":"        else {","lastModifiedDate":"2023-04-04"},{"lineNumber":51,"author":{"gitId":"HappyM0ment"},"content":"            return false;","lastModifiedDate":"2023-04-04"},{"lineNumber":52,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-04"},{"lineNumber":53,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":54,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":55,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-08"},{"lineNumber":56,"author":{"gitId":"HappyM0ment"},"content":"     * This helper method converts all values in the string to array","lastModifiedDate":"2023-04-09"},{"lineNumber":57,"author":{"gitId":"HappyM0ment"},"content":"     * @param strArrayList arraylist of String elements","lastModifiedDate":"2023-04-09"},{"lineNumber":58,"author":{"gitId":"HappyM0ment"},"content":"     * @return arraylist of Integer elements","lastModifiedDate":"2023-04-09"},{"lineNumber":59,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-08"},{"lineNumber":60,"author":{"gitId":"HappyM0ment"},"content":"    public ArrayList\u003cInteger\u003e convertToIntArrayList(ArrayList\u003cString\u003e strArrayList) {","lastModifiedDate":"2023-04-08"},{"lineNumber":61,"author":{"gitId":"HappyM0ment"},"content":"        ArrayList\u003cInteger\u003e intArrayList \u003d new ArrayList\u003cInteger\u003e();","lastModifiedDate":"2023-04-08"},{"lineNumber":62,"author":{"gitId":"HappyM0ment"},"content":"        for(String s : strArrayList) {","lastModifiedDate":"2023-04-08"},{"lineNumber":63,"author":{"gitId":"HappyM0ment"},"content":"            intArrayList.add(Integer.valueOf(s));","lastModifiedDate":"2023-04-08"},{"lineNumber":64,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-08"},{"lineNumber":65,"author":{"gitId":"HappyM0ment"},"content":"        return intArrayList;","lastModifiedDate":"2023-04-08"},{"lineNumber":66,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-08"},{"lineNumber":67,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":68,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-08"},{"lineNumber":69,"author":{"gitId":"HappyM0ment"},"content":"     * This helper method takes in a String array and splits them into integer Arraylist using a helper method \u0027convertToIntarrayList\u0027","lastModifiedDate":"2023-04-09"},{"lineNumber":70,"author":{"gitId":"HappyM0ment"},"content":"     * @param inputArray array of String elements","lastModifiedDate":"2023-04-09"},{"lineNumber":71,"author":{"gitId":"HappyM0ment"},"content":"     * @return arraylist of Integer elements","lastModifiedDate":"2023-04-09"},{"lineNumber":72,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-08"},{"lineNumber":73,"author":{"gitId":"HappyM0ment"},"content":"    public ArrayList\u003cInteger\u003e convertAndSortDescending(String[] inputArray) {","lastModifiedDate":"2023-04-08"},{"lineNumber":74,"author":{"gitId":"HappyM0ment"},"content":"        ArrayList\u003cString\u003e separateMultipleIndex \u003d new ArrayList(Arrays.asList(inputArray));","lastModifiedDate":"2023-04-08"},{"lineNumber":75,"author":{"gitId":"HappyM0ment"},"content":"        separateMultipleIndex \u003d (ArrayList\u003cString\u003e)separateMultipleIndex.stream().map(p -\u003e p.trim()).collect(Collectors.toList()); //this method will use the inbuilt stream function in arrayList to remove all whitespaces in each element","lastModifiedDate":"2023-04-08"},{"lineNumber":76,"author":{"gitId":"HappyM0ment"},"content":"        ArrayList\u003cInteger\u003e multipleIndexList \u003d convertToIntArrayList(separateMultipleIndex);","lastModifiedDate":"2023-04-08"},{"lineNumber":77,"author":{"gitId":"HappyM0ment"},"content":"        Collections.sort(multipleIndexList, Collections.reverseOrder());","lastModifiedDate":"2023-04-08"},{"lineNumber":78,"author":{"gitId":"HappyM0ment"},"content":"        return multipleIndexList;","lastModifiedDate":"2023-04-08"},{"lineNumber":79,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-08"},{"lineNumber":80,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":81,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-07"},{"lineNumber":82,"author":{"gitId":"HappyM0ment"},"content":"     * This method performs all key functions of the Duke programe","lastModifiedDate":"2023-04-09"},{"lineNumber":83,"author":{"gitId":"HappyM0ment"},"content":"     * @param task TaskList object for Task manipulation purposes","lastModifiedDate":"2023-04-09"},{"lineNumber":84,"author":{"gitId":"HappyM0ment"},"content":"     * @param ui UI object for display purposes","lastModifiedDate":"2023-04-09"},{"lineNumber":85,"author":{"gitId":"HappyM0ment"},"content":"     * @param storage Storage object for storing purposes","lastModifiedDate":"2023-04-09"},{"lineNumber":86,"author":{"gitId":"HappyM0ment"},"content":"     * @return arraylist of Integer elements","lastModifiedDate":"2023-04-09"},{"lineNumber":87,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-07"},{"lineNumber":88,"author":{"gitId":"HappyM0ment"},"content":"    public void execute(TaskList task, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-04-07"},{"lineNumber":89,"author":{"gitId":"HappyM0ment"},"content":"        if (!commandName.equalsIgnoreCase(\"bye\")) {","lastModifiedDate":"2023-04-07"},{"lineNumber":90,"author":{"gitId":"HappyM0ment"},"content":"            if (commandName.equalsIgnoreCase(\"list\")) {","lastModifiedDate":"2023-04-07"},{"lineNumber":91,"author":{"gitId":"HappyM0ment"},"content":"                task.printTaskList();","lastModifiedDate":"2023-04-07"},{"lineNumber":92,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-07"},{"lineNumber":93,"author":{"gitId":"HappyM0ment"},"content":"            else if (commandName.equalsIgnoreCase(\"mark\")) {","lastModifiedDate":"2023-04-07"},{"lineNumber":94,"author":{"gitId":"HappyM0ment"},"content":"                /**","lastModifiedDate":"2023-04-08"},{"lineNumber":95,"author":{"gitId":"HappyM0ment"},"content":"                 * split seperatedInput[1] by commas,","lastModifiedDate":"2023-04-08"},{"lineNumber":96,"author":{"gitId":"HappyM0ment"},"content":"                 * sort by descending using Collections lib,","lastModifiedDate":"2023-04-08"},{"lineNumber":97,"author":{"gitId":"HappyM0ment"},"content":"                 * iterate to retrieve the index to be marked \u0026","lastModifiedDate":"2023-04-08"},{"lineNumber":98,"author":{"gitId":"HappyM0ment"},"content":"                 * set Status of Task to Done","lastModifiedDate":"2023-04-08"},{"lineNumber":99,"author":{"gitId":"HappyM0ment"},"content":"                 */","lastModifiedDate":"2023-04-08"},{"lineNumber":100,"author":{"gitId":"HappyM0ment"},"content":"                ArrayList\u003cInteger\u003e multipleIndexList \u003d convertAndSortDescending(seperatedInput[1].split(\",\"));","lastModifiedDate":"2023-04-08"},{"lineNumber":101,"author":{"gitId":"HappyM0ment"},"content":"                for(int i \u003d 0; i \u003c multipleIndexList.size(); i++) {","lastModifiedDate":"2023-04-08"},{"lineNumber":102,"author":{"gitId":"HappyM0ment"},"content":"                    task.markTask(multipleIndexList.get(i)-1);","lastModifiedDate":"2023-04-08"},{"lineNumber":103,"author":{"gitId":"HappyM0ment"},"content":"                }","lastModifiedDate":"2023-04-08"},{"lineNumber":104,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-07"},{"lineNumber":105,"author":{"gitId":"HappyM0ment"},"content":"            else if (commandName.equalsIgnoreCase(\"unmark\")) {","lastModifiedDate":"2023-04-07"},{"lineNumber":106,"author":{"gitId":"HappyM0ment"},"content":"                /**","lastModifiedDate":"2023-04-08"},{"lineNumber":107,"author":{"gitId":"HappyM0ment"},"content":"                 * split seperatedInput[1] by commas,","lastModifiedDate":"2023-04-08"},{"lineNumber":108,"author":{"gitId":"HappyM0ment"},"content":"                 * sort by descending using Collections lib,","lastModifiedDate":"2023-04-08"},{"lineNumber":109,"author":{"gitId":"HappyM0ment"},"content":"                 * iterate to retrieve the index to be marked \u0026","lastModifiedDate":"2023-04-08"},{"lineNumber":110,"author":{"gitId":"HappyM0ment"},"content":"                 * set Status of Task to undone","lastModifiedDate":"2023-04-08"},{"lineNumber":111,"author":{"gitId":"HappyM0ment"},"content":"                 */","lastModifiedDate":"2023-04-08"},{"lineNumber":112,"author":{"gitId":"HappyM0ment"},"content":"                ArrayList\u003cInteger\u003e multipleIndexList \u003d convertAndSortDescending(seperatedInput[1].split(\",\"));","lastModifiedDate":"2023-04-08"},{"lineNumber":113,"author":{"gitId":"HappyM0ment"},"content":"                for(int i \u003d 0; i \u003c multipleIndexList.size(); i++) {","lastModifiedDate":"2023-04-08"},{"lineNumber":114,"author":{"gitId":"HappyM0ment"},"content":"                    task.unmarkTask(multipleIndexList.get(i)-1);","lastModifiedDate":"2023-04-08"},{"lineNumber":115,"author":{"gitId":"HappyM0ment"},"content":"                }","lastModifiedDate":"2023-04-08"},{"lineNumber":116,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-07"},{"lineNumber":117,"author":{"gitId":"HappyM0ment"},"content":"            else if (commandName.equalsIgnoreCase(\"delete\")) {","lastModifiedDate":"2023-04-07"},{"lineNumber":118,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":119,"author":{"gitId":"HappyM0ment"},"content":"                /**","lastModifiedDate":"2023-04-08"},{"lineNumber":120,"author":{"gitId":"HappyM0ment"},"content":"                 * split seperatedInput[1] by commas,","lastModifiedDate":"2023-04-08"},{"lineNumber":121,"author":{"gitId":"HappyM0ment"},"content":"                 * sort by descending using Collections lib,","lastModifiedDate":"2023-04-08"},{"lineNumber":122,"author":{"gitId":"HappyM0ment"},"content":"                 * iterate to retrieve the index to be marked \u0026","lastModifiedDate":"2023-04-08"},{"lineNumber":123,"author":{"gitId":"HappyM0ment"},"content":"                 * delete them","lastModifiedDate":"2023-04-08"},{"lineNumber":124,"author":{"gitId":"HappyM0ment"},"content":"                 */","lastModifiedDate":"2023-04-08"},{"lineNumber":125,"author":{"gitId":"HappyM0ment"},"content":"                ArrayList\u003cInteger\u003e multipleIndexList \u003d convertAndSortDescending(seperatedInput[1].split(\",\"));","lastModifiedDate":"2023-04-08"},{"lineNumber":126,"author":{"gitId":"HappyM0ment"},"content":"                for(int i \u003d 0; i \u003c multipleIndexList.size(); i++) {","lastModifiedDate":"2023-04-08"},{"lineNumber":127,"author":{"gitId":"HappyM0ment"},"content":"                    task.deleteTask(multipleIndexList.get(i)-1);","lastModifiedDate":"2023-04-08"},{"lineNumber":128,"author":{"gitId":"HappyM0ment"},"content":"                    ui.printEmptyLine();","lastModifiedDate":"2023-04-08"},{"lineNumber":129,"author":{"gitId":"HappyM0ment"},"content":"                }","lastModifiedDate":"2023-04-08"},{"lineNumber":130,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-07"},{"lineNumber":131,"author":{"gitId":"HappyM0ment"},"content":"            else if (commandName.equalsIgnoreCase(\"deadline\")) {","lastModifiedDate":"2023-04-07"},{"lineNumber":132,"author":{"gitId":"HappyM0ment"},"content":"                /**","lastModifiedDate":"2023-04-08"},{"lineNumber":133,"author":{"gitId":"HappyM0ment"},"content":"                 * Using indexOf method to extract description \u0026 dateline","lastModifiedDate":"2023-04-08"},{"lineNumber":134,"author":{"gitId":"HappyM0ment"},"content":"                 * nextSeparated array will store value in such index","lastModifiedDate":"2023-04-08"},{"lineNumber":135,"author":{"gitId":"HappyM0ment"},"content":"                 * nextSeparated[0] \u003d description;","lastModifiedDate":"2023-04-08"},{"lineNumber":136,"author":{"gitId":"HappyM0ment"},"content":"                 * nextSeparated[1] \u003d deadline;","lastModifiedDate":"2023-04-08"},{"lineNumber":137,"author":{"gitId":"HappyM0ment"},"content":"                 */","lastModifiedDate":"2023-04-08"},{"lineNumber":138,"author":{"gitId":"HappyM0ment"},"content":"                String [] nextSeparated \u003d seperatedInput[1].split(\"/by\");","lastModifiedDate":"2023-04-07"},{"lineNumber":139,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":140,"author":{"gitId":"HappyM0ment"},"content":"                Deadline newDeadline \u003d new Deadline(nextSeparated[0].trim(), DateValidator.convertStringToDate(nextSeparated[1].trim()));","lastModifiedDate":"2023-04-11"},{"lineNumber":141,"author":{"gitId":"HappyM0ment"},"content":"                task.addNewTask(newDeadline);","lastModifiedDate":"2023-04-07"},{"lineNumber":142,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-04"},{"lineNumber":143,"author":{"gitId":"HappyM0ment"},"content":"            else if(commandName.equalsIgnoreCase(\"event\")) {","lastModifiedDate":"2023-04-07"},{"lineNumber":144,"author":{"gitId":"HappyM0ment"},"content":"                /**","lastModifiedDate":"2023-04-08"},{"lineNumber":145,"author":{"gitId":"HappyM0ment"},"content":"                 * Using indexOf method to extract description \u0026 start/end timing","lastModifiedDate":"2023-04-08"},{"lineNumber":146,"author":{"gitId":"HappyM0ment"},"content":"                 * nextSeparated array will store value in such index","lastModifiedDate":"2023-04-08"},{"lineNumber":147,"author":{"gitId":"HappyM0ment"},"content":"                 * @param nextSeparated[0] \u003d description;","lastModifiedDate":"2023-04-08"},{"lineNumber":148,"author":{"gitId":"HappyM0ment"},"content":"                 * @param nextSeparated[1] \u003d start/end timing;","lastModifiedDate":"2023-04-08"},{"lineNumber":149,"author":{"gitId":"HappyM0ment"},"content":"                 */","lastModifiedDate":"2023-04-08"},{"lineNumber":150,"author":{"gitId":"HappyM0ment"},"content":"                String [] nextSeparated \u003d seperatedInput[1].split(\"/from\");","lastModifiedDate":"2023-04-07"},{"lineNumber":151,"author":{"gitId":"HappyM0ment"},"content":"                String [] separatedTiming \u003d nextSeparated[1].split(\"/to\");","lastModifiedDate":"2023-04-07"},{"lineNumber":152,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":153,"author":{"gitId":"HappyM0ment"},"content":"                if(DateValidator.convertStringToDate(separatedTiming[0].trim()).isAfter(DateValidator.convertStringToDate(separatedTiming[1].trim()))) {","lastModifiedDate":"2023-04-11"},{"lineNumber":154,"author":{"gitId":"HappyM0ment"},"content":"                    throw new DukeException(\"☹ OOPS!!! datetime value for /from cannot be after datetime value for /to\");","lastModifiedDate":"2023-04-11"},{"lineNumber":155,"author":{"gitId":"HappyM0ment"},"content":"                }","lastModifiedDate":"2023-04-11"},{"lineNumber":156,"author":{"gitId":"HappyM0ment"},"content":"                else {","lastModifiedDate":"2023-04-11"},{"lineNumber":157,"author":{"gitId":"HappyM0ment"},"content":"                    Event newEvent \u003d new Event(nextSeparated[0].trim(), DateValidator.convertStringToDate(separatedTiming[0].trim()), DateValidator.convertStringToDate(separatedTiming[1].trim()));","lastModifiedDate":"2023-04-11"},{"lineNumber":158,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-11"},{"lineNumber":159,"author":{"gitId":"HappyM0ment"},"content":"                    Integer count \u003d task.findClashingEventInList(newEvent);","lastModifiedDate":"2023-04-11"},{"lineNumber":160,"author":{"gitId":"HappyM0ment"},"content":"                    if(count !\u003d -1)","lastModifiedDate":"2023-04-11"},{"lineNumber":161,"author":{"gitId":"HappyM0ment"},"content":"                    {","lastModifiedDate":"2023-04-11"},{"lineNumber":162,"author":{"gitId":"HappyM0ment"},"content":"                        throw new DukeException(\"☹ OOPS!!! This Event clashes with existing task: \" + task.getElementFromList(count));","lastModifiedDate":"2023-04-11"},{"lineNumber":163,"author":{"gitId":"HappyM0ment"},"content":"                    }","lastModifiedDate":"2023-04-11"},{"lineNumber":164,"author":{"gitId":"HappyM0ment"},"content":"                    else {","lastModifiedDate":"2023-04-11"},{"lineNumber":165,"author":{"gitId":"HappyM0ment"},"content":"                        task.addNewTask(newEvent);","lastModifiedDate":"2023-04-07"},{"lineNumber":166,"author":{"gitId":"HappyM0ment"},"content":"                    }","lastModifiedDate":"2023-04-07"},{"lineNumber":167,"author":{"gitId":"HappyM0ment"},"content":"                }","lastModifiedDate":"2023-04-11"},{"lineNumber":168,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-11"},{"lineNumber":169,"author":{"gitId":"HappyM0ment"},"content":"            else if(commandName.equalsIgnoreCase(\"todo\")) {","lastModifiedDate":"2023-04-07"},{"lineNumber":170,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":171,"author":{"gitId":"HappyM0ment"},"content":"                Todo newTodo \u003d new Todo(seperatedInput[1].trim());","lastModifiedDate":"2023-04-08"},{"lineNumber":172,"author":{"gitId":"HappyM0ment"},"content":"                task.addNewTask(newTodo);","lastModifiedDate":"2023-04-07"},{"lineNumber":173,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-07"},{"lineNumber":174,"author":{"gitId":"HappyM0ment"},"content":"            else if(commandName.equalsIgnoreCase(\"find\"))","lastModifiedDate":"2023-04-08"},{"lineNumber":175,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-04-08"},{"lineNumber":176,"author":{"gitId":"HappyM0ment"},"content":"                task.findItemInList(seperatedInput[1].trim());","lastModifiedDate":"2023-04-08"},{"lineNumber":177,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-08"},{"lineNumber":178,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":179,"author":{"gitId":"HappyM0ment"},"content":"            /**","lastModifiedDate":"2023-04-08"},{"lineNumber":180,"author":{"gitId":"HappyM0ment"},"content":"             *  save task list to txt","lastModifiedDate":"2023-04-08"},{"lineNumber":181,"author":{"gitId":"HappyM0ment"},"content":"             */","lastModifiedDate":"2023-04-08"},{"lineNumber":182,"author":{"gitId":"HappyM0ment"},"content":"            storage.saveFile(task);","lastModifiedDate":"2023-04-07"},{"lineNumber":183,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-07"},{"lineNumber":184,"author":{"gitId":"HappyM0ment"},"content":"        else {","lastModifiedDate":"2023-04-07"},{"lineNumber":185,"author":{"gitId":"HappyM0ment"},"content":"            isByeAttribute \u003d true;","lastModifiedDate":"2023-04-09"},{"lineNumber":186,"author":{"gitId":"HappyM0ment"},"content":"            ui.showByeMsg();","lastModifiedDate":"2023-04-12"},{"lineNumber":187,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-07"},{"lineNumber":188,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-07"},{"lineNumber":189,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":190,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-07"},{"lineNumber":191,"author":{"gitId":"HappyM0ment"},"content":"     *  This method returns the current status of isByeAttribute","lastModifiedDate":"2023-04-09"},{"lineNumber":192,"author":{"gitId":"HappyM0ment"},"content":"     *  @return TRUE if it is bye; FALSE if it is not bye","lastModifiedDate":"2023-04-09"},{"lineNumber":193,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-07"},{"lineNumber":194,"author":{"gitId":"HappyM0ment"},"content":"    public boolean isItBye() {","lastModifiedDate":"2023-04-07"},{"lineNumber":195,"author":{"gitId":"HappyM0ment"},"content":"        return isByeAttribute;","lastModifiedDate":"2023-04-09"},{"lineNumber":196,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":197,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":198,"author":{"gitId":"HappyM0ment"},"content":"}","lastModifiedDate":"2023-04-04"}],"authorContributionMap":{"HappyM0ment":198}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HappyM0ment"},"content":"/**","lastModifiedDate":"2023-04-04"},{"lineNumber":2,"author":{"gitId":"HappyM0ment"},"content":" *  DONE BY: A0227169X; ANG JIA JIN, GABRIEL","lastModifiedDate":"2023-04-04"},{"lineNumber":3,"author":{"gitId":"HappyM0ment"},"content":" */","lastModifiedDate":"2023-04-04"},{"lineNumber":4,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":5,"author":{"gitId":"HappyM0ment"},"content":"package duke.parser;","lastModifiedDate":"2023-04-04"},{"lineNumber":6,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":7,"author":{"gitId":"HappyM0ment"},"content":"import duke.DukeException;","lastModifiedDate":"2023-04-04"},{"lineNumber":8,"author":{"gitId":"HappyM0ment"},"content":"import duke.command.Command;","lastModifiedDate":"2023-04-04"},{"lineNumber":9,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":10,"author":{"gitId":"HappyM0ment"},"content":"public class Parser {","lastModifiedDate":"2023-04-04"},{"lineNumber":11,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":12,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":13,"author":{"gitId":"HappyM0ment"},"content":"     *  Attribute","lastModifiedDate":"2023-04-04"},{"lineNumber":14,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":15,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":16,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":17,"author":{"gitId":"HappyM0ment"},"content":"     *  Constructor","lastModifiedDate":"2023-04-04"},{"lineNumber":18,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":19,"author":{"gitId":"HappyM0ment"},"content":"    public Parser() {","lastModifiedDate":"2023-04-04"},{"lineNumber":20,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":21,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":22,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":23,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":24,"author":{"gitId":"HappyM0ment"},"content":"     * This method will make sense of the command given and return a command object","lastModifiedDate":"2023-04-04"},{"lineNumber":25,"author":{"gitId":"HappyM0ment"},"content":"     * @param fullCommand raw command input given by the user","lastModifiedDate":"2023-04-09"},{"lineNumber":26,"author":{"gitId":"HappyM0ment"},"content":"     * @return a command object containing either the fullCommand or the seperated array of command \u0026 parameters","lastModifiedDate":"2023-04-09"},{"lineNumber":27,"author":{"gitId":"HappyM0ment"},"content":"     * @throws DukeException to catch error from \u0027identifyFunctionsValidateInput\u0027 method","lastModifiedDate":"2023-04-09"},{"lineNumber":28,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":29,"author":{"gitId":"HappyM0ment"},"content":"    public static Command parse(String fullCommand) throws DukeException {","lastModifiedDate":"2023-04-04"},{"lineNumber":30,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":31,"author":{"gitId":"HappyM0ment"},"content":"        if(fullCommand.equalsIgnoreCase(\"bye\") || fullCommand.equalsIgnoreCase(\"list\")) {","lastModifiedDate":"2023-04-04"},{"lineNumber":32,"author":{"gitId":"HappyM0ment"},"content":"            //creating Command object","lastModifiedDate":"2023-04-04"},{"lineNumber":33,"author":{"gitId":"HappyM0ment"},"content":"            Command c \u003d new Command(fullCommand);","lastModifiedDate":"2023-04-04"},{"lineNumber":34,"author":{"gitId":"HappyM0ment"},"content":"            return c;","lastModifiedDate":"2023-04-04"},{"lineNumber":35,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-04"},{"lineNumber":36,"author":{"gitId":"HappyM0ment"},"content":"        else {","lastModifiedDate":"2023-04-04"},{"lineNumber":37,"author":{"gitId":"HappyM0ment"},"content":"            try {","lastModifiedDate":"2023-04-04"},{"lineNumber":38,"author":{"gitId":"HappyM0ment"},"content":"                String [] seperatedInput \u003d identifyFunctionsValidateInput(fullCommand);","lastModifiedDate":"2023-04-04"},{"lineNumber":39,"author":{"gitId":"HappyM0ment"},"content":"                //creating Command object","lastModifiedDate":"2023-04-04"},{"lineNumber":40,"author":{"gitId":"HappyM0ment"},"content":"                Command c \u003d new Command(seperatedInput);","lastModifiedDate":"2023-04-04"},{"lineNumber":41,"author":{"gitId":"HappyM0ment"},"content":"                return c;","lastModifiedDate":"2023-04-04"},{"lineNumber":42,"author":{"gitId":"HappyM0ment"},"content":"            } catch (DukeException de) {","lastModifiedDate":"2023-04-04"},{"lineNumber":43,"author":{"gitId":"HappyM0ment"},"content":"                throw new DukeException(de.getMessage());","lastModifiedDate":"2023-04-04"},{"lineNumber":44,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-04"},{"lineNumber":45,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-04"},{"lineNumber":46,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":47,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":48,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":49,"author":{"gitId":"HappyM0ment"},"content":"     * Helper method","lastModifiedDate":"2023-04-04"},{"lineNumber":50,"author":{"gitId":"HappyM0ment"},"content":"     * isNumber() method will check input if it is a Number","lastModifiedDate":"2023-04-04"},{"lineNumber":51,"author":{"gitId":"HappyM0ment"},"content":"     * Reference:  https://stackoverflow.com/questions/1102891/how-to-check-if-a-string-is-numeric-in-java","lastModifiedDate":"2023-04-04"},{"lineNumber":52,"author":{"gitId":"HappyM0ment"},"content":"     * @param strToCheck String input to check","lastModifiedDate":"2023-04-09"},{"lineNumber":53,"author":{"gitId":"HappyM0ment"},"content":"     * @return TRUE if it is a number; FALSE if it is a String","lastModifiedDate":"2023-04-09"},{"lineNumber":54,"author":{"gitId":"HappyM0ment"},"content":"     * @throws DukeException Integer.parseInt will throw NumberFormatException if it is unable to convert input to Integer once NumberFormatException is caught, return FALSE as it is not a Number","lastModifiedDate":"2023-04-09"},{"lineNumber":55,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":56,"author":{"gitId":"HappyM0ment"},"content":"    public static boolean isNumber(String strToCheck)","lastModifiedDate":"2023-04-04"},{"lineNumber":57,"author":{"gitId":"HappyM0ment"},"content":"    {","lastModifiedDate":"2023-04-04"},{"lineNumber":58,"author":{"gitId":"HappyM0ment"},"content":"        try {","lastModifiedDate":"2023-04-04"},{"lineNumber":59,"author":{"gitId":"HappyM0ment"},"content":"            Integer.parseInt(strToCheck);","lastModifiedDate":"2023-04-04"},{"lineNumber":60,"author":{"gitId":"HappyM0ment"},"content":"            return true;","lastModifiedDate":"2023-04-04"},{"lineNumber":61,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-04"},{"lineNumber":62,"author":{"gitId":"HappyM0ment"},"content":"        catch(NumberFormatException exception)","lastModifiedDate":"2023-04-04"},{"lineNumber":63,"author":{"gitId":"HappyM0ment"},"content":"        {","lastModifiedDate":"2023-04-04"},{"lineNumber":64,"author":{"gitId":"HappyM0ment"},"content":"            return false;","lastModifiedDate":"2023-04-04"},{"lineNumber":65,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-04"},{"lineNumber":66,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":67,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":68,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":69,"author":{"gitId":"HappyM0ment"},"content":"     * Helper method","lastModifiedDate":"2023-04-04"},{"lineNumber":70,"author":{"gitId":"HappyM0ment"},"content":"     * identifyFunctionsValidateInput() method will perform 2 actions:","lastModifiedDate":"2023-04-04"},{"lineNumber":71,"author":{"gitId":"HappyM0ment"},"content":"     * 1) return Functions and the parameters","lastModifiedDate":"2023-04-04"},{"lineNumber":72,"author":{"gitId":"HappyM0ment"},"content":"     *  functions: \"Deadline\" \"Event\" \"To-Do\" \"Mark\" \"Unmark\" \"Delete\" \"Find\"","lastModifiedDate":"2023-04-09"},{"lineNumber":73,"author":{"gitId":"HappyM0ment"},"content":"     *  Outcome: separatedInput[0] \u003d Functions","lastModifiedDate":"2023-04-04"},{"lineNumber":74,"author":{"gitId":"HappyM0ment"},"content":"     *           separatedInput[1] \u003d Parameters","lastModifiedDate":"2023-04-04"},{"lineNumber":75,"author":{"gitId":"HappyM0ment"},"content":"     *","lastModifiedDate":"2023-04-04"},{"lineNumber":76,"author":{"gitId":"HappyM0ment"},"content":"     * 2) validates the input to catch all kinds of error such as","lastModifiedDate":"2023-04-04"},{"lineNumber":77,"author":{"gitId":"HappyM0ment"},"content":"     *  - Empty Parameters","lastModifiedDate":"2023-04-04"},{"lineNumber":78,"author":{"gitId":"HappyM0ment"},"content":"     *  - Invalid Functions","lastModifiedDate":"2023-04-04"},{"lineNumber":79,"author":{"gitId":"HappyM0ment"},"content":"     * Deadline functions:","lastModifiedDate":"2023-04-04"},{"lineNumber":80,"author":{"gitId":"HappyM0ment"},"content":"     *  - Missing /by parameters","lastModifiedDate":"2023-04-04"},{"lineNumber":81,"author":{"gitId":"HappyM0ment"},"content":"     *  - Missing deadline","lastModifiedDate":"2023-04-04"},{"lineNumber":82,"author":{"gitId":"HappyM0ment"},"content":"     * Events functions:","lastModifiedDate":"2023-04-04"},{"lineNumber":83,"author":{"gitId":"HappyM0ment"},"content":"     *  - Missing /from \u0026 /to parameters","lastModifiedDate":"2023-04-04"},{"lineNumber":84,"author":{"gitId":"HappyM0ment"},"content":"     *  - Missing duration","lastModifiedDate":"2023-04-04"},{"lineNumber":85,"author":{"gitId":"HappyM0ment"},"content":"     * Mark / Unmark / Delete functions:","lastModifiedDate":"2023-04-04"},{"lineNumber":86,"author":{"gitId":"HappyM0ment"},"content":"     *  - Missing value for mark \u0026 unmark","lastModifiedDate":"2023-04-04"},{"lineNumber":87,"author":{"gitId":"HappyM0ment"},"content":"     *  - Each value (if more than 1, must be a number or more than 0)","lastModifiedDate":"2023-04-08"},{"lineNumber":88,"author":{"gitId":"HappyM0ment"},"content":"     * @param stringInput input given by user","lastModifiedDate":"2023-04-09"},{"lineNumber":89,"author":{"gitId":"HappyM0ment"},"content":"     * @return a sanitized string array for processing","lastModifiedDate":"2023-04-09"},{"lineNumber":90,"author":{"gitId":"HappyM0ment"},"content":"     * @throws DukeException if any of the rule above is not met","lastModifiedDate":"2023-04-09"},{"lineNumber":91,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":92,"author":{"gitId":"HappyM0ment"},"content":"    public static String[] identifyFunctionsValidateInput(String stringInput) throws DukeException","lastModifiedDate":"2023-04-04"},{"lineNumber":93,"author":{"gitId":"HappyM0ment"},"content":"    {","lastModifiedDate":"2023-04-04"},{"lineNumber":94,"author":{"gitId":"HappyM0ment"},"content":"        String[] separatedInput \u003d stringInput.split(\" \", 2);","lastModifiedDate":"2023-04-04"},{"lineNumber":95,"author":{"gitId":"HappyM0ment"},"content":"        if(separatedInput[0].trim().equalsIgnoreCase(\"Deadline\"))","lastModifiedDate":"2023-04-08"},{"lineNumber":96,"author":{"gitId":"HappyM0ment"},"content":"        {","lastModifiedDate":"2023-04-04"},{"lineNumber":97,"author":{"gitId":"HappyM0ment"},"content":"            if (separatedInput.length \u003c 2)","lastModifiedDate":"2023-04-04"},{"lineNumber":98,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-04-04"},{"lineNumber":99,"author":{"gitId":"HappyM0ment"},"content":"                throw new DukeException(\"☹ OOPS!!! The description of a \" + separatedInput[0].trim() + \" cannot be empty.\");","lastModifiedDate":"2023-04-08"},{"lineNumber":100,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-04"},{"lineNumber":101,"author":{"gitId":"HappyM0ment"},"content":"            else if (!separatedInput[1].contains(\"/by\"))","lastModifiedDate":"2023-04-04"},{"lineNumber":102,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-04-04"},{"lineNumber":103,"author":{"gitId":"HappyM0ment"},"content":"                throw new DukeException(\"☹ OOPS!!! \" + separatedInput[0].trim() + \" is missing a \\\"/by\\\" for deadline\");","lastModifiedDate":"2023-04-08"},{"lineNumber":104,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-04"},{"lineNumber":105,"author":{"gitId":"HappyM0ment"},"content":"            else if(separatedInput[1].split(\"/by\").length \u003c 2)","lastModifiedDate":"2023-04-04"},{"lineNumber":106,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-04-04"},{"lineNumber":107,"author":{"gitId":"HappyM0ment"},"content":"                throw new DukeException(\"☹ OOPS!!! \" + separatedInput[0].trim() + \" is missing a deadline\");","lastModifiedDate":"2023-04-08"},{"lineNumber":108,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-04"},{"lineNumber":109,"author":{"gitId":"HappyM0ment"},"content":"            else","lastModifiedDate":"2023-04-04"},{"lineNumber":110,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-04-04"},{"lineNumber":111,"author":{"gitId":"HappyM0ment"},"content":"                return separatedInput;","lastModifiedDate":"2023-04-04"},{"lineNumber":112,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-04"},{"lineNumber":113,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-04"},{"lineNumber":114,"author":{"gitId":"HappyM0ment"},"content":"        else if(separatedInput[0].trim().equalsIgnoreCase(\"Event\"))","lastModifiedDate":"2023-04-08"},{"lineNumber":115,"author":{"gitId":"HappyM0ment"},"content":"        {","lastModifiedDate":"2023-04-04"},{"lineNumber":116,"author":{"gitId":"HappyM0ment"},"content":"            if (separatedInput.length \u003c 2)","lastModifiedDate":"2023-04-04"},{"lineNumber":117,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-04-04"},{"lineNumber":118,"author":{"gitId":"HappyM0ment"},"content":"                throw new DukeException(\"☹ OOPS!!! The description of a \" + separatedInput[0].trim() + \" cannot be empty.\");","lastModifiedDate":"2023-04-08"},{"lineNumber":119,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-04"},{"lineNumber":120,"author":{"gitId":"HappyM0ment"},"content":"            else if (!separatedInput[1].contains(\"/from\"))","lastModifiedDate":"2023-04-04"},{"lineNumber":121,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-04-04"},{"lineNumber":122,"author":{"gitId":"HappyM0ment"},"content":"                throw new DukeException(\"☹ OOPS!!! \" + separatedInput[0].trim() + \" is missing a \\\"/from\\\" for Event\");","lastModifiedDate":"2023-04-08"},{"lineNumber":123,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-04"},{"lineNumber":124,"author":{"gitId":"HappyM0ment"},"content":"            else if (!separatedInput[1].contains(\"/to\"))","lastModifiedDate":"2023-04-04"},{"lineNumber":125,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-04-04"},{"lineNumber":126,"author":{"gitId":"HappyM0ment"},"content":"                throw new DukeException(\"☹ OOPS!!! \" + separatedInput[0].trim() + \" is missing a \\\"/to\\\" for Event\");","lastModifiedDate":"2023-04-08"},{"lineNumber":127,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-04"},{"lineNumber":128,"author":{"gitId":"HappyM0ment"},"content":"            else","lastModifiedDate":"2023-04-04"},{"lineNumber":129,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-04-04"},{"lineNumber":130,"author":{"gitId":"HappyM0ment"},"content":"                //separate \"/from\" \u0026 \"/to\" to check for variable before returning separatedInput","lastModifiedDate":"2023-04-04"},{"lineNumber":131,"author":{"gitId":"HappyM0ment"},"content":"                return separatedInput;","lastModifiedDate":"2023-04-04"},{"lineNumber":132,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-04"},{"lineNumber":133,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-04"},{"lineNumber":134,"author":{"gitId":"HappyM0ment"},"content":"        else if(separatedInput[0].trim().equalsIgnoreCase(\"Todo\"))","lastModifiedDate":"2023-04-08"},{"lineNumber":135,"author":{"gitId":"HappyM0ment"},"content":"        {","lastModifiedDate":"2023-04-04"},{"lineNumber":136,"author":{"gitId":"HappyM0ment"},"content":"            if (separatedInput.length \u003c 2)","lastModifiedDate":"2023-04-04"},{"lineNumber":137,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-04-04"},{"lineNumber":138,"author":{"gitId":"HappyM0ment"},"content":"                throw new DukeException(\"☹ OOPS!!! The description of a \" + separatedInput[0].trim() + \" cannot be empty.\");","lastModifiedDate":"2023-04-08"},{"lineNumber":139,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-04"},{"lineNumber":140,"author":{"gitId":"HappyM0ment"},"content":"            else","lastModifiedDate":"2023-04-04"},{"lineNumber":141,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-04-04"},{"lineNumber":142,"author":{"gitId":"HappyM0ment"},"content":"                return separatedInput;","lastModifiedDate":"2023-04-04"},{"lineNumber":143,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-04"},{"lineNumber":144,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-04"},{"lineNumber":145,"author":{"gitId":"HappyM0ment"},"content":"        else if (separatedInput[0].trim().equalsIgnoreCase(\"Mark\") || separatedInput[0].trim().equalsIgnoreCase(\"Unmark\") || separatedInput[0].trim().equalsIgnoreCase(\"Delete\"))","lastModifiedDate":"2023-04-08"},{"lineNumber":146,"author":{"gitId":"HappyM0ment"},"content":"        {","lastModifiedDate":"2023-04-04"},{"lineNumber":147,"author":{"gitId":"HappyM0ment"},"content":"            if (separatedInput.length \u003c 2)","lastModifiedDate":"2023-04-04"},{"lineNumber":148,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-04-04"},{"lineNumber":149,"author":{"gitId":"HappyM0ment"},"content":"                throw new DukeException(\"☹ OOPS!!! The value after \" + separatedInput[0].trim() + \" cannot be empty.\");","lastModifiedDate":"2023-04-08"},{"lineNumber":150,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-04"},{"lineNumber":151,"author":{"gitId":"HappyM0ment"},"content":"            else","lastModifiedDate":"2023-04-08"},{"lineNumber":152,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-04-04"},{"lineNumber":153,"author":{"gitId":"HappyM0ment"},"content":"                String[] separateMultipleIndex \u003d separatedInput[1].split(\",\");","lastModifiedDate":"2023-04-08"},{"lineNumber":154,"author":{"gitId":"HappyM0ment"},"content":"                for(int i \u003d 0; i \u003c separateMultipleIndex.length; i++)","lastModifiedDate":"2023-04-08"},{"lineNumber":155,"author":{"gitId":"HappyM0ment"},"content":"                {","lastModifiedDate":"2023-04-08"},{"lineNumber":156,"author":{"gitId":"HappyM0ment"},"content":"                    if(!isNumber(separateMultipleIndex[i].trim()))","lastModifiedDate":"2023-04-08"},{"lineNumber":157,"author":{"gitId":"HappyM0ment"},"content":"                    {","lastModifiedDate":"2023-04-07"},{"lineNumber":158,"author":{"gitId":"HappyM0ment"},"content":"                        throw new DukeException(\"☹ OOPS!!! The value \u0027\" + separateMultipleIndex[i].trim() + \"\u0027 must be a number.\");","lastModifiedDate":"2023-04-11"},{"lineNumber":159,"author":{"gitId":"HappyM0ment"},"content":"                    }","lastModifiedDate":"2023-04-07"},{"lineNumber":160,"author":{"gitId":"HappyM0ment"},"content":"                    else if (Integer.parseInt(separateMultipleIndex[i].trim()) \u003c\u003d 0)","lastModifiedDate":"2023-04-08"},{"lineNumber":161,"author":{"gitId":"HappyM0ment"},"content":"                    {","lastModifiedDate":"2023-04-04"},{"lineNumber":162,"author":{"gitId":"HappyM0ment"},"content":"                        throw new DukeException(\"☹ OOPS!!! The value \" + separateMultipleIndex[i].trim() + \" cannot be smaller than 0.\");","lastModifiedDate":"2023-04-08"},{"lineNumber":163,"author":{"gitId":"HappyM0ment"},"content":"                    }","lastModifiedDate":"2023-04-08"},{"lineNumber":164,"author":{"gitId":"HappyM0ment"},"content":"                }","lastModifiedDate":"2023-04-08"},{"lineNumber":165,"author":{"gitId":"HappyM0ment"},"content":"                return separatedInput;","lastModifiedDate":"2023-04-04"},{"lineNumber":166,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-04"},{"lineNumber":167,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-04"},{"lineNumber":168,"author":{"gitId":"HappyM0ment"},"content":"        else if(separatedInput[0].trim().equalsIgnoreCase(\"Find\"))","lastModifiedDate":"2023-04-08"},{"lineNumber":169,"author":{"gitId":"HappyM0ment"},"content":"        {","lastModifiedDate":"2023-04-08"},{"lineNumber":170,"author":{"gitId":"HappyM0ment"},"content":"            if (separatedInput.length \u003c 2)","lastModifiedDate":"2023-04-08"},{"lineNumber":171,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-04-08"},{"lineNumber":172,"author":{"gitId":"HappyM0ment"},"content":"                throw new DukeException(\"☹ OOPS!!! Find command is unable to find an empty input.\");","lastModifiedDate":"2023-04-08"},{"lineNumber":173,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-08"},{"lineNumber":174,"author":{"gitId":"HappyM0ment"},"content":"            else","lastModifiedDate":"2023-04-08"},{"lineNumber":175,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-04-08"},{"lineNumber":176,"author":{"gitId":"HappyM0ment"},"content":"                return separatedInput;","lastModifiedDate":"2023-04-08"},{"lineNumber":177,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-08"},{"lineNumber":178,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-08"},{"lineNumber":179,"author":{"gitId":"HappyM0ment"},"content":"        else","lastModifiedDate":"2023-04-04"},{"lineNumber":180,"author":{"gitId":"HappyM0ment"},"content":"        {","lastModifiedDate":"2023-04-04"},{"lineNumber":181,"author":{"gitId":"HappyM0ment"},"content":"            //any other starting words besides the functions list, throws error","lastModifiedDate":"2023-04-04"},{"lineNumber":182,"author":{"gitId":"HappyM0ment"},"content":"            throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-04-04"},{"lineNumber":183,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-04"},{"lineNumber":184,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":185,"author":{"gitId":"HappyM0ment"},"content":"}","lastModifiedDate":"2023-04-04"}],"authorContributionMap":{"HappyM0ment":185}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HappyM0ment"},"content":"/**","lastModifiedDate":"2023-04-04"},{"lineNumber":2,"author":{"gitId":"HappyM0ment"},"content":" *  DONE BY: A0227169X; ANG JIA JIN, GABRIEL","lastModifiedDate":"2023-04-04"},{"lineNumber":3,"author":{"gitId":"HappyM0ment"},"content":" */","lastModifiedDate":"2023-04-04"},{"lineNumber":4,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":5,"author":{"gitId":"HappyM0ment"},"content":"package duke.storage;","lastModifiedDate":"2023-04-04"},{"lineNumber":6,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":7,"author":{"gitId":"HappyM0ment"},"content":"import duke.*;","lastModifiedDate":"2023-04-07"},{"lineNumber":8,"author":{"gitId":"HappyM0ment"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-04-07"},{"lineNumber":9,"author":{"gitId":"HappyM0ment"},"content":"import duke.DateValidator;","lastModifiedDate":"2023-04-09"},{"lineNumber":10,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":11,"author":{"gitId":"HappyM0ment"},"content":"import java.io.File;","lastModifiedDate":"2023-04-04"},{"lineNumber":12,"author":{"gitId":"HappyM0ment"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-04-07"},{"lineNumber":13,"author":{"gitId":"HappyM0ment"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-04-04"},{"lineNumber":14,"author":{"gitId":"HappyM0ment"},"content":"import java.io.IOException;","lastModifiedDate":"2023-04-07"},{"lineNumber":15,"author":{"gitId":"HappyM0ment"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-04-11"},{"lineNumber":16,"author":{"gitId":"HappyM0ment"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-04-11"},{"lineNumber":17,"author":{"gitId":"HappyM0ment"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-04-11"},{"lineNumber":18,"author":{"gitId":"HappyM0ment"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-04-04"},{"lineNumber":19,"author":{"gitId":"HappyM0ment"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-04-07"},{"lineNumber":20,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":21,"author":{"gitId":"HappyM0ment"},"content":"public class Storage {","lastModifiedDate":"2023-04-04"},{"lineNumber":22,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":23,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":24,"author":{"gitId":"HappyM0ment"},"content":"     *  Attribute","lastModifiedDate":"2023-04-04"},{"lineNumber":25,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":26,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-11"},{"lineNumber":27,"author":{"gitId":"HappyM0ment"},"content":"    private static String filePath \u003d System.getProperty(\"user.home\") + File.separator + \"Desktop\" + File.separator + \"data\"; //Idea referenced from https://www.delftstack.com/howto/java/java-user-home-directory/","lastModifiedDate":"2023-04-12"},{"lineNumber":28,"author":{"gitId":"HappyM0ment"},"content":"    private static String fileName \u003d \"duke.txt\";","lastModifiedDate":"2023-04-11"},{"lineNumber":29,"author":{"gitId":"HappyM0ment"},"content":"    private static Path existingPath;","lastModifiedDate":"2023-04-11"},{"lineNumber":30,"author":{"gitId":"HappyM0ment"},"content":"    private static Path existingFile;","lastModifiedDate":"2023-04-11"},{"lineNumber":31,"author":{"gitId":"HappyM0ment"},"content":"    private static File fileDir;","lastModifiedDate":"2023-04-11"},{"lineNumber":32,"author":{"gitId":"HappyM0ment"},"content":"    private static File fileItem;","lastModifiedDate":"2023-04-04"},{"lineNumber":33,"author":{"gitId":"HappyM0ment"},"content":"    private static ArrayList\u003cTask\u003e listOfTask;","lastModifiedDate":"2023-04-07"},{"lineNumber":34,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":35,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":36,"author":{"gitId":"HappyM0ment"},"content":"     *  Constructor","lastModifiedDate":"2023-04-04"},{"lineNumber":37,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":38,"author":{"gitId":"HappyM0ment"},"content":"    public Storage() {","lastModifiedDate":"2023-04-11"},{"lineNumber":39,"author":{"gitId":"HappyM0ment"},"content":"        existingPath \u003d Paths.get(filePath);","lastModifiedDate":"2023-04-11"},{"lineNumber":40,"author":{"gitId":"HappyM0ment"},"content":"        existingFile \u003d Paths.get(filePath + File.separator + fileName);","lastModifiedDate":"2023-04-11"},{"lineNumber":41,"author":{"gitId":"HappyM0ment"},"content":"        fileDir \u003d new File(filePath);","lastModifiedDate":"2023-04-11"},{"lineNumber":42,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":43,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":44,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-09"},{"lineNumber":45,"author":{"gitId":"HappyM0ment"},"content":"     * load() method will load the date from duke.txt into a TaskList storing ArrayList of Task objects","lastModifiedDate":"2023-04-09"},{"lineNumber":46,"author":{"gitId":"HappyM0ment"},"content":"     * @return ArrayList of Task objects to store into the Tasklist object in Duke class.","lastModifiedDate":"2023-04-09"},{"lineNumber":47,"author":{"gitId":"HappyM0ment"},"content":"     * @throws DukeException if any problems occur when loading the file into the tasklist, such as file directory doesn\u0027t exist and will create the file path","lastModifiedDate":"2023-04-11"},{"lineNumber":48,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-09"},{"lineNumber":49,"author":{"gitId":"HappyM0ment"},"content":"    public static ArrayList\u003cTask\u003e load() throws DukeException {","lastModifiedDate":"2023-04-04"},{"lineNumber":50,"author":{"gitId":"HappyM0ment"},"content":"        if (!fileDir.exists()) {","lastModifiedDate":"2023-04-11"},{"lineNumber":51,"author":{"gitId":"HappyM0ment"},"content":"            fileDir.mkdirs();","lastModifiedDate":"2023-04-11"},{"lineNumber":52,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-11"},{"lineNumber":53,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-11"},{"lineNumber":54,"author":{"gitId":"HappyM0ment"},"content":"        fileItem \u003d new File(filePath, fileName);","lastModifiedDate":"2023-04-11"},{"lineNumber":55,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-11"},{"lineNumber":56,"author":{"gitId":"HappyM0ment"},"content":"        if(!Files.exists(existingFile))","lastModifiedDate":"2023-04-11"},{"lineNumber":57,"author":{"gitId":"HappyM0ment"},"content":"        {","lastModifiedDate":"2023-04-11"},{"lineNumber":58,"author":{"gitId":"HappyM0ment"},"content":"            try {","lastModifiedDate":"2023-04-11"},{"lineNumber":59,"author":{"gitId":"HappyM0ment"},"content":"                fileItem.createNewFile();","lastModifiedDate":"2023-04-11"},{"lineNumber":60,"author":{"gitId":"HappyM0ment"},"content":"                throw new DukeException(\"☹ OOPS!!! File doesn\u0027t exists; created the file: \" + fileItem.getAbsolutePath());","lastModifiedDate":"2023-04-11"},{"lineNumber":61,"author":{"gitId":"HappyM0ment"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-04-11"},{"lineNumber":62,"author":{"gitId":"HappyM0ment"},"content":"                throw new RuntimeException(e);","lastModifiedDate":"2023-04-11"},{"lineNumber":63,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-11"},{"lineNumber":64,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-04"},{"lineNumber":65,"author":{"gitId":"HappyM0ment"},"content":"        else {","lastModifiedDate":"2023-04-04"},{"lineNumber":66,"author":{"gitId":"HappyM0ment"},"content":"            listOfTask \u003d new ArrayList\u003c\u003e(); //string initialize Task arraylist","lastModifiedDate":"2023-04-11"},{"lineNumber":67,"author":{"gitId":"HappyM0ment"},"content":"            try {","lastModifiedDate":"2023-04-07"},{"lineNumber":68,"author":{"gitId":"HappyM0ment"},"content":"                Scanner scan \u003d new Scanner(fileItem);","lastModifiedDate":"2023-04-07"},{"lineNumber":69,"author":{"gitId":"HappyM0ment"},"content":"                while (scan.hasNext()) {","lastModifiedDate":"2023-04-07"},{"lineNumber":70,"author":{"gitId":"HappyM0ment"},"content":"                    String itemEntry \u003d scan.nextLine();","lastModifiedDate":"2023-04-07"},{"lineNumber":71,"author":{"gitId":"HappyM0ment"},"content":"                    Task newTask;","lastModifiedDate":"2023-04-07"},{"lineNumber":72,"author":{"gitId":"HappyM0ment"},"content":"                    String [] splitEntryValue \u003d itemEntry.split(\";\");","lastModifiedDate":"2023-04-09"},{"lineNumber":73,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":74,"author":{"gitId":"HappyM0ment"},"content":"                    if(splitEntryValue[0].trim().equalsIgnoreCase(\"T\")) {","lastModifiedDate":"2023-04-07"},{"lineNumber":75,"author":{"gitId":"HappyM0ment"},"content":"                        /**","lastModifiedDate":"2023-04-07"},{"lineNumber":76,"author":{"gitId":"HappyM0ment"},"content":"                         * @param splitEntryValue[0] \u003d T","lastModifiedDate":"2023-04-07"},{"lineNumber":77,"author":{"gitId":"HappyM0ment"},"content":"                         * @param splitEntryValue[1] \u003d 1 - done, 0 - not done","lastModifiedDate":"2023-04-07"},{"lineNumber":78,"author":{"gitId":"HappyM0ment"},"content":"                         * @param splitEntryValue[2] \u003d Description","lastModifiedDate":"2023-04-07"},{"lineNumber":79,"author":{"gitId":"HappyM0ment"},"content":"                         */","lastModifiedDate":"2023-04-07"},{"lineNumber":80,"author":{"gitId":"HappyM0ment"},"content":"                        newTask \u003d new Todo(splitEntryValue[2].trim());","lastModifiedDate":"2023-04-07"},{"lineNumber":81,"author":{"gitId":"HappyM0ment"},"content":"                    }","lastModifiedDate":"2023-04-07"},{"lineNumber":82,"author":{"gitId":"HappyM0ment"},"content":"                    else if(splitEntryValue[0].trim().equalsIgnoreCase(\"D\")) {","lastModifiedDate":"2023-04-07"},{"lineNumber":83,"author":{"gitId":"HappyM0ment"},"content":"                        /**","lastModifiedDate":"2023-04-07"},{"lineNumber":84,"author":{"gitId":"HappyM0ment"},"content":"                         * @param splitEntryValue[0] \u003d D","lastModifiedDate":"2023-04-07"},{"lineNumber":85,"author":{"gitId":"HappyM0ment"},"content":"                         * @param splitEntryValue[1] \u003d 1 - done, 0 - not done","lastModifiedDate":"2023-04-07"},{"lineNumber":86,"author":{"gitId":"HappyM0ment"},"content":"                         * @param splitEntryValue[2] \u003d Description","lastModifiedDate":"2023-04-07"},{"lineNumber":87,"author":{"gitId":"HappyM0ment"},"content":"                         * @param splitEntryValue[3] \u003d \u0027By\u0027 attribute","lastModifiedDate":"2023-04-07"},{"lineNumber":88,"author":{"gitId":"HappyM0ment"},"content":"                         */","lastModifiedDate":"2023-04-07"},{"lineNumber":89,"author":{"gitId":"HappyM0ment"},"content":"                        newTask \u003d new Deadline(splitEntryValue[2].trim(), DateValidator.convertStringToDate(splitEntryValue[3].trim()));","lastModifiedDate":"2023-04-09"},{"lineNumber":90,"author":{"gitId":"HappyM0ment"},"content":"                    }","lastModifiedDate":"2023-04-07"},{"lineNumber":91,"author":{"gitId":"HappyM0ment"},"content":"                    else  {","lastModifiedDate":"2023-04-07"},{"lineNumber":92,"author":{"gitId":"HappyM0ment"},"content":"                        /**","lastModifiedDate":"2023-04-07"},{"lineNumber":93,"author":{"gitId":"HappyM0ment"},"content":"                         * @param splitEntryValue[0] \u003d E","lastModifiedDate":"2023-04-07"},{"lineNumber":94,"author":{"gitId":"HappyM0ment"},"content":"                         * @param splitEntryValue[1] \u003d 1 - done, 0 - not done","lastModifiedDate":"2023-04-07"},{"lineNumber":95,"author":{"gitId":"HappyM0ment"},"content":"                         * @param splitEntryValue[2] \u003d Description","lastModifiedDate":"2023-04-07"},{"lineNumber":96,"author":{"gitId":"HappyM0ment"},"content":"                         * @param splitEntryValue[3] \u003d Start","lastModifiedDate":"2023-04-07"},{"lineNumber":97,"author":{"gitId":"HappyM0ment"},"content":"                         * @param splitEntryValue[4] \u003d End","lastModifiedDate":"2023-04-07"},{"lineNumber":98,"author":{"gitId":"HappyM0ment"},"content":"                         */","lastModifiedDate":"2023-04-07"},{"lineNumber":99,"author":{"gitId":"HappyM0ment"},"content":"                        newTask \u003d new Event(splitEntryValue[2].trim(), DateValidator.convertStringToDate(splitEntryValue[3].trim()), DateValidator.convertStringToDate(splitEntryValue[4].trim()));","lastModifiedDate":"2023-04-11"},{"lineNumber":100,"author":{"gitId":"HappyM0ment"},"content":"                    }","lastModifiedDate":"2023-04-07"},{"lineNumber":101,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":102,"author":{"gitId":"HappyM0ment"},"content":"                    //mark as done if value is 1","lastModifiedDate":"2023-04-08"},{"lineNumber":103,"author":{"gitId":"HappyM0ment"},"content":"                    if(splitEntryValue[1].trim().equalsIgnoreCase(\"1\"))","lastModifiedDate":"2023-04-08"},{"lineNumber":104,"author":{"gitId":"HappyM0ment"},"content":"                    {","lastModifiedDate":"2023-04-08"},{"lineNumber":105,"author":{"gitId":"HappyM0ment"},"content":"                        newTask.markAsDone();","lastModifiedDate":"2023-04-08"},{"lineNumber":106,"author":{"gitId":"HappyM0ment"},"content":"                    }","lastModifiedDate":"2023-04-08"},{"lineNumber":107,"author":{"gitId":"HappyM0ment"},"content":"                    listOfTask.add(newTask);","lastModifiedDate":"2023-04-07"},{"lineNumber":108,"author":{"gitId":"HappyM0ment"},"content":"                }","lastModifiedDate":"2023-04-07"},{"lineNumber":109,"author":{"gitId":"HappyM0ment"},"content":"            } catch (FileNotFoundException e) {","lastModifiedDate":"2023-04-07"},{"lineNumber":110,"author":{"gitId":"HappyM0ment"},"content":"                throw new DukeException(\"☹ OOPS!!! Error caught: \" + e.getMessage());","lastModifiedDate":"2023-04-07"},{"lineNumber":111,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-07"},{"lineNumber":112,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":113,"author":{"gitId":"HappyM0ment"},"content":"            return listOfTask;","lastModifiedDate":"2023-04-07"},{"lineNumber":114,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-07"},{"lineNumber":115,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":116,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":117,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-09"},{"lineNumber":118,"author":{"gitId":"HappyM0ment"},"content":"     * save() method will save the data from Tasklist object containing Arraylist of Task objects into duke.txt","lastModifiedDate":"2023-04-09"},{"lineNumber":119,"author":{"gitId":"HappyM0ment"},"content":"     * @param listOfTask TaskList object","lastModifiedDate":"2023-04-10"},{"lineNumber":120,"author":{"gitId":"HappyM0ment"},"content":"     * @throws DukeException if any problems occur when saving the list into the duke.txt file","lastModifiedDate":"2023-04-09"},{"lineNumber":121,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-09"},{"lineNumber":122,"author":{"gitId":"HappyM0ment"},"content":"    public static void saveFile(TaskList listOfTask) throws DukeException {","lastModifiedDate":"2023-04-07"},{"lineNumber":123,"author":{"gitId":"HappyM0ment"},"content":"        try {","lastModifiedDate":"2023-04-07"},{"lineNumber":124,"author":{"gitId":"HappyM0ment"},"content":"            FileWriter newFW \u003d new FileWriter(filePath + File.separator + fileName);","lastModifiedDate":"2023-04-11"},{"lineNumber":125,"author":{"gitId":"HappyM0ment"},"content":"            for(int i \u003d 0; i \u003c listOfTask.getSizeOfList(); i++)","lastModifiedDate":"2023-04-07"},{"lineNumber":126,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-04-07"},{"lineNumber":127,"author":{"gitId":"HappyM0ment"},"content":"                Task itemToAdd \u003d listOfTask.getElementFromList(i);","lastModifiedDate":"2023-04-07"},{"lineNumber":128,"author":{"gitId":"HappyM0ment"},"content":"                String finalLine \u003d new String();","lastModifiedDate":"2023-04-07"},{"lineNumber":129,"author":{"gitId":"HappyM0ment"},"content":"                if(itemToAdd instanceof Todo) {","lastModifiedDate":"2023-04-07"},{"lineNumber":130,"author":{"gitId":"HappyM0ment"},"content":"                    finalLine +\u003d \"T ; \";","lastModifiedDate":"2023-04-09"},{"lineNumber":131,"author":{"gitId":"HappyM0ment"},"content":"                    if(itemToAdd.getTaskStatus().equalsIgnoreCase(\"X\")) {","lastModifiedDate":"2023-04-07"},{"lineNumber":132,"author":{"gitId":"HappyM0ment"},"content":"                        finalLine +\u003d \"1\";","lastModifiedDate":"2023-04-07"},{"lineNumber":133,"author":{"gitId":"HappyM0ment"},"content":"                    }","lastModifiedDate":"2023-04-07"},{"lineNumber":134,"author":{"gitId":"HappyM0ment"},"content":"                    else {","lastModifiedDate":"2023-04-07"},{"lineNumber":135,"author":{"gitId":"HappyM0ment"},"content":"                        finalLine +\u003d \"0\";","lastModifiedDate":"2023-04-07"},{"lineNumber":136,"author":{"gitId":"HappyM0ment"},"content":"                    }","lastModifiedDate":"2023-04-07"},{"lineNumber":137,"author":{"gitId":"HappyM0ment"},"content":"                    finalLine +\u003d \" ; \" + itemToAdd.getDescription();","lastModifiedDate":"2023-04-09"},{"lineNumber":138,"author":{"gitId":"HappyM0ment"},"content":"                }","lastModifiedDate":"2023-04-07"},{"lineNumber":139,"author":{"gitId":"HappyM0ment"},"content":"                else if(itemToAdd instanceof Deadline) {","lastModifiedDate":"2023-04-07"},{"lineNumber":140,"author":{"gitId":"HappyM0ment"},"content":"                    finalLine +\u003d \"D ; \";","lastModifiedDate":"2023-04-09"},{"lineNumber":141,"author":{"gitId":"HappyM0ment"},"content":"                    if(itemToAdd.getTaskStatus().equalsIgnoreCase(\"X\")) {","lastModifiedDate":"2023-04-07"},{"lineNumber":142,"author":{"gitId":"HappyM0ment"},"content":"                        finalLine +\u003d \"1\";","lastModifiedDate":"2023-04-07"},{"lineNumber":143,"author":{"gitId":"HappyM0ment"},"content":"                    }","lastModifiedDate":"2023-04-07"},{"lineNumber":144,"author":{"gitId":"HappyM0ment"},"content":"                    else {","lastModifiedDate":"2023-04-07"},{"lineNumber":145,"author":{"gitId":"HappyM0ment"},"content":"                        finalLine +\u003d \"0\";","lastModifiedDate":"2023-04-07"},{"lineNumber":146,"author":{"gitId":"HappyM0ment"},"content":"                    }","lastModifiedDate":"2023-04-07"},{"lineNumber":147,"author":{"gitId":"HappyM0ment"},"content":"                    finalLine +\u003d \" ; \" + itemToAdd.getDescription() + \" ; \" + DateValidator.convertDateToString(((Deadline) itemToAdd).getBy());","lastModifiedDate":"2023-04-09"},{"lineNumber":148,"author":{"gitId":"HappyM0ment"},"content":"                }","lastModifiedDate":"2023-04-07"},{"lineNumber":149,"author":{"gitId":"HappyM0ment"},"content":"                else {","lastModifiedDate":"2023-04-07"},{"lineNumber":150,"author":{"gitId":"HappyM0ment"},"content":"                    finalLine +\u003d \"E ; \";","lastModifiedDate":"2023-04-09"},{"lineNumber":151,"author":{"gitId":"HappyM0ment"},"content":"                    if(itemToAdd.getTaskStatus().equalsIgnoreCase(\"X\")) {","lastModifiedDate":"2023-04-07"},{"lineNumber":152,"author":{"gitId":"HappyM0ment"},"content":"                        finalLine +\u003d \"1\";","lastModifiedDate":"2023-04-07"},{"lineNumber":153,"author":{"gitId":"HappyM0ment"},"content":"                    }","lastModifiedDate":"2023-04-07"},{"lineNumber":154,"author":{"gitId":"HappyM0ment"},"content":"                    else {","lastModifiedDate":"2023-04-07"},{"lineNumber":155,"author":{"gitId":"HappyM0ment"},"content":"                        finalLine +\u003d \"0\";","lastModifiedDate":"2023-04-07"},{"lineNumber":156,"author":{"gitId":"HappyM0ment"},"content":"                    }","lastModifiedDate":"2023-04-07"},{"lineNumber":157,"author":{"gitId":"HappyM0ment"},"content":"                    finalLine +\u003d \" ; \" + itemToAdd.getDescription() + \" ; \" + DateValidator.convertDateToString(((Event) itemToAdd).getStart())+ \" ; \" + DateValidator.convertDateToString(((Event) itemToAdd).getEnd());","lastModifiedDate":"2023-04-11"},{"lineNumber":158,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":159,"author":{"gitId":"HappyM0ment"},"content":"                }","lastModifiedDate":"2023-04-07"},{"lineNumber":160,"author":{"gitId":"HappyM0ment"},"content":"                newFW.write(finalLine);","lastModifiedDate":"2023-04-07"},{"lineNumber":161,"author":{"gitId":"HappyM0ment"},"content":"                newFW.write(System.getProperty( \"line.separator\" ));","lastModifiedDate":"2023-04-07"},{"lineNumber":162,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-07"},{"lineNumber":163,"author":{"gitId":"HappyM0ment"},"content":"            newFW.close();","lastModifiedDate":"2023-04-07"},{"lineNumber":164,"author":{"gitId":"HappyM0ment"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-04-07"},{"lineNumber":165,"author":{"gitId":"HappyM0ment"},"content":"            throw new DukeException(\"☹ OOPS!!! Error caught: \" + e.getMessage());","lastModifiedDate":"2023-04-07"},{"lineNumber":166,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-07"},{"lineNumber":167,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":168,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":169,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":170,"author":{"gitId":"HappyM0ment"},"content":"}","lastModifiedDate":"2023-04-04"}],"authorContributionMap":{"HappyM0ment":170}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HappyM0ment"},"content":"/**","lastModifiedDate":"2023-04-04"},{"lineNumber":2,"author":{"gitId":"HappyM0ment"},"content":" *  DONE BY: A0227169X; ANG JIA JIN, GABRIEL","lastModifiedDate":"2023-04-04"},{"lineNumber":3,"author":{"gitId":"HappyM0ment"},"content":" */","lastModifiedDate":"2023-04-04"},{"lineNumber":4,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":5,"author":{"gitId":"HappyM0ment"},"content":"package duke.task;","lastModifiedDate":"2023-04-04"},{"lineNumber":6,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":7,"author":{"gitId":"HappyM0ment"},"content":"import duke.*;","lastModifiedDate":"2023-04-09"},{"lineNumber":8,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":9,"author":{"gitId":"HappyM0ment"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-04-04"},{"lineNumber":10,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":11,"author":{"gitId":"HappyM0ment"},"content":"public class TaskList {","lastModifiedDate":"2023-04-04"},{"lineNumber":12,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":13,"author":{"gitId":"HappyM0ment"},"content":"     * Attribute","lastModifiedDate":"2023-04-04"},{"lineNumber":14,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":15,"author":{"gitId":"HappyM0ment"},"content":"    private ArrayList\u003cTask\u003e list; //string initialize Task arraylist","lastModifiedDate":"2023-04-07"},{"lineNumber":16,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":17,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":18,"author":{"gitId":"HappyM0ment"},"content":"     * Constructor [with inputs]","lastModifiedDate":"2023-04-04"},{"lineNumber":19,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":20,"author":{"gitId":"HappyM0ment"},"content":"    public TaskList(ArrayList\u003cTask\u003e inputList) {","lastModifiedDate":"2023-04-04"},{"lineNumber":21,"author":{"gitId":"HappyM0ment"},"content":"        this.list \u003d inputList;","lastModifiedDate":"2023-04-04"},{"lineNumber":22,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":23,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":24,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":25,"author":{"gitId":"HappyM0ment"},"content":"     * Constructor 2 [w/o inputs]","lastModifiedDate":"2023-04-04"},{"lineNumber":26,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":27,"author":{"gitId":"HappyM0ment"},"content":"    public TaskList() {","lastModifiedDate":"2023-04-04"},{"lineNumber":28,"author":{"gitId":"HappyM0ment"},"content":"        this.list \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-04-04"},{"lineNumber":29,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":30,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":31,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":32,"author":{"gitId":"HappyM0ment"},"content":"     * printTaskList will iterate the ArrayList and prints out each Task to the user","lastModifiedDate":"2023-04-09"},{"lineNumber":33,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":34,"author":{"gitId":"HappyM0ment"},"content":"    public void printTaskList() {","lastModifiedDate":"2023-04-07"},{"lineNumber":35,"author":{"gitId":"HappyM0ment"},"content":"        System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2023-04-04"},{"lineNumber":36,"author":{"gitId":"HappyM0ment"},"content":"        for(int i \u003d 0; i \u003c this.list.size(); i++) {","lastModifiedDate":"2023-04-08"},{"lineNumber":37,"author":{"gitId":"HappyM0ment"},"content":"            System.out.println(i+1 + \".\" + this.list.get(i).toString());","lastModifiedDate":"2023-04-04"},{"lineNumber":38,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-04"},{"lineNumber":39,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":40,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":41,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-09"},{"lineNumber":42,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":43,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-09"},{"lineNumber":44,"author":{"gitId":"HappyM0ment"},"content":"     * getElementFromList will retrieve the element based on the index given","lastModifiedDate":"2023-04-09"},{"lineNumber":45,"author":{"gitId":"HappyM0ment"},"content":"     * @param eleIndex input index given to search for","lastModifiedDate":"2023-04-09"},{"lineNumber":46,"author":{"gitId":"HappyM0ment"},"content":"     * @return Task object corresponding to the index in the ArrayList","lastModifiedDate":"2023-04-09"},{"lineNumber":47,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":48,"author":{"gitId":"HappyM0ment"},"content":"    public Task getElementFromList(int eleIndex) {","lastModifiedDate":"2023-04-04"},{"lineNumber":49,"author":{"gitId":"HappyM0ment"},"content":"        Task item \u003d this.list.get(eleIndex);","lastModifiedDate":"2023-04-04"},{"lineNumber":50,"author":{"gitId":"HappyM0ment"},"content":"        return item;","lastModifiedDate":"2023-04-04"},{"lineNumber":51,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":52,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":53,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-07"},{"lineNumber":54,"author":{"gitId":"HappyM0ment"},"content":"     * getSizeOfList will return size of currentList","lastModifiedDate":"2023-04-09"},{"lineNumber":55,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-07"},{"lineNumber":56,"author":{"gitId":"HappyM0ment"},"content":"    public int getSizeOfList () {","lastModifiedDate":"2023-04-07"},{"lineNumber":57,"author":{"gitId":"HappyM0ment"},"content":"        return this.list.size();","lastModifiedDate":"2023-04-07"},{"lineNumber":58,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-07"},{"lineNumber":59,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":60,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":61,"author":{"gitId":"HappyM0ment"},"content":"     * addNewTask will add a new Tasking into the current list","lastModifiedDate":"2023-04-09"},{"lineNumber":62,"author":{"gitId":"HappyM0ment"},"content":"     * @param newTask Task object to be added to the list","lastModifiedDate":"2023-04-09"},{"lineNumber":63,"author":{"gitId":"HappyM0ment"},"content":"     * @return Task object that is added","lastModifiedDate":"2023-04-09"},{"lineNumber":64,"author":{"gitId":"HappyM0ment"},"content":"     * @throws DukeException if Task object is a duplicate from within the list","lastModifiedDate":"2023-04-09"},{"lineNumber":65,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":66,"author":{"gitId":"HappyM0ment"},"content":"    public Task addNewTask(Task newTask) throws DukeException{","lastModifiedDate":"2023-04-08"},{"lineNumber":67,"author":{"gitId":"HappyM0ment"},"content":"        if (checkDuplicate(newTask)) {","lastModifiedDate":"2023-04-08"},{"lineNumber":68,"author":{"gitId":"HappyM0ment"},"content":"            throw new DukeException(\"☹ OOPS!!! This already task exists\");","lastModifiedDate":"2023-04-08"},{"lineNumber":69,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-08"},{"lineNumber":70,"author":{"gitId":"HappyM0ment"},"content":"        else {","lastModifiedDate":"2023-04-08"},{"lineNumber":71,"author":{"gitId":"HappyM0ment"},"content":"            this.list.add(newTask);","lastModifiedDate":"2023-04-04"},{"lineNumber":72,"author":{"gitId":"HappyM0ment"},"content":"            assert !list.isEmpty() : \"List must not be empty after adding\";","lastModifiedDate":"2023-04-10"},{"lineNumber":73,"author":{"gitId":"HappyM0ment"},"content":"            System.out.println(\"Got it. I\u0027ve added this task:\\n\" + newTask.toString());","lastModifiedDate":"2023-04-04"},{"lineNumber":74,"author":{"gitId":"HappyM0ment"},"content":"            System.out.println(\"Now you have \" + this.getSizeOfList() + \" task(s) in the list\");","lastModifiedDate":"2023-04-08"},{"lineNumber":75,"author":{"gitId":"HappyM0ment"},"content":"            return newTask;","lastModifiedDate":"2023-04-04"},{"lineNumber":76,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-04"},{"lineNumber":77,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-08"},{"lineNumber":78,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":79,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":80,"author":{"gitId":"HappyM0ment"},"content":"     * deleteTask method will take in an index \u0026 remove an existing Tasking from the current list","lastModifiedDate":"2023-04-09"},{"lineNumber":81,"author":{"gitId":"HappyM0ment"},"content":"     * @param indexToBeDeleted index to be reference for Task object to be removed from the list","lastModifiedDate":"2023-04-09"},{"lineNumber":82,"author":{"gitId":"HappyM0ment"},"content":"     * @return Task object that is deleted","lastModifiedDate":"2023-04-09"},{"lineNumber":83,"author":{"gitId":"HappyM0ment"},"content":"     * @throws DukeException if index provided is larger than the size of the list","lastModifiedDate":"2023-04-09"},{"lineNumber":84,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":85,"author":{"gitId":"HappyM0ment"},"content":"    public Task deleteTask(int indexToBeDeleted) throws DukeException {","lastModifiedDate":"2023-04-07"},{"lineNumber":86,"author":{"gitId":"HappyM0ment"},"content":"        if(indexToBeDeleted \u003e (this.getSizeOfList()-1)) {","lastModifiedDate":"2023-04-08"},{"lineNumber":87,"author":{"gitId":"HappyM0ment"},"content":"            throw new DukeException(\"☹ OOPS!!! The value after delete is over the size of the list.\");","lastModifiedDate":"2023-04-07"},{"lineNumber":88,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-07"},{"lineNumber":89,"author":{"gitId":"HappyM0ment"},"content":"        else {","lastModifiedDate":"2023-04-07"},{"lineNumber":90,"author":{"gitId":"HappyM0ment"},"content":"            Task deletedItem \u003d getElementFromList(indexToBeDeleted);","lastModifiedDate":"2023-04-04"},{"lineNumber":91,"author":{"gitId":"HappyM0ment"},"content":"            Task item \u003d this.list.remove(indexToBeDeleted);","lastModifiedDate":"2023-04-04"},{"lineNumber":92,"author":{"gitId":"HappyM0ment"},"content":"            System.out.println(\"Noted. I\u0027ve removed this task:\\n\" + deletedItem);","lastModifiedDate":"2023-04-04"},{"lineNumber":93,"author":{"gitId":"HappyM0ment"},"content":"            System.out.println(\"Now you have \" + this.getSizeOfList() + \" task(s) in the list\");","lastModifiedDate":"2023-04-08"},{"lineNumber":94,"author":{"gitId":"HappyM0ment"},"content":"            return deletedItem;","lastModifiedDate":"2023-04-04"},{"lineNumber":95,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-04"},{"lineNumber":96,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-07"},{"lineNumber":97,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":98,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-07"},{"lineNumber":99,"author":{"gitId":"HappyM0ment"},"content":"     * markTask method will take in an index \u0026 mark the object as done from the list","lastModifiedDate":"2023-04-09"},{"lineNumber":100,"author":{"gitId":"HappyM0ment"},"content":"     * @param indexToBeMarked index to be reference for Task object to be marked as done from the list","lastModifiedDate":"2023-04-09"},{"lineNumber":101,"author":{"gitId":"HappyM0ment"},"content":"     * @throws DukeException if index provided is larger than the size of the list","lastModifiedDate":"2023-04-09"},{"lineNumber":102,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-07"},{"lineNumber":103,"author":{"gitId":"HappyM0ment"},"content":"    public void markTask(int indexToBeMarked) throws DukeException {","lastModifiedDate":"2023-04-07"},{"lineNumber":104,"author":{"gitId":"HappyM0ment"},"content":"        if(indexToBeMarked \u003e (this.getSizeOfList()-1)) {","lastModifiedDate":"2023-04-08"},{"lineNumber":105,"author":{"gitId":"HappyM0ment"},"content":"            throw new DukeException(\"☹ OOPS!!! The value after mark is over the size of the list.\");","lastModifiedDate":"2023-04-07"},{"lineNumber":106,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-07"},{"lineNumber":107,"author":{"gitId":"HappyM0ment"},"content":"        else {","lastModifiedDate":"2023-04-07"},{"lineNumber":108,"author":{"gitId":"HappyM0ment"},"content":"            this.list.get(indexToBeMarked).markAsDone();","lastModifiedDate":"2023-04-07"},{"lineNumber":109,"author":{"gitId":"HappyM0ment"},"content":"            assert list.get(indexToBeMarked).getTaskStatus().equalsIgnoreCase(\"X\") : \"Task will be marked as done\";","lastModifiedDate":"2023-04-10"},{"lineNumber":110,"author":{"gitId":"HappyM0ment"},"content":"            System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-04-07"},{"lineNumber":111,"author":{"gitId":"HappyM0ment"},"content":"            System.out.println(this.list.get(indexToBeMarked).toString());","lastModifiedDate":"2023-04-07"},{"lineNumber":112,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-07"},{"lineNumber":113,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-07"},{"lineNumber":114,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":115,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-07"},{"lineNumber":116,"author":{"gitId":"HappyM0ment"},"content":"     * markTask method will take in an index \u0026 unmark the object as done from the list","lastModifiedDate":"2023-04-09"},{"lineNumber":117,"author":{"gitId":"HappyM0ment"},"content":"     * @param indexToBeUnmarked index to be reference for Task object to be set as not done from the list","lastModifiedDate":"2023-04-09"},{"lineNumber":118,"author":{"gitId":"HappyM0ment"},"content":"     * @throws DukeException if index provided is larger than the size of the list","lastModifiedDate":"2023-04-09"},{"lineNumber":119,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-07"},{"lineNumber":120,"author":{"gitId":"HappyM0ment"},"content":"    public void unmarkTask(int indexToBeUnmarked) throws DukeException {","lastModifiedDate":"2023-04-07"},{"lineNumber":121,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":122,"author":{"gitId":"HappyM0ment"},"content":"        if(indexToBeUnmarked \u003e (this.getSizeOfList()-1)) {","lastModifiedDate":"2023-04-08"},{"lineNumber":123,"author":{"gitId":"HappyM0ment"},"content":"            throw new DukeException(\"☹ OOPS!!! The value after unmark is over the size of the list.\");","lastModifiedDate":"2023-04-07"},{"lineNumber":124,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-07"},{"lineNumber":125,"author":{"gitId":"HappyM0ment"},"content":"        else {","lastModifiedDate":"2023-04-07"},{"lineNumber":126,"author":{"gitId":"HappyM0ment"},"content":"            this.list.get(indexToBeUnmarked).markAsUndone();","lastModifiedDate":"2023-04-07"},{"lineNumber":127,"author":{"gitId":"HappyM0ment"},"content":"            System.out.println(\"OK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2023-04-07"},{"lineNumber":128,"author":{"gitId":"HappyM0ment"},"content":"            System.out.println(this.list.get(indexToBeUnmarked).toString());","lastModifiedDate":"2023-04-07"},{"lineNumber":129,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-07"},{"lineNumber":130,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-07"},{"lineNumber":131,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":132,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-08"},{"lineNumber":133,"author":{"gitId":"HappyM0ment"},"content":"     * findItemInList method will search task by keyword and display matching tasks","lastModifiedDate":"2023-04-09"},{"lineNumber":134,"author":{"gitId":"HappyM0ment"},"content":"     * @param keyword keyword to be searched","lastModifiedDate":"2023-04-10"},{"lineNumber":135,"author":{"gitId":"HappyM0ment"},"content":"     * @throws DukeException if index provided is larger than the size of the list","lastModifiedDate":"2023-04-09"},{"lineNumber":136,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-08"},{"lineNumber":137,"author":{"gitId":"HappyM0ment"},"content":"    public void findItemInList(String keyword) {","lastModifiedDate":"2023-04-10"},{"lineNumber":138,"author":{"gitId":"HappyM0ment"},"content":"        System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2023-04-08"},{"lineNumber":139,"author":{"gitId":"HappyM0ment"},"content":"        for(int i \u003d 0; i \u003c this.getSizeOfList(); i++) {","lastModifiedDate":"2023-04-08"},{"lineNumber":140,"author":{"gitId":"HappyM0ment"},"content":"            if(this.list.get(i).getDescription().toUpperCase().contains(keyword.toUpperCase())) {","lastModifiedDate":"2023-04-11"},{"lineNumber":141,"author":{"gitId":"HappyM0ment"},"content":"                System.out.println(i+1 + \".\" + this.list.get(i).toString());","lastModifiedDate":"2023-04-08"},{"lineNumber":142,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-08"},{"lineNumber":143,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-08"},{"lineNumber":144,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-08"},{"lineNumber":145,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":146,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-11"},{"lineNumber":147,"author":{"gitId":"HappyM0ment"},"content":"     * findClashingEventInList method will search the list and returns true if there is a clash of event","lastModifiedDate":"2023-04-11"},{"lineNumber":148,"author":{"gitId":"HappyM0ment"},"content":"     * @param eventTask task Obj in","lastModifiedDate":"2023-04-11"},{"lineNumber":149,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-11"},{"lineNumber":150,"author":{"gitId":"HappyM0ment"},"content":"    public Integer findClashingEventInList(Event eventTask) {","lastModifiedDate":"2023-04-11"},{"lineNumber":151,"author":{"gitId":"HappyM0ment"},"content":"        Integer counter \u003d -1;","lastModifiedDate":"2023-04-11"},{"lineNumber":152,"author":{"gitId":"HappyM0ment"},"content":"        for(int i \u003d 0; i \u003c this.getSizeOfList(); i++) {","lastModifiedDate":"2023-04-11"},{"lineNumber":153,"author":{"gitId":"HappyM0ment"},"content":"            Task currTask \u003d this.getElementFromList(i);","lastModifiedDate":"2023-04-11"},{"lineNumber":154,"author":{"gitId":"HappyM0ment"},"content":"            if(currTask instanceof Event) {","lastModifiedDate":"2023-04-11"},{"lineNumber":155,"author":{"gitId":"HappyM0ment"},"content":"                if(DateValidator.isEventDateClash((Event) currTask, eventTask)) {","lastModifiedDate":"2023-04-11"},{"lineNumber":156,"author":{"gitId":"HappyM0ment"},"content":"                    counter \u003d i;","lastModifiedDate":"2023-04-11"},{"lineNumber":157,"author":{"gitId":"HappyM0ment"},"content":"                    break;","lastModifiedDate":"2023-04-11"},{"lineNumber":158,"author":{"gitId":"HappyM0ment"},"content":"                }","lastModifiedDate":"2023-04-11"},{"lineNumber":159,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-11"},{"lineNumber":160,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-11"},{"lineNumber":161,"author":{"gitId":"HappyM0ment"},"content":"        return counter;","lastModifiedDate":"2023-04-11"},{"lineNumber":162,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-11"},{"lineNumber":163,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-11"},{"lineNumber":164,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-08"},{"lineNumber":165,"author":{"gitId":"HappyM0ment"},"content":"     * checkDuplicate method will search the list to check for duplicates","lastModifiedDate":"2023-04-09"},{"lineNumber":166,"author":{"gitId":"HappyM0ment"},"content":"     * @param newTask task object as parameters","lastModifiedDate":"2023-04-10"},{"lineNumber":167,"author":{"gitId":"HappyM0ment"},"content":"     * @return TRUE if duplicate exists, FALSE if no duplicates","lastModifiedDate":"2023-04-09"},{"lineNumber":168,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-08"},{"lineNumber":169,"author":{"gitId":"HappyM0ment"},"content":"    public boolean checkDuplicate(Task newTask)","lastModifiedDate":"2023-04-08"},{"lineNumber":170,"author":{"gitId":"HappyM0ment"},"content":"    {","lastModifiedDate":"2023-04-08"},{"lineNumber":171,"author":{"gitId":"HappyM0ment"},"content":"        boolean counter \u003d false;","lastModifiedDate":"2023-04-08"},{"lineNumber":172,"author":{"gitId":"HappyM0ment"},"content":"        for(int i \u003d 0; i \u003c this.getSizeOfList(); i++) {","lastModifiedDate":"2023-04-08"},{"lineNumber":173,"author":{"gitId":"HappyM0ment"},"content":"            Task currItem \u003d this.getElementFromList(i);","lastModifiedDate":"2023-04-08"},{"lineNumber":174,"author":{"gitId":"HappyM0ment"},"content":"            if(newTask.getClass().equals(currItem.getClass())) {","lastModifiedDate":"2023-04-08"},{"lineNumber":175,"author":{"gitId":"HappyM0ment"},"content":"                if(newTask instanceof Todo)","lastModifiedDate":"2023-04-08"},{"lineNumber":176,"author":{"gitId":"HappyM0ment"},"content":"                {","lastModifiedDate":"2023-04-08"},{"lineNumber":177,"author":{"gitId":"HappyM0ment"},"content":"                    if(newTask.getDescription().equalsIgnoreCase(currItem.getDescription())) {","lastModifiedDate":"2023-04-08"},{"lineNumber":178,"author":{"gitId":"HappyM0ment"},"content":"                        return true;","lastModifiedDate":"2023-04-08"},{"lineNumber":179,"author":{"gitId":"HappyM0ment"},"content":"                    }","lastModifiedDate":"2023-04-08"},{"lineNumber":180,"author":{"gitId":"HappyM0ment"},"content":"                }","lastModifiedDate":"2023-04-08"},{"lineNumber":181,"author":{"gitId":"HappyM0ment"},"content":"                else if(newTask instanceof Deadline)","lastModifiedDate":"2023-04-08"},{"lineNumber":182,"author":{"gitId":"HappyM0ment"},"content":"                {","lastModifiedDate":"2023-04-08"},{"lineNumber":183,"author":{"gitId":"HappyM0ment"},"content":"                    if(newTask.getDescription().equalsIgnoreCase(currItem.getDescription()) \u0026\u0026 (DateValidator.isDateEqual(((Deadline) newTask).getBy(),((Deadline) currItem).getBy()))) {","lastModifiedDate":"2023-04-09"},{"lineNumber":184,"author":{"gitId":"HappyM0ment"},"content":"                        return true;","lastModifiedDate":"2023-04-08"},{"lineNumber":185,"author":{"gitId":"HappyM0ment"},"content":"                    }","lastModifiedDate":"2023-04-08"},{"lineNumber":186,"author":{"gitId":"HappyM0ment"},"content":"                }","lastModifiedDate":"2023-04-08"},{"lineNumber":187,"author":{"gitId":"HappyM0ment"},"content":"                else {","lastModifiedDate":"2023-04-08"},{"lineNumber":188,"author":{"gitId":"HappyM0ment"},"content":"                    if(newTask.getDescription().equalsIgnoreCase(currItem.getDescription()) \u0026\u0026 DateValidator.isDateEqual(((Event) newTask).getStart(),((Event) currItem).getStart()) \u0026\u0026 DateValidator.isDateEqual(((Event) newTask).getStart(),((Event) currItem).getStart())) {","lastModifiedDate":"2023-04-11"},{"lineNumber":189,"author":{"gitId":"HappyM0ment"},"content":"                        return true;","lastModifiedDate":"2023-04-08"},{"lineNumber":190,"author":{"gitId":"HappyM0ment"},"content":"                    }","lastModifiedDate":"2023-04-08"},{"lineNumber":191,"author":{"gitId":"HappyM0ment"},"content":"                }","lastModifiedDate":"2023-04-08"},{"lineNumber":192,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-08"},{"lineNumber":193,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-08"},{"lineNumber":194,"author":{"gitId":"HappyM0ment"},"content":"        return counter;","lastModifiedDate":"2023-04-08"},{"lineNumber":195,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-08"},{"lineNumber":196,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":197,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":198,"author":{"gitId":"HappyM0ment"},"content":"}","lastModifiedDate":"2023-04-04"}],"authorContributionMap":{"HappyM0ment":198}},{"path":"src/test/java/duke/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HappyM0ment"},"content":"package duke;","lastModifiedDate":"2023-04-10"},{"lineNumber":2,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":3,"author":{"gitId":"HappyM0ment"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-04-10"},{"lineNumber":4,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":5,"author":{"gitId":"HappyM0ment"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-04-10"},{"lineNumber":6,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":7,"author":{"gitId":"HappyM0ment"},"content":"public class TodoTest {","lastModifiedDate":"2023-04-10"},{"lineNumber":8,"author":{"gitId":"HappyM0ment"},"content":"    @Test","lastModifiedDate":"2023-04-10"},{"lineNumber":9,"author":{"gitId":"HappyM0ment"},"content":"    public void createTodoTest(){","lastModifiedDate":"2023-04-10"},{"lineNumber":10,"author":{"gitId":"HappyM0ment"},"content":"        Task newTask \u003d new Todo(\"Buy food\");","lastModifiedDate":"2023-04-10"},{"lineNumber":11,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":12,"author":{"gitId":"HappyM0ment"},"content":"        assertEquals(\"Buy food\", newTask.getDescription());","lastModifiedDate":"2023-04-10"},{"lineNumber":13,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-10"},{"lineNumber":14,"author":{"gitId":"HappyM0ment"},"content":"}","lastModifiedDate":"2023-04-10"}],"authorContributionMap":{"HappyM0ment":14}},{"path":"src/test/java/duke/parser/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HappyM0ment"},"content":"package duke.parser;","lastModifiedDate":"2023-04-10"},{"lineNumber":2,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":3,"author":{"gitId":"HappyM0ment"},"content":"import duke.DukeException;","lastModifiedDate":"2023-04-10"},{"lineNumber":4,"author":{"gitId":"HappyM0ment"},"content":"import duke.command.Command;","lastModifiedDate":"2023-04-10"},{"lineNumber":5,"author":{"gitId":"HappyM0ment"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-04-10"},{"lineNumber":6,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":7,"author":{"gitId":"HappyM0ment"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2023-04-10"},{"lineNumber":8,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":9,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":10,"author":{"gitId":"HappyM0ment"},"content":"public class ParserTest {","lastModifiedDate":"2023-04-10"},{"lineNumber":11,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":12,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":13,"author":{"gitId":"HappyM0ment"},"content":"     * Exception test reference from the following site:","lastModifiedDate":"2023-04-10"},{"lineNumber":14,"author":{"gitId":"HappyM0ment"},"content":"     * Reference: https://www.baeldung.com/junit-assert-exception#:~:text\u003dWhen%20using%20JUnit%204%2C%20we,in%20the%20annotated%20test%20method.\u0026text\u003dIn%20this%20example%2C%20we\u0027ve,to%20result%20in%20a%20NullPointerException.","lastModifiedDate":"2023-04-10"},{"lineNumber":15,"author":{"gitId":"HappyM0ment"},"content":"     * validateUnknownCommand() method tests exception should throw if we provide an unknown command","lastModifiedDate":"2023-04-10"},{"lineNumber":16,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":17,"author":{"gitId":"HappyM0ment"},"content":"    @Test","lastModifiedDate":"2023-04-10"},{"lineNumber":18,"author":{"gitId":"HappyM0ment"},"content":"    public void validateUnknownCommand_ShouldThrowExceptionTest(){","lastModifiedDate":"2023-04-10"},{"lineNumber":19,"author":{"gitId":"HappyM0ment"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e {","lastModifiedDate":"2023-04-10"},{"lineNumber":20,"author":{"gitId":"HappyM0ment"},"content":"            Parser.parse(\"do nothing\");","lastModifiedDate":"2023-04-10"},{"lineNumber":21,"author":{"gitId":"HappyM0ment"},"content":"        });","lastModifiedDate":"2023-04-10"},{"lineNumber":22,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":23,"author":{"gitId":"HappyM0ment"},"content":"        String anticipatedMessage \u003d \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";","lastModifiedDate":"2023-04-10"},{"lineNumber":24,"author":{"gitId":"HappyM0ment"},"content":"        String realMessage \u003d exception.getMessage();","lastModifiedDate":"2023-04-10"},{"lineNumber":25,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":26,"author":{"gitId":"HappyM0ment"},"content":"        assertEquals(anticipatedMessage, realMessage);","lastModifiedDate":"2023-04-10"},{"lineNumber":27,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-10"},{"lineNumber":28,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":29,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":30,"author":{"gitId":"HappyM0ment"},"content":"     * validateByeCommand will test if bye command is successfully parsed through and command class will be created with a isByeAttribute true","lastModifiedDate":"2023-04-10"},{"lineNumber":31,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":32,"author":{"gitId":"HappyM0ment"},"content":"    @Test","lastModifiedDate":"2023-04-10"},{"lineNumber":33,"author":{"gitId":"HappyM0ment"},"content":"    public void validateByeCommandTest(){","lastModifiedDate":"2023-04-10"},{"lineNumber":34,"author":{"gitId":"HappyM0ment"},"content":"        Command objC \u003d null;","lastModifiedDate":"2023-04-10"},{"lineNumber":35,"author":{"gitId":"HappyM0ment"},"content":"        try {","lastModifiedDate":"2023-04-10"},{"lineNumber":36,"author":{"gitId":"HappyM0ment"},"content":"            objC \u003d Parser.parse(\"bye\");","lastModifiedDate":"2023-04-10"},{"lineNumber":37,"author":{"gitId":"HappyM0ment"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-04-10"},{"lineNumber":38,"author":{"gitId":"HappyM0ment"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2023-04-10"},{"lineNumber":39,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-10"},{"lineNumber":40,"author":{"gitId":"HappyM0ment"},"content":"        assertTrue(objC.isItBye());","lastModifiedDate":"2023-04-10"},{"lineNumber":41,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-10"},{"lineNumber":42,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":43,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":44,"author":{"gitId":"HappyM0ment"},"content":"}","lastModifiedDate":"2023-04-10"}],"authorContributionMap":{"HappyM0ment":44}},{"path":"src/test/java/duke/task/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HappyM0ment"},"content":"package duke.task;","lastModifiedDate":"2023-04-10"},{"lineNumber":2,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":3,"author":{"gitId":"HappyM0ment"},"content":"import duke.DukeException;","lastModifiedDate":"2023-04-10"},{"lineNumber":4,"author":{"gitId":"HappyM0ment"},"content":"import duke.Task;","lastModifiedDate":"2023-04-10"},{"lineNumber":5,"author":{"gitId":"HappyM0ment"},"content":"import duke.Todo;","lastModifiedDate":"2023-04-10"},{"lineNumber":6,"author":{"gitId":"HappyM0ment"},"content":"import duke.command.Command;","lastModifiedDate":"2023-04-10"},{"lineNumber":7,"author":{"gitId":"HappyM0ment"},"content":"import duke.parser.Parser;","lastModifiedDate":"2023-04-10"},{"lineNumber":8,"author":{"gitId":"HappyM0ment"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-04-10"},{"lineNumber":9,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":10,"author":{"gitId":"HappyM0ment"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2023-04-10"},{"lineNumber":11,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":12,"author":{"gitId":"HappyM0ment"},"content":"public class TaskListTest {","lastModifiedDate":"2023-04-10"},{"lineNumber":13,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":14,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":15,"author":{"gitId":"HappyM0ment"},"content":"     * validateDeleteTaskTest will validate both add and delete task by checking the size of the lists","lastModifiedDate":"2023-04-10"},{"lineNumber":16,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":17,"author":{"gitId":"HappyM0ment"},"content":"    @Test","lastModifiedDate":"2023-04-10"},{"lineNumber":18,"author":{"gitId":"HappyM0ment"},"content":"    public void validateAddThenDeleteTaskTest(){","lastModifiedDate":"2023-04-10"},{"lineNumber":19,"author":{"gitId":"HappyM0ment"},"content":"        TaskList taskListObj \u003d new TaskList();","lastModifiedDate":"2023-04-10"},{"lineNumber":20,"author":{"gitId":"HappyM0ment"},"content":"        Task newTask \u003d new Todo(\"Breakfast\");","lastModifiedDate":"2023-04-10"},{"lineNumber":21,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":22,"author":{"gitId":"HappyM0ment"},"content":"        try {","lastModifiedDate":"2023-04-10"},{"lineNumber":23,"author":{"gitId":"HappyM0ment"},"content":"            taskListObj.addNewTask(newTask);","lastModifiedDate":"2023-04-10"},{"lineNumber":24,"author":{"gitId":"HappyM0ment"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-04-10"},{"lineNumber":25,"author":{"gitId":"HappyM0ment"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2023-04-10"},{"lineNumber":26,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-10"},{"lineNumber":27,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":28,"author":{"gitId":"HappyM0ment"},"content":"        assertEquals(1, taskListObj.getSizeOfList());","lastModifiedDate":"2023-04-10"},{"lineNumber":29,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":30,"author":{"gitId":"HappyM0ment"},"content":"        try {","lastModifiedDate":"2023-04-10"},{"lineNumber":31,"author":{"gitId":"HappyM0ment"},"content":"            int index \u003d 0;","lastModifiedDate":"2023-04-10"},{"lineNumber":32,"author":{"gitId":"HappyM0ment"},"content":"            taskListObj.deleteTask(index);","lastModifiedDate":"2023-04-10"},{"lineNumber":33,"author":{"gitId":"HappyM0ment"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-04-10"},{"lineNumber":34,"author":{"gitId":"HappyM0ment"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2023-04-10"},{"lineNumber":35,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-10"},{"lineNumber":36,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":37,"author":{"gitId":"HappyM0ment"},"content":"        assertEquals(0, taskListObj.getSizeOfList());","lastModifiedDate":"2023-04-10"},{"lineNumber":38,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":39,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-10"},{"lineNumber":40,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":41,"author":{"gitId":"HappyM0ment"},"content":"}","lastModifiedDate":"2023-04-10"}],"authorContributionMap":{"HappyM0ment":41}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"HappyM0ment"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-04-04"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"HappyM0ment":1,"-":20}}]
