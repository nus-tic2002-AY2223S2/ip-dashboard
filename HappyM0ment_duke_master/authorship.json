[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"HappyM0ment"},"content":"# duke.Duke project template","lastModifiedDate":"2023-04-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"HappyM0ment"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-04-04"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"HappyM0ment":2,"-":22}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"HappyM0ment"},"content":"T : 1 : read more books","lastModifiedDate":"2023-04-08"},{"lineNumber":2,"author":{"gitId":"HappyM0ment"},"content":"E : 1 : project meeting : Sun 3pm : 4pm","lastModifiedDate":"2023-04-08"},{"lineNumber":3,"author":{"gitId":"HappyM0ment"},"content":"D : 1 : return money : 5th April 2024","lastModifiedDate":"2023-04-08"},{"lineNumber":4,"author":{"gitId":"HappyM0ment"},"content":"D : 0 : add water : Sunday","lastModifiedDate":"2023-04-08"},{"lineNumber":5,"author":{"gitId":"HappyM0ment"},"content":"T : 0 : throw water","lastModifiedDate":"2023-04-08"},{"lineNumber":6,"author":{"gitId":"HappyM0ment"},"content":"D : 0 : return money : 6th April 2024","lastModifiedDate":"2023-04-08"},{"lineNumber":7,"author":{"gitId":"HappyM0ment"},"content":"T : 0 : go to the park","lastModifiedDate":"2023-04-08"}],"authorContributionMap":{"HappyM0ment":7}},{"path":"data/duplicate.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"HappyM0ment"},"content":"T : 1 : read more books","lastModifiedDate":"2023-04-07"},{"lineNumber":2,"author":{"gitId":"HappyM0ment"},"content":"E : 0 : project meeting : Sun 3pm : 4pm","lastModifiedDate":"2023-04-07"},{"lineNumber":3,"author":{"gitId":"HappyM0ment"},"content":"D : 0 : return money : 5th April 2024","lastModifiedDate":"2023-04-07"}],"authorContributionMap":{"HappyM0ment":3}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HappyM0ment"},"content":"/**","lastModifiedDate":"2023-04-04"},{"lineNumber":2,"author":{"gitId":"HappyM0ment"},"content":" *  DONE BY: A0227169X; ANG JIA JIN, GABRIEL","lastModifiedDate":"2023-04-04"},{"lineNumber":3,"author":{"gitId":"HappyM0ment"},"content":" */","lastModifiedDate":"2023-04-04"},{"lineNumber":4,"author":{"gitId":"HappyM0ment"},"content":"package duke;","lastModifiedDate":"2023-04-04"},{"lineNumber":5,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":6,"author":{"gitId":"HappyM0ment"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-03-17"},{"lineNumber":7,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":8,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-07"},{"lineNumber":9,"author":{"gitId":"HappyM0ment"},"content":"     *  Attributes","lastModifiedDate":"2023-04-07"},{"lineNumber":10,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-07"},{"lineNumber":11,"author":{"gitId":"HappyM0ment"},"content":"    protected String by;","lastModifiedDate":"2023-03-17"},{"lineNumber":12,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":13,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-07"},{"lineNumber":14,"author":{"gitId":"HappyM0ment"},"content":"     *  Constructor","lastModifiedDate":"2023-04-07"},{"lineNumber":15,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-07"},{"lineNumber":16,"author":{"gitId":"HappyM0ment"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2023-03-17"},{"lineNumber":17,"author":{"gitId":"HappyM0ment"},"content":"        super(description);","lastModifiedDate":"2023-03-17"},{"lineNumber":18,"author":{"gitId":"HappyM0ment"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-03-17"},{"lineNumber":19,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":20,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":21,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-07"},{"lineNumber":22,"author":{"gitId":"HappyM0ment"},"content":"     * @return the deadline of Task","lastModifiedDate":"2023-04-07"},{"lineNumber":23,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-07"},{"lineNumber":24,"author":{"gitId":"HappyM0ment"},"content":"    public String getBy() {","lastModifiedDate":"2023-03-17"},{"lineNumber":25,"author":{"gitId":"HappyM0ment"},"content":"        return by;","lastModifiedDate":"2023-03-17"},{"lineNumber":26,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":27,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":28,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-07"},{"lineNumber":29,"author":{"gitId":"HappyM0ment"},"content":"     * change the deadline of Task","lastModifiedDate":"2023-04-07"},{"lineNumber":30,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-07"},{"lineNumber":31,"author":{"gitId":"HappyM0ment"},"content":"    public void setBy(String by) {","lastModifiedDate":"2023-03-17"},{"lineNumber":32,"author":{"gitId":"HappyM0ment"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-03-17"},{"lineNumber":33,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":34,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":35,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-07"},{"lineNumber":36,"author":{"gitId":"HappyM0ment"},"content":"     * print out Task\u0027s standard output","lastModifiedDate":"2023-04-07"},{"lineNumber":37,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-07"},{"lineNumber":38,"author":{"gitId":"HappyM0ment"},"content":"    @Override","lastModifiedDate":"2023-03-17"},{"lineNumber":39,"author":{"gitId":"HappyM0ment"},"content":"    public String toString() {","lastModifiedDate":"2023-03-17"},{"lineNumber":40,"author":{"gitId":"HappyM0ment"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";","lastModifiedDate":"2023-03-17"},{"lineNumber":41,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":42,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":43,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":44,"author":{"gitId":"HappyM0ment"},"content":"}","lastModifiedDate":"2023-03-17"}],"authorContributionMap":{"HappyM0ment":44}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HappyM0ment"},"content":"/**","lastModifiedDate":"2023-04-04"},{"lineNumber":2,"author":{"gitId":"HappyM0ment"},"content":"*  DONE BY: A0227169X; ANG JIA JIN, GABRIEL","lastModifiedDate":"2023-04-04"},{"lineNumber":3,"author":{"gitId":"HappyM0ment"},"content":"*/","lastModifiedDate":"2023-04-04"},{"lineNumber":4,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":5,"author":{"gitId":"HappyM0ment"},"content":"package duke;","lastModifiedDate":"2023-04-04"},{"lineNumber":6,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":7,"author":{"gitId":"HappyM0ment"},"content":"import duke.command.Command;","lastModifiedDate":"2023-04-04"},{"lineNumber":8,"author":{"gitId":"HappyM0ment"},"content":"import duke.parser.Parser;","lastModifiedDate":"2023-04-04"},{"lineNumber":9,"author":{"gitId":"HappyM0ment"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-04-04"},{"lineNumber":10,"author":{"gitId":"HappyM0ment"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-04-04"},{"lineNumber":11,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":12,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":13,"author":{"gitId":"HappyM0ment"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-13"},{"lineNumber":14,"author":{"gitId":"HappyM0ment"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-13"},{"lineNumber":15,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":17,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":18,"author":{"gitId":"HappyM0ment"},"content":"    /********************************************/","lastModifiedDate":"2023-04-04"},{"lineNumber":19,"author":{"gitId":"HappyM0ment"},"content":"    private Ui ui;","lastModifiedDate":"2023-04-04"},{"lineNumber":20,"author":{"gitId":"HappyM0ment"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-04-04"},{"lineNumber":21,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":22,"author":{"gitId":"HappyM0ment"},"content":"    private Storage storage;","lastModifiedDate":"2023-04-04"},{"lineNumber":23,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":24,"author":{"gitId":"HappyM0ment"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2023-04-04"},{"lineNumber":25,"author":{"gitId":"HappyM0ment"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-04-04"},{"lineNumber":26,"author":{"gitId":"HappyM0ment"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2023-04-04"},{"lineNumber":27,"author":{"gitId":"HappyM0ment"},"content":"        try {","lastModifiedDate":"2023-04-04"},{"lineNumber":28,"author":{"gitId":"HappyM0ment"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2023-04-04"},{"lineNumber":29,"author":{"gitId":"HappyM0ment"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-04-04"},{"lineNumber":30,"author":{"gitId":"HappyM0ment"},"content":"            ui.showLoadingError();","lastModifiedDate":"2023-04-04"},{"lineNumber":31,"author":{"gitId":"HappyM0ment"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2023-04-04"},{"lineNumber":32,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-04"},{"lineNumber":33,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":34,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":35,"author":{"gitId":"HappyM0ment"},"content":"    public void run() {","lastModifiedDate":"2023-04-04"},{"lineNumber":36,"author":{"gitId":"HappyM0ment"},"content":"        ui.showWelcomeMessage();","lastModifiedDate":"2023-04-04"},{"lineNumber":37,"author":{"gitId":"HappyM0ment"},"content":"        boolean isItBye \u003d false;","lastModifiedDate":"2023-04-04"},{"lineNumber":38,"author":{"gitId":"HappyM0ment"},"content":"        while (!isItBye) {","lastModifiedDate":"2023-04-04"},{"lineNumber":39,"author":{"gitId":"HappyM0ment"},"content":"            try {","lastModifiedDate":"2023-04-04"},{"lineNumber":40,"author":{"gitId":"HappyM0ment"},"content":"                String fullCommand \u003d ui.readCommand();","lastModifiedDate":"2023-04-04"},{"lineNumber":41,"author":{"gitId":"HappyM0ment"},"content":"                ui.showDividerLine();","lastModifiedDate":"2023-04-04"},{"lineNumber":42,"author":{"gitId":"HappyM0ment"},"content":"                Command c \u003d Parser.parse(fullCommand);","lastModifiedDate":"2023-04-04"},{"lineNumber":43,"author":{"gitId":"HappyM0ment"},"content":"                c.execute(tasks, ui, storage);","lastModifiedDate":"2023-04-04"},{"lineNumber":44,"author":{"gitId":"HappyM0ment"},"content":"                isItBye \u003d c.isItBye();","lastModifiedDate":"2023-04-04"},{"lineNumber":45,"author":{"gitId":"HappyM0ment"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-04-04"},{"lineNumber":46,"author":{"gitId":"HappyM0ment"},"content":"                ui.showError(e.getMessage());","lastModifiedDate":"2023-04-04"},{"lineNumber":47,"author":{"gitId":"HappyM0ment"},"content":"            } finally {","lastModifiedDate":"2023-04-04"},{"lineNumber":48,"author":{"gitId":"HappyM0ment"},"content":"                ui.showDividerLine();","lastModifiedDate":"2023-04-04"},{"lineNumber":49,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-04"},{"lineNumber":50,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-04"},{"lineNumber":51,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":52,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":53,"author":{"gitId":"HappyM0ment"},"content":"        /**************************to be extracted one by one******************/","lastModifiedDate":"2023-04-04"},{"lineNumber":54,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":55,"author":{"gitId":"HappyM0ment"},"content":"/*        //variable initialization","lastModifiedDate":"2023-04-07"},{"lineNumber":56,"author":{"gitId":"HappyM0ment"},"content":"        Scanner scanObj \u003d new Scanner(System.in); //scanner Extracted","lastModifiedDate":"2023-04-04"},{"lineNumber":57,"author":{"gitId":"HappyM0ment"},"content":"        var lists \u003d new ArrayList\u003cTask\u003e(); //string initialize duke.Task arraylist //Extracted","lastModifiedDate":"2023-04-04"},{"lineNumber":58,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":59,"author":{"gitId":"HappyM0ment"},"content":"        // Get input from user","lastModifiedDate":"2023-02-08"},{"lineNumber":60,"author":{"gitId":"HappyM0ment"},"content":"        String input \u003d scanObj.nextLine(); //Extracted","lastModifiedDate":"2023-04-04"},{"lineNumber":61,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":62,"author":{"gitId":"HappyM0ment"},"content":"        // Main loop of the programme; exit upon \"Bye\" input","lastModifiedDate":"2023-03-17"},{"lineNumber":63,"author":{"gitId":"HappyM0ment"},"content":"        while(!input.equals(\"bye\"))","lastModifiedDate":"2023-02-09"},{"lineNumber":64,"author":{"gitId":"HappyM0ment"},"content":"        {","lastModifiedDate":"2023-02-08"},{"lineNumber":65,"author":{"gitId":"HappyM0ment"},"content":"            System.out.println(uiDivider);","lastModifiedDate":"2023-03-30"},{"lineNumber":66,"author":{"gitId":"HappyM0ment"},"content":"            if(input.equals(\"list\"))","lastModifiedDate":"2023-02-13"},{"lineNumber":67,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-02-13"},{"lineNumber":68,"author":{"gitId":"HappyM0ment"},"content":"                System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2023-03-17"},{"lineNumber":69,"author":{"gitId":"HappyM0ment"},"content":"                for(int i \u003d 0; i \u003c lists.size(); i++)","lastModifiedDate":"2023-02-13"},{"lineNumber":70,"author":{"gitId":"HappyM0ment"},"content":"                {","lastModifiedDate":"2023-02-13"},{"lineNumber":71,"author":{"gitId":"HappyM0ment"},"content":"                    System.out.println(i+1 + \".\" + lists.get(i).toString());","lastModifiedDate":"2023-03-17"},{"lineNumber":72,"author":{"gitId":"HappyM0ment"},"content":"                }","lastModifiedDate":"2023-03-17"},{"lineNumber":73,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-02-13"},{"lineNumber":74,"author":{"gitId":"HappyM0ment"},"content":"            else if (checkInputForMarkAction(input))","lastModifiedDate":"2023-03-17"},{"lineNumber":75,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-03-17"},{"lineNumber":76,"author":{"gitId":"HappyM0ment"},"content":"                //This condition checks if the Mark Action needs to be executed","lastModifiedDate":"2023-03-17"},{"lineNumber":77,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":78,"author":{"gitId":"HappyM0ment"},"content":"                //retrieve the index to be marked","lastModifiedDate":"2023-03-17"},{"lineNumber":79,"author":{"gitId":"HappyM0ment"},"content":"                try{","lastModifiedDate":"2023-03-19"},{"lineNumber":80,"author":{"gitId":"HappyM0ment"},"content":"                    String[] separatedReturn \u003d identifyFunctionsValidateInput(input, lists);","lastModifiedDate":"2023-03-19"},{"lineNumber":81,"author":{"gitId":"HappyM0ment"},"content":"                    int indexInList \u003d Integer.parseInt(separatedReturn[1]) - 1 ;","lastModifiedDate":"2023-03-17"},{"lineNumber":82,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":83,"author":{"gitId":"HappyM0ment"},"content":"                    //set Status of duke.Task to Done","lastModifiedDate":"2023-04-04"},{"lineNumber":84,"author":{"gitId":"HappyM0ment"},"content":"                    lists.get(indexInList).markAsDone();","lastModifiedDate":"2023-03-17"},{"lineNumber":85,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":86,"author":{"gitId":"HappyM0ment"},"content":"                    //Print output as expected","lastModifiedDate":"2023-03-17"},{"lineNumber":87,"author":{"gitId":"HappyM0ment"},"content":"                    System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-03-17"},{"lineNumber":88,"author":{"gitId":"HappyM0ment"},"content":"                    System.out.println(lists.get(indexInList).toString());","lastModifiedDate":"2023-03-17"},{"lineNumber":89,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":90,"author":{"gitId":"HappyM0ment"},"content":"                }","lastModifiedDate":"2023-03-17"},{"lineNumber":91,"author":{"gitId":"HappyM0ment"},"content":"                catch (DukeException de)","lastModifiedDate":"2023-03-19"},{"lineNumber":92,"author":{"gitId":"HappyM0ment"},"content":"                {","lastModifiedDate":"2023-03-17"},{"lineNumber":93,"author":{"gitId":"HappyM0ment"},"content":"                    System.out.println(\"Caught: \" + de);","lastModifiedDate":"2023-03-19"},{"lineNumber":94,"author":{"gitId":"HappyM0ment"},"content":"                }","lastModifiedDate":"2023-03-19"},{"lineNumber":95,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":96,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-03-19"},{"lineNumber":97,"author":{"gitId":"HappyM0ment"},"content":"            else if (checkInputForUnmarkAction(input))","lastModifiedDate":"2023-03-30"},{"lineNumber":98,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-03-30"},{"lineNumber":99,"author":{"gitId":"HappyM0ment"},"content":"                //This condition checks if the Unmark Action needs to be executed","lastModifiedDate":"2023-03-17"},{"lineNumber":100,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":101,"author":{"gitId":"HappyM0ment"},"content":"                //retrieve the index to be unmarked","lastModifiedDate":"2023-03-17"},{"lineNumber":102,"author":{"gitId":"HappyM0ment"},"content":"                try","lastModifiedDate":"2023-03-19"},{"lineNumber":103,"author":{"gitId":"HappyM0ment"},"content":"                {","lastModifiedDate":"2023-03-19"},{"lineNumber":104,"author":{"gitId":"HappyM0ment"},"content":"                    String[] separatedReturn \u003d identifyFunctionsValidateInput(input, lists);","lastModifiedDate":"2023-03-19"},{"lineNumber":105,"author":{"gitId":"HappyM0ment"},"content":"                    int indexInList \u003d Integer.parseInt(separatedReturn[1]) - 1;","lastModifiedDate":"2023-03-17"},{"lineNumber":106,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":107,"author":{"gitId":"HappyM0ment"},"content":"                    //set Status of duke.Task to Undone","lastModifiedDate":"2023-04-04"},{"lineNumber":108,"author":{"gitId":"HappyM0ment"},"content":"                    lists.get(indexInList).markAsUndone();","lastModifiedDate":"2023-03-17"},{"lineNumber":109,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":110,"author":{"gitId":"HappyM0ment"},"content":"                    //Print output as expected","lastModifiedDate":"2023-03-17"},{"lineNumber":111,"author":{"gitId":"HappyM0ment"},"content":"                    System.out.println(\"OK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2023-03-17"},{"lineNumber":112,"author":{"gitId":"HappyM0ment"},"content":"                    System.out.println(lists.get(indexInList).toString());","lastModifiedDate":"2023-03-17"},{"lineNumber":113,"author":{"gitId":"HappyM0ment"},"content":"                }","lastModifiedDate":"2023-02-13"},{"lineNumber":114,"author":{"gitId":"HappyM0ment"},"content":"                catch (DukeException de)","lastModifiedDate":"2023-03-19"},{"lineNumber":115,"author":{"gitId":"HappyM0ment"},"content":"                {","lastModifiedDate":"2023-03-19"},{"lineNumber":116,"author":{"gitId":"HappyM0ment"},"content":"                    System.out.println(\"Caught: \" + de);","lastModifiedDate":"2023-03-19"},{"lineNumber":117,"author":{"gitId":"HappyM0ment"},"content":"                }","lastModifiedDate":"2023-03-19"},{"lineNumber":118,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-03-19"},{"lineNumber":119,"author":{"gitId":"HappyM0ment"},"content":"            else","lastModifiedDate":"2023-02-13"},{"lineNumber":120,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-02-13"},{"lineNumber":121,"author":{"gitId":"HappyM0ment"},"content":"                //time to start adding DATELINES / TODOS / EVENTS","lastModifiedDate":"2023-03-17"},{"lineNumber":122,"author":{"gitId":"HappyM0ment"},"content":"                try{","lastModifiedDate":"2023-03-18"},{"lineNumber":123,"author":{"gitId":"HappyM0ment"},"content":"                    //this method [identifyFunctionsValidateInput] will validate most commonly seen error and handle it within the method","lastModifiedDate":"2023-03-18"},{"lineNumber":124,"author":{"gitId":"HappyM0ment"},"content":"                    String[] separatedString \u003d identifyFunctionsValidateInput(input, lists);","lastModifiedDate":"2023-03-18"},{"lineNumber":125,"author":{"gitId":"HappyM0ment"},"content":"                    //by doing so, everything after the first space will be stored in the last index of the array","lastModifiedDate":"2023-03-18"},{"lineNumber":126,"author":{"gitId":"HappyM0ment"},"content":"                    if(separatedString[0].equalsIgnoreCase(\"deadline\"))","lastModifiedDate":"2023-03-17"},{"lineNumber":127,"author":{"gitId":"HappyM0ment"},"content":"                    {","lastModifiedDate":"2023-03-17"},{"lineNumber":128,"author":{"gitId":"HappyM0ment"},"content":"                        //Using indexOf method to extract description \u0026 dateline","lastModifiedDate":"2023-03-18"},{"lineNumber":129,"author":{"gitId":"HappyM0ment"},"content":"                        //nextSeparated array will store value in such index","lastModifiedDate":"2023-03-18"},{"lineNumber":130,"author":{"gitId":"HappyM0ment"},"content":"                        //nextSeparated[0] \u003d description;","lastModifiedDate":"2023-03-18"},{"lineNumber":131,"author":{"gitId":"HappyM0ment"},"content":"                        //nextSeparated[1] \u003d deadline;","lastModifiedDate":"2023-03-18"},{"lineNumber":132,"author":{"gitId":"HappyM0ment"},"content":"                        String [] nextSeparated \u003d separatedString[1].split(\"/by\");","lastModifiedDate":"2023-03-18"},{"lineNumber":133,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":134,"author":{"gitId":"HappyM0ment"},"content":"                        Deadline newDeadline \u003d new Deadline(nextSeparated[0].trim(), nextSeparated[1].trim());","lastModifiedDate":"2023-03-18"},{"lineNumber":135,"author":{"gitId":"HappyM0ment"},"content":"                        lists.add(newDeadline);","lastModifiedDate":"2023-03-18"},{"lineNumber":136,"author":{"gitId":"HappyM0ment"},"content":"                        System.out.println(\"Got it. I\u0027ve added this task:\\n\" + newDeadline.toString());","lastModifiedDate":"2023-03-19"},{"lineNumber":137,"author":{"gitId":"HappyM0ment"},"content":"                    }","lastModifiedDate":"2023-03-17"},{"lineNumber":138,"author":{"gitId":"HappyM0ment"},"content":"                    else if(separatedString[0].equalsIgnoreCase(\"event\"))","lastModifiedDate":"2023-03-17"},{"lineNumber":139,"author":{"gitId":"HappyM0ment"},"content":"                    {","lastModifiedDate":"2023-03-17"},{"lineNumber":140,"author":{"gitId":"HappyM0ment"},"content":"                        //Using indexOf method to extract description \u0026 start/end timing","lastModifiedDate":"2023-03-18"},{"lineNumber":141,"author":{"gitId":"HappyM0ment"},"content":"                        //nextSeparated array will store value in such index","lastModifiedDate":"2023-03-18"},{"lineNumber":142,"author":{"gitId":"HappyM0ment"},"content":"                        //nextSeparated[0] \u003d description;","lastModifiedDate":"2023-03-18"},{"lineNumber":143,"author":{"gitId":"HappyM0ment"},"content":"                        //nextSeparated[1] \u003d start/end timing;","lastModifiedDate":"2023-03-18"},{"lineNumber":144,"author":{"gitId":"HappyM0ment"},"content":"                        String [] nextSeparated \u003d separatedString[1].split(\"/from\");","lastModifiedDate":"2023-03-18"},{"lineNumber":145,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":146,"author":{"gitId":"HappyM0ment"},"content":"                        //Using indexOf method again to extract start \u0026 end timing","lastModifiedDate":"2023-03-18"},{"lineNumber":147,"author":{"gitId":"HappyM0ment"},"content":"                        //nextSeparated array will store value in such index","lastModifiedDate":"2023-03-18"},{"lineNumber":148,"author":{"gitId":"HappyM0ment"},"content":"                        //separatedTiming[0] \u003d start timing;","lastModifiedDate":"2023-03-18"},{"lineNumber":149,"author":{"gitId":"HappyM0ment"},"content":"                        //separatedTiming[1] \u003d end timing;","lastModifiedDate":"2023-03-18"},{"lineNumber":150,"author":{"gitId":"HappyM0ment"},"content":"                        String [] separatedTiming \u003d nextSeparated[1].split(\"/to\");","lastModifiedDate":"2023-03-18"},{"lineNumber":151,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":152,"author":{"gitId":"HappyM0ment"},"content":"                        Event newEvent \u003d new Event(nextSeparated[0].trim(), separatedTiming[0].trim(), separatedTiming[1].trim());","lastModifiedDate":"2023-03-18"},{"lineNumber":153,"author":{"gitId":"HappyM0ment"},"content":"                        lists.add(newEvent);","lastModifiedDate":"2023-03-18"},{"lineNumber":154,"author":{"gitId":"HappyM0ment"},"content":"                        System.out.println(\"Got it. I\u0027ve added this task:\\n\" + newEvent.toString());","lastModifiedDate":"2023-03-19"},{"lineNumber":155,"author":{"gitId":"HappyM0ment"},"content":"                    }","lastModifiedDate":"2023-03-17"},{"lineNumber":156,"author":{"gitId":"HappyM0ment"},"content":"                    else if (separatedString[0].equalsIgnoreCase(\"todo\"))","lastModifiedDate":"2023-03-18"},{"lineNumber":157,"author":{"gitId":"HappyM0ment"},"content":"                    {","lastModifiedDate":"2023-03-17"},{"lineNumber":158,"author":{"gitId":"HappyM0ment"},"content":"                        Todo newTodo \u003d new Todo(separatedString[1]);","lastModifiedDate":"2023-03-18"},{"lineNumber":159,"author":{"gitId":"HappyM0ment"},"content":"                        lists.add(newTodo);","lastModifiedDate":"2023-03-17"},{"lineNumber":160,"author":{"gitId":"HappyM0ment"},"content":"                        System.out.println(\"Got it. I\u0027ve added this task:\\n\" + newTodo.toString());","lastModifiedDate":"2023-03-19"},{"lineNumber":161,"author":{"gitId":"HappyM0ment"},"content":"                    }","lastModifiedDate":"2023-02-13"},{"lineNumber":162,"author":{"gitId":"HappyM0ment"},"content":"                    else if (separatedString[0].equalsIgnoreCase(\"delete\"))","lastModifiedDate":"2023-03-18"},{"lineNumber":163,"author":{"gitId":"HappyM0ment"},"content":"                    {","lastModifiedDate":"2023-03-18"},{"lineNumber":164,"author":{"gitId":"HappyM0ment"},"content":"                        int indexInList \u003d Integer.parseInt(separatedString[1]) - 1 ;","lastModifiedDate":"2023-03-18"},{"lineNumber":165,"author":{"gitId":"HappyM0ment"},"content":"                        Task item \u003d lists.get(indexInList);","lastModifiedDate":"2023-03-18"},{"lineNumber":166,"author":{"gitId":"HappyM0ment"},"content":"                        lists.remove(indexInList);","lastModifiedDate":"2023-03-18"},{"lineNumber":167,"author":{"gitId":"HappyM0ment"},"content":"                        System.out.println(\"Noted. I\u0027ve removed this task:\\n\" + item.toString());","lastModifiedDate":"2023-03-18"},{"lineNumber":168,"author":{"gitId":"HappyM0ment"},"content":"                    }","lastModifiedDate":"2023-03-18"},{"lineNumber":169,"author":{"gitId":"HappyM0ment"},"content":"                    else","lastModifiedDate":"2023-03-18"},{"lineNumber":170,"author":{"gitId":"HappyM0ment"},"content":"                    {","lastModifiedDate":"2023-03-18"},{"lineNumber":171,"author":{"gitId":"HappyM0ment"},"content":"                        System.out.println(separatedString[0] + \" is unknown!\");","lastModifiedDate":"2023-03-18"},{"lineNumber":172,"author":{"gitId":"HappyM0ment"},"content":"                    }","lastModifiedDate":"2023-03-18"},{"lineNumber":173,"author":{"gitId":"HappyM0ment"},"content":"                    System.out.println(\"Now you have \" + lists.size() + \" task(s) in the list\");","lastModifiedDate":"2023-03-18"},{"lineNumber":174,"author":{"gitId":"HappyM0ment"},"content":"                }","lastModifiedDate":"2023-03-17"},{"lineNumber":175,"author":{"gitId":"HappyM0ment"},"content":"                catch (DukeException de)","lastModifiedDate":"2023-03-18"},{"lineNumber":176,"author":{"gitId":"HappyM0ment"},"content":"                {","lastModifiedDate":"2023-03-18"},{"lineNumber":177,"author":{"gitId":"HappyM0ment"},"content":"                    System.out.println(\"Caught: \" + de);","lastModifiedDate":"2023-03-18"},{"lineNumber":178,"author":{"gitId":"HappyM0ment"},"content":"                }","lastModifiedDate":"2023-03-18"},{"lineNumber":179,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-03-18"},{"lineNumber":180,"author":{"gitId":"HappyM0ment"},"content":"            System.out.println(uiDivider + \"\\n\");","lastModifiedDate":"2023-03-30"},{"lineNumber":181,"author":{"gitId":"HappyM0ment"},"content":"            input \u003d scanObj.nextLine();","lastModifiedDate":"2023-02-09"},{"lineNumber":182,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-02-08"},{"lineNumber":183,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":184,"author":{"gitId":"HappyM0ment"},"content":"        // Motherhood Statement when bye is key-ed in","lastModifiedDate":"2023-02-09"},{"lineNumber":185,"author":{"gitId":"HappyM0ment"},"content":"        System.out.println(uiDivider);","lastModifiedDate":"2023-03-30"},{"lineNumber":186,"author":{"gitId":"HappyM0ment"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-02-09"},{"lineNumber":187,"author":{"gitId":"HappyM0ment"},"content":"        System.out.println(uiDivider);","lastModifiedDate":"2023-03-30"},{"lineNumber":188,"author":{"gitId":"HappyM0ment"},"content":"        // End of programme*/","lastModifiedDate":"2023-04-07"},{"lineNumber":189,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":190,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":191,"author":{"gitId":"HappyM0ment"},"content":"        /**************************end of extract 1 by 1******************/","lastModifiedDate":"2023-04-04"},{"lineNumber":192,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":193,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":194,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":195,"author":{"gitId":"HappyM0ment"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-04-04"},{"lineNumber":196,"author":{"gitId":"HappyM0ment"},"content":"        new Duke(\"data/duke.txt\").run();","lastModifiedDate":"2023-04-07"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":198,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"HappyM0ment":195,"-":3}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HappyM0ment"},"content":"/**","lastModifiedDate":"2023-04-04"},{"lineNumber":2,"author":{"gitId":"HappyM0ment"},"content":" *  DONE BY: A0227169X; ANG JIA JIN, GABRIEL","lastModifiedDate":"2023-04-04"},{"lineNumber":3,"author":{"gitId":"HappyM0ment"},"content":" */","lastModifiedDate":"2023-04-04"},{"lineNumber":4,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":5,"author":{"gitId":"HappyM0ment"},"content":"package duke;","lastModifiedDate":"2023-04-04"},{"lineNumber":6,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":7,"author":{"gitId":"HappyM0ment"},"content":"////////////////////////////////////////////////","lastModifiedDate":"2023-03-18"},{"lineNumber":8,"author":{"gitId":"HappyM0ment"},"content":"//  DONE BY: A0227169X; ANG JIA JIN, GABRIEL  //","lastModifiedDate":"2023-03-18"},{"lineNumber":9,"author":{"gitId":"HappyM0ment"},"content":"////////////////////////////////////////////////","lastModifiedDate":"2023-03-18"},{"lineNumber":10,"author":{"gitId":"HappyM0ment"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-03-18"},{"lineNumber":11,"author":{"gitId":"HappyM0ment"},"content":"    public DukeException(String errMsg) {","lastModifiedDate":"2023-03-18"},{"lineNumber":12,"author":{"gitId":"HappyM0ment"},"content":"        super(errMsg);","lastModifiedDate":"2023-03-18"},{"lineNumber":13,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-18"},{"lineNumber":14,"author":{"gitId":"HappyM0ment"},"content":"}","lastModifiedDate":"2023-03-18"}],"authorContributionMap":{"HappyM0ment":14}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HappyM0ment"},"content":"/**","lastModifiedDate":"2023-04-04"},{"lineNumber":2,"author":{"gitId":"HappyM0ment"},"content":" *  DONE BY: A0227169X; ANG JIA JIN, GABRIEL","lastModifiedDate":"2023-04-04"},{"lineNumber":3,"author":{"gitId":"HappyM0ment"},"content":" */","lastModifiedDate":"2023-04-04"},{"lineNumber":4,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":5,"author":{"gitId":"HappyM0ment"},"content":"package duke;","lastModifiedDate":"2023-04-04"},{"lineNumber":6,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":7,"author":{"gitId":"HappyM0ment"},"content":"public class Event extends Task {","lastModifiedDate":"2023-03-17"},{"lineNumber":8,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":9,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-07"},{"lineNumber":10,"author":{"gitId":"HappyM0ment"},"content":"     *  Attributes","lastModifiedDate":"2023-04-07"},{"lineNumber":11,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-07"},{"lineNumber":12,"author":{"gitId":"HappyM0ment"},"content":"    protected String start;","lastModifiedDate":"2023-03-17"},{"lineNumber":13,"author":{"gitId":"HappyM0ment"},"content":"    protected String end;","lastModifiedDate":"2023-03-17"},{"lineNumber":14,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":15,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-07"},{"lineNumber":16,"author":{"gitId":"HappyM0ment"},"content":"     *  Constructor","lastModifiedDate":"2023-04-07"},{"lineNumber":17,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-07"},{"lineNumber":18,"author":{"gitId":"HappyM0ment"},"content":"    public Event(String description, String start, String end) {","lastModifiedDate":"2023-03-17"},{"lineNumber":19,"author":{"gitId":"HappyM0ment"},"content":"        super(description);","lastModifiedDate":"2023-03-17"},{"lineNumber":20,"author":{"gitId":"HappyM0ment"},"content":"        this.start \u003d start;","lastModifiedDate":"2023-03-17"},{"lineNumber":21,"author":{"gitId":"HappyM0ment"},"content":"        this.end \u003d end;","lastModifiedDate":"2023-03-17"},{"lineNumber":22,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":23,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":24,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-07"},{"lineNumber":25,"author":{"gitId":"HappyM0ment"},"content":"     *  @return start value of Task","lastModifiedDate":"2023-04-07"},{"lineNumber":26,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-07"},{"lineNumber":27,"author":{"gitId":"HappyM0ment"},"content":"    public String getStart() {","lastModifiedDate":"2023-03-17"},{"lineNumber":28,"author":{"gitId":"HappyM0ment"},"content":"        return start;","lastModifiedDate":"2023-03-17"},{"lineNumber":29,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":30,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":31,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-07"},{"lineNumber":32,"author":{"gitId":"HappyM0ment"},"content":"     *  Change start value of Task","lastModifiedDate":"2023-04-07"},{"lineNumber":33,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-07"},{"lineNumber":34,"author":{"gitId":"HappyM0ment"},"content":"    public void setStart(String start) {","lastModifiedDate":"2023-03-17"},{"lineNumber":35,"author":{"gitId":"HappyM0ment"},"content":"        this.start \u003d start;","lastModifiedDate":"2023-03-17"},{"lineNumber":36,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":37,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":38,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-07"},{"lineNumber":39,"author":{"gitId":"HappyM0ment"},"content":"     *  @return end value of Task","lastModifiedDate":"2023-04-07"},{"lineNumber":40,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-07"},{"lineNumber":41,"author":{"gitId":"HappyM0ment"},"content":"    public String getEnd() {","lastModifiedDate":"2023-03-17"},{"lineNumber":42,"author":{"gitId":"HappyM0ment"},"content":"        return end;","lastModifiedDate":"2023-03-17"},{"lineNumber":43,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":44,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":45,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-07"},{"lineNumber":46,"author":{"gitId":"HappyM0ment"},"content":"     *  Change end value of Task","lastModifiedDate":"2023-04-07"},{"lineNumber":47,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-07"},{"lineNumber":48,"author":{"gitId":"HappyM0ment"},"content":"    public void setEnd(String end) {","lastModifiedDate":"2023-03-17"},{"lineNumber":49,"author":{"gitId":"HappyM0ment"},"content":"        this.end \u003d end;","lastModifiedDate":"2023-03-17"},{"lineNumber":50,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":51,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":52,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-07"},{"lineNumber":53,"author":{"gitId":"HappyM0ment"},"content":"     *  toString() method will print out duke.Task\u0027s standard output","lastModifiedDate":"2023-04-07"},{"lineNumber":54,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-07"},{"lineNumber":55,"author":{"gitId":"HappyM0ment"},"content":"    @Override","lastModifiedDate":"2023-03-17"},{"lineNumber":56,"author":{"gitId":"HappyM0ment"},"content":"    public String toString() {","lastModifiedDate":"2023-03-17"},{"lineNumber":57,"author":{"gitId":"HappyM0ment"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + start + \" to: \" + end + \")\";","lastModifiedDate":"2023-03-17"},{"lineNumber":58,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":59,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":60,"author":{"gitId":"HappyM0ment"},"content":"}","lastModifiedDate":"2023-03-17"}],"authorContributionMap":{"HappyM0ment":60}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HappyM0ment"},"content":"/**","lastModifiedDate":"2023-04-04"},{"lineNumber":2,"author":{"gitId":"HappyM0ment"},"content":" *  DONE BY: A0227169X; ANG JIA JIN, GABRIEL","lastModifiedDate":"2023-04-04"},{"lineNumber":3,"author":{"gitId":"HappyM0ment"},"content":" */","lastModifiedDate":"2023-04-04"},{"lineNumber":4,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":5,"author":{"gitId":"HappyM0ment"},"content":"package duke;","lastModifiedDate":"2023-04-04"},{"lineNumber":6,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":7,"author":{"gitId":"HappyM0ment"},"content":"public class Task {","lastModifiedDate":"2023-03-17"},{"lineNumber":8,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-03"},{"lineNumber":9,"author":{"gitId":"HappyM0ment"},"content":"    * Attributes","lastModifiedDate":"2023-04-03"},{"lineNumber":10,"author":{"gitId":"HappyM0ment"},"content":"    */","lastModifiedDate":"2023-04-03"},{"lineNumber":11,"author":{"gitId":"HappyM0ment"},"content":"    protected String description;","lastModifiedDate":"2023-03-17"},{"lineNumber":12,"author":{"gitId":"HappyM0ment"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-03-17"},{"lineNumber":13,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":14,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-03"},{"lineNumber":15,"author":{"gitId":"HappyM0ment"},"content":"    *  Constructor","lastModifiedDate":"2023-04-03"},{"lineNumber":16,"author":{"gitId":"HappyM0ment"},"content":"    */","lastModifiedDate":"2023-04-03"},{"lineNumber":17,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-03"},{"lineNumber":18,"author":{"gitId":"HappyM0ment"},"content":"    public Task(String description) {","lastModifiedDate":"2023-03-17"},{"lineNumber":19,"author":{"gitId":"HappyM0ment"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-03-17"},{"lineNumber":20,"author":{"gitId":"HappyM0ment"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-03-17"},{"lineNumber":21,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":22,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":23,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-03"},{"lineNumber":24,"author":{"gitId":"HappyM0ment"},"content":"     *  getDescription() method will return the description of duke.Task","lastModifiedDate":"2023-04-04"},{"lineNumber":25,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-03"},{"lineNumber":26,"author":{"gitId":"HappyM0ment"},"content":"    public String getDescription() {","lastModifiedDate":"2023-03-17"},{"lineNumber":27,"author":{"gitId":"HappyM0ment"},"content":"        return this.description; // returns the value stored in the description attribute","lastModifiedDate":"2023-03-17"},{"lineNumber":28,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":29,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":30,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":31,"author":{"gitId":"HappyM0ment"},"content":"     *  setDescription() method will change the description of duke.Task","lastModifiedDate":"2023-04-04"},{"lineNumber":32,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":33,"author":{"gitId":"HappyM0ment"},"content":"    public void setDescription(String newDescription) {","lastModifiedDate":"2023-03-17"},{"lineNumber":34,"author":{"gitId":"HappyM0ment"},"content":"        this.description \u003d newDescription; // changes the description with the new input","lastModifiedDate":"2023-03-17"},{"lineNumber":35,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":36,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":37,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":38,"author":{"gitId":"HappyM0ment"},"content":"     *  getTaskStatus() method will return the status of the duke.Task","lastModifiedDate":"2023-04-04"},{"lineNumber":39,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":40,"author":{"gitId":"HappyM0ment"},"content":"    public String getTaskStatus() {","lastModifiedDate":"2023-03-17"},{"lineNumber":41,"author":{"gitId":"HappyM0ment"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2023-03-17"},{"lineNumber":42,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":43,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":44,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":45,"author":{"gitId":"HappyM0ment"},"content":"     *  markAsDone() method will mark the current task object as done by changing the isDone to TRUE","lastModifiedDate":"2023-04-04"},{"lineNumber":46,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":47,"author":{"gitId":"HappyM0ment"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-03-17"},{"lineNumber":48,"author":{"gitId":"HappyM0ment"},"content":"        this.isDone \u003d true; // converts isDone attribute to \u0027TRUE\u0027","lastModifiedDate":"2023-03-17"},{"lineNumber":49,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":50,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":51,"author":{"gitId":"HappyM0ment"},"content":"    ////////////////////////////////////////////////////////////////////////////////////////////////////////////","lastModifiedDate":"2023-03-17"},{"lineNumber":52,"author":{"gitId":"HappyM0ment"},"content":"    //  markAsUndone() method will un-mark the current task object as undone by changing the isDone to FALSE  //","lastModifiedDate":"2023-03-17"},{"lineNumber":53,"author":{"gitId":"HappyM0ment"},"content":"    ////////////////////////////////////////////////////////////////////////////////////////////////////////////","lastModifiedDate":"2023-03-17"},{"lineNumber":54,"author":{"gitId":"HappyM0ment"},"content":"    public void markAsUndone() {","lastModifiedDate":"2023-03-17"},{"lineNumber":55,"author":{"gitId":"HappyM0ment"},"content":"        this.isDone \u003d false; // converts isDone attribute to \u0027FALSE\u0027","lastModifiedDate":"2023-03-17"},{"lineNumber":56,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":57,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":58,"author":{"gitId":"HappyM0ment"},"content":"    ///////////////////////////////////////////////////////////////","lastModifiedDate":"2023-03-17"},{"lineNumber":59,"author":{"gitId":"HappyM0ment"},"content":"    //  toString() method will print out duke.Task\u0027s standard output  //","lastModifiedDate":"2023-04-04"},{"lineNumber":60,"author":{"gitId":"HappyM0ment"},"content":"    ///////////////////////////////////////////////////////////////","lastModifiedDate":"2023-03-17"},{"lineNumber":61,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":62,"author":{"gitId":"HappyM0ment"},"content":"    @Override","lastModifiedDate":"2023-03-17"},{"lineNumber":63,"author":{"gitId":"HappyM0ment"},"content":"    public String toString() {","lastModifiedDate":"2023-03-17"},{"lineNumber":64,"author":{"gitId":"HappyM0ment"},"content":"        return \"[\" + this.getTaskStatus() + \"] \" + this.description;","lastModifiedDate":"2023-03-17"},{"lineNumber":65,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":66,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":67,"author":{"gitId":"HappyM0ment"},"content":"}","lastModifiedDate":"2023-03-17"}],"authorContributionMap":{"HappyM0ment":67}},{"path":"src/main/java/duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HappyM0ment"},"content":"/**","lastModifiedDate":"2023-04-04"},{"lineNumber":2,"author":{"gitId":"HappyM0ment"},"content":" *  DONE BY: A0227169X; ANG JIA JIN, GABRIEL","lastModifiedDate":"2023-04-04"},{"lineNumber":3,"author":{"gitId":"HappyM0ment"},"content":" */","lastModifiedDate":"2023-04-04"},{"lineNumber":4,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":5,"author":{"gitId":"HappyM0ment"},"content":"package duke;","lastModifiedDate":"2023-04-04"},{"lineNumber":6,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":7,"author":{"gitId":"HappyM0ment"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-03-17"},{"lineNumber":8,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":9,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-07"},{"lineNumber":10,"author":{"gitId":"HappyM0ment"},"content":"     *  Constructor","lastModifiedDate":"2023-04-07"},{"lineNumber":11,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-07"},{"lineNumber":12,"author":{"gitId":"HappyM0ment"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-03-17"},{"lineNumber":13,"author":{"gitId":"HappyM0ment"},"content":"        super(description);","lastModifiedDate":"2023-03-17"},{"lineNumber":14,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":15,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":16,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-07"},{"lineNumber":17,"author":{"gitId":"HappyM0ment"},"content":"     *  toString() method will print out duke.Task\u0027s standard output","lastModifiedDate":"2023-04-07"},{"lineNumber":18,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-07"},{"lineNumber":19,"author":{"gitId":"HappyM0ment"},"content":"    @Override","lastModifiedDate":"2023-03-17"},{"lineNumber":20,"author":{"gitId":"HappyM0ment"},"content":"    public String toString() {","lastModifiedDate":"2023-03-17"},{"lineNumber":21,"author":{"gitId":"HappyM0ment"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-03-17"},{"lineNumber":22,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":23,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":24,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":25,"author":{"gitId":"HappyM0ment"},"content":"}","lastModifiedDate":"2023-03-17"}],"authorContributionMap":{"HappyM0ment":25}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HappyM0ment"},"content":"/**","lastModifiedDate":"2023-04-04"},{"lineNumber":2,"author":{"gitId":"HappyM0ment"},"content":" *  DONE BY: A0227169X; ANG JIA JIN, GABRIEL","lastModifiedDate":"2023-04-04"},{"lineNumber":3,"author":{"gitId":"HappyM0ment"},"content":" */","lastModifiedDate":"2023-04-04"},{"lineNumber":4,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":5,"author":{"gitId":"HappyM0ment"},"content":"package duke;","lastModifiedDate":"2023-04-04"},{"lineNumber":6,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":7,"author":{"gitId":"HappyM0ment"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-04-04"},{"lineNumber":8,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":9,"author":{"gitId":"HappyM0ment"},"content":"public class Ui {","lastModifiedDate":"2023-04-04"},{"lineNumber":10,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":11,"author":{"gitId":"HappyM0ment"},"content":"     *  Attribute","lastModifiedDate":"2023-04-04"},{"lineNumber":12,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":13,"author":{"gitId":"HappyM0ment"},"content":"    private static String loadingError \u003d \"No file found\";","lastModifiedDate":"2023-04-04"},{"lineNumber":14,"author":{"gitId":"HappyM0ment"},"content":"    private static String uiDivider \u003d \"____________________________________________________________\";","lastModifiedDate":"2023-04-04"},{"lineNumber":15,"author":{"gitId":"HappyM0ment"},"content":"    private static String byeMsg \u003d \"Bye. Hope to see you again soon\";","lastModifiedDate":"2023-04-07"},{"lineNumber":16,"author":{"gitId":"HappyM0ment"},"content":"    private static Scanner scanObj;","lastModifiedDate":"2023-04-04"},{"lineNumber":17,"author":{"gitId":"HappyM0ment"},"content":"    private static String input;","lastModifiedDate":"2023-04-04"},{"lineNumber":18,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":19,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":20,"author":{"gitId":"HappyM0ment"},"content":"     *  Constructor","lastModifiedDate":"2023-04-04"},{"lineNumber":21,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":22,"author":{"gitId":"HappyM0ment"},"content":"    public Ui() {","lastModifiedDate":"2023-04-04"},{"lineNumber":23,"author":{"gitId":"HappyM0ment"},"content":"        scanObj \u003d new Scanner(System.in);","lastModifiedDate":"2023-04-04"},{"lineNumber":24,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":25,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":26,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":27,"author":{"gitId":"HappyM0ment"},"content":"     *  this method will show the initial welcome message upon starting the app","lastModifiedDate":"2023-04-04"},{"lineNumber":28,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":29,"author":{"gitId":"HappyM0ment"},"content":"    public void showWelcomeMessage() {","lastModifiedDate":"2023-04-04"},{"lineNumber":30,"author":{"gitId":"HappyM0ment"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2023-04-04"},{"lineNumber":31,"author":{"gitId":"HappyM0ment"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2023-04-04"},{"lineNumber":32,"author":{"gitId":"HappyM0ment"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2023-04-04"},{"lineNumber":33,"author":{"gitId":"HappyM0ment"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2023-04-04"},{"lineNumber":34,"author":{"gitId":"HappyM0ment"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2023-04-04"},{"lineNumber":35,"author":{"gitId":"HappyM0ment"},"content":"        System.out.println(\"Hello from\\n\" + logo);","lastModifiedDate":"2023-04-04"},{"lineNumber":36,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":37,"author":{"gitId":"HappyM0ment"},"content":"        this.showDividerLine();","lastModifiedDate":"2023-04-04"},{"lineNumber":38,"author":{"gitId":"HappyM0ment"},"content":"        System.out.println(\"Hello! I\u0027m Duke\");","lastModifiedDate":"2023-04-04"},{"lineNumber":39,"author":{"gitId":"HappyM0ment"},"content":"        System.out.println(\"Here\u0027s the possible instructions as follows:\");","lastModifiedDate":"2023-04-08"},{"lineNumber":40,"author":{"gitId":"HappyM0ment"},"content":"        System.out.println(\" Add Task [Please follow format] -\u003e Add new Task into task list\");","lastModifiedDate":"2023-04-08"},{"lineNumber":41,"author":{"gitId":"HappyM0ment"},"content":"        System.out.println(\" -\u003e Todo e.g.: \u0027todo \u003cdescription\u003e\u0027 \");","lastModifiedDate":"2023-04-08"},{"lineNumber":42,"author":{"gitId":"HappyM0ment"},"content":"        System.out.println(\" -\u003e Dateline e.g.: \u0027deadline \u003cdescription\u003e /by \u003cdeadline\u003e\u0027 \");","lastModifiedDate":"2023-04-08"},{"lineNumber":43,"author":{"gitId":"HappyM0ment"},"content":"        System.out.println(\" -\u003e Event e.g.: \u0027event \u003cdescription\u003e /from \u003cstart date\u003e /to \u003cend date\u003e\u0027 \");","lastModifiedDate":"2023-04-08"},{"lineNumber":44,"author":{"gitId":"HappyM0ment"},"content":"        System.out.println(\" Mark / Unmark / Delete Task; [insert comma between numbers if want to perform Mass Operations]\");","lastModifiedDate":"2023-04-08"},{"lineNumber":45,"author":{"gitId":"HappyM0ment"},"content":"        System.out.println(\" List -\u003e List all Tasks \");","lastModifiedDate":"2023-04-08"},{"lineNumber":46,"author":{"gitId":"HappyM0ment"},"content":"        System.out.println(\" Bye -\u003e Exit\");","lastModifiedDate":"2023-04-08"},{"lineNumber":47,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":48,"author":{"gitId":"HappyM0ment"},"content":"        this.showDividerLine();","lastModifiedDate":"2023-04-08"},{"lineNumber":49,"author":{"gitId":"HappyM0ment"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2023-04-04"},{"lineNumber":50,"author":{"gitId":"HappyM0ment"},"content":"        this.showDividerLine();","lastModifiedDate":"2023-04-04"},{"lineNumber":51,"author":{"gitId":"HappyM0ment"},"content":"        System.out.println(\"\\n\");","lastModifiedDate":"2023-04-04"},{"lineNumber":52,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":53,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":54,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":55,"author":{"gitId":"HappyM0ment"},"content":"     *  this method will print out a divider line","lastModifiedDate":"2023-04-04"},{"lineNumber":56,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":57,"author":{"gitId":"HappyM0ment"},"content":"    public void showDividerLine() {","lastModifiedDate":"2023-04-07"},{"lineNumber":58,"author":{"gitId":"HappyM0ment"},"content":"        System.out.println(uiDivider);","lastModifiedDate":"2023-04-04"},{"lineNumber":59,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":60,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-08"},{"lineNumber":61,"author":{"gitId":"HappyM0ment"},"content":"     *  this method will print out next line","lastModifiedDate":"2023-04-08"},{"lineNumber":62,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-08"},{"lineNumber":63,"author":{"gitId":"HappyM0ment"},"content":"    public void printEmptyLine() {","lastModifiedDate":"2023-04-08"},{"lineNumber":64,"author":{"gitId":"HappyM0ment"},"content":"        System.out.println();","lastModifiedDate":"2023-04-08"},{"lineNumber":65,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-08"},{"lineNumber":66,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":67,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":68,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":69,"author":{"gitId":"HappyM0ment"},"content":"     *  this method will print out a loading error","lastModifiedDate":"2023-04-04"},{"lineNumber":70,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":71,"author":{"gitId":"HappyM0ment"},"content":"    public void showLoadingError() {","lastModifiedDate":"2023-04-07"},{"lineNumber":72,"author":{"gitId":"HappyM0ment"},"content":"        System.out.println(loadingError);","lastModifiedDate":"2023-04-04"},{"lineNumber":73,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":74,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":75,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-07"},{"lineNumber":76,"author":{"gitId":"HappyM0ment"},"content":"     *  this method will print motherhood bye statement","lastModifiedDate":"2023-04-07"},{"lineNumber":77,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-07"},{"lineNumber":78,"author":{"gitId":"HappyM0ment"},"content":"    public void showByeMeg() {","lastModifiedDate":"2023-04-07"},{"lineNumber":79,"author":{"gitId":"HappyM0ment"},"content":"        System.out.println(byeMsg);","lastModifiedDate":"2023-04-07"},{"lineNumber":80,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-07"},{"lineNumber":81,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":82,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":83,"author":{"gitId":"HappyM0ment"},"content":"     *  this method will take in an input from the user and returns it","lastModifiedDate":"2023-04-04"},{"lineNumber":84,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":85,"author":{"gitId":"HappyM0ment"},"content":"    public String readCommand()","lastModifiedDate":"2023-04-07"},{"lineNumber":86,"author":{"gitId":"HappyM0ment"},"content":"    {","lastModifiedDate":"2023-04-04"},{"lineNumber":87,"author":{"gitId":"HappyM0ment"},"content":"        input \u003d scanObj.nextLine();","lastModifiedDate":"2023-04-04"},{"lineNumber":88,"author":{"gitId":"HappyM0ment"},"content":"        return input;","lastModifiedDate":"2023-04-04"},{"lineNumber":89,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":90,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":91,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":92,"author":{"gitId":"HappyM0ment"},"content":"     *  this method will take in an error and display it out","lastModifiedDate":"2023-04-04"},{"lineNumber":93,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":94,"author":{"gitId":"HappyM0ment"},"content":"    public void showError(String errorMessage)","lastModifiedDate":"2023-04-07"},{"lineNumber":95,"author":{"gitId":"HappyM0ment"},"content":"    {","lastModifiedDate":"2023-04-04"},{"lineNumber":96,"author":{"gitId":"HappyM0ment"},"content":"        System.out.println(\"Error caught: \" + errorMessage);","lastModifiedDate":"2023-04-04"},{"lineNumber":97,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":98,"author":{"gitId":"HappyM0ment"},"content":"}","lastModifiedDate":"2023-04-04"}],"authorContributionMap":{"HappyM0ment":98}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HappyM0ment"},"content":"/**","lastModifiedDate":"2023-04-04"},{"lineNumber":2,"author":{"gitId":"HappyM0ment"},"content":" *  DONE BY: A0227169X; ANG JIA JIN, GABRIEL","lastModifiedDate":"2023-04-04"},{"lineNumber":3,"author":{"gitId":"HappyM0ment"},"content":" */","lastModifiedDate":"2023-04-04"},{"lineNumber":4,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":5,"author":{"gitId":"HappyM0ment"},"content":"package duke.command;","lastModifiedDate":"2023-04-04"},{"lineNumber":6,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":7,"author":{"gitId":"HappyM0ment"},"content":"import duke.*;","lastModifiedDate":"2023-04-07"},{"lineNumber":8,"author":{"gitId":"HappyM0ment"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-04-04"},{"lineNumber":9,"author":{"gitId":"HappyM0ment"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-04-04"},{"lineNumber":10,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":11,"author":{"gitId":"HappyM0ment"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-04-08"},{"lineNumber":12,"author":{"gitId":"HappyM0ment"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-04-08"},{"lineNumber":13,"author":{"gitId":"HappyM0ment"},"content":"import java.util.Collections;","lastModifiedDate":"2023-04-08"},{"lineNumber":14,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":15,"author":{"gitId":"HappyM0ment"},"content":"public class Command {","lastModifiedDate":"2023-04-04"},{"lineNumber":16,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":17,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":18,"author":{"gitId":"HappyM0ment"},"content":"     *  Attribute","lastModifiedDate":"2023-04-04"},{"lineNumber":19,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":20,"author":{"gitId":"HappyM0ment"},"content":"    private boolean byeAttribute;","lastModifiedDate":"2023-04-07"},{"lineNumber":21,"author":{"gitId":"HappyM0ment"},"content":"    private String[] seperatedInput;","lastModifiedDate":"2023-04-07"},{"lineNumber":22,"author":{"gitId":"HappyM0ment"},"content":"    private String commandName;","lastModifiedDate":"2023-04-07"},{"lineNumber":23,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":24,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":25,"author":{"gitId":"HappyM0ment"},"content":"     *  Constructor w 2 input","lastModifiedDate":"2023-04-04"},{"lineNumber":26,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":27,"author":{"gitId":"HappyM0ment"},"content":"    public Command(String[] seperatedInput) {","lastModifiedDate":"2023-04-04"},{"lineNumber":28,"author":{"gitId":"HappyM0ment"},"content":"        this.seperatedInput \u003d seperatedInput;","lastModifiedDate":"2023-04-04"},{"lineNumber":29,"author":{"gitId":"HappyM0ment"},"content":"        this.commandName \u003d seperatedInput[0];","lastModifiedDate":"2023-04-07"},{"lineNumber":30,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":31,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":32,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":33,"author":{"gitId":"HappyM0ment"},"content":"     *  Constructor w 1 input (Bye, List etc.)","lastModifiedDate":"2023-04-04"},{"lineNumber":34,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":35,"author":{"gitId":"HappyM0ment"},"content":"    public Command(String input) {","lastModifiedDate":"2023-04-04"},{"lineNumber":36,"author":{"gitId":"HappyM0ment"},"content":"        this.commandName \u003d input;","lastModifiedDate":"2023-04-07"},{"lineNumber":37,"author":{"gitId":"HappyM0ment"},"content":"        byeAttribute \u003d checkIsBye(input);","lastModifiedDate":"2023-04-07"},{"lineNumber":38,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":39,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":40,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-07"},{"lineNumber":41,"author":{"gitId":"HappyM0ment"},"content":"     *  This method checks if input is bye and returns TRUE if its bye; FALSE if it\u0027s not bye","lastModifiedDate":"2023-04-07"},{"lineNumber":42,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-07"},{"lineNumber":43,"author":{"gitId":"HappyM0ment"},"content":"    public boolean checkIsBye(String input) {","lastModifiedDate":"2023-04-07"},{"lineNumber":44,"author":{"gitId":"HappyM0ment"},"content":"        if (input.equalsIgnoreCase(\"bye\")) {","lastModifiedDate":"2023-04-04"},{"lineNumber":45,"author":{"gitId":"HappyM0ment"},"content":"            return true;","lastModifiedDate":"2023-04-04"},{"lineNumber":46,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-04"},{"lineNumber":47,"author":{"gitId":"HappyM0ment"},"content":"        else {","lastModifiedDate":"2023-04-04"},{"lineNumber":48,"author":{"gitId":"HappyM0ment"},"content":"            return false;","lastModifiedDate":"2023-04-04"},{"lineNumber":49,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-04"},{"lineNumber":50,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":51,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":52,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-08"},{"lineNumber":53,"author":{"gitId":"HappyM0ment"},"content":"     *  This method converts all values in the string to array","lastModifiedDate":"2023-04-08"},{"lineNumber":54,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-08"},{"lineNumber":55,"author":{"gitId":"HappyM0ment"},"content":"    public ArrayList\u003cInteger\u003e convertToIntArrayList(ArrayList\u003cString\u003e strArrayList) {","lastModifiedDate":"2023-04-08"},{"lineNumber":56,"author":{"gitId":"HappyM0ment"},"content":"        ArrayList\u003cInteger\u003e intArrayList \u003d new ArrayList\u003cInteger\u003e();","lastModifiedDate":"2023-04-08"},{"lineNumber":57,"author":{"gitId":"HappyM0ment"},"content":"        for(String s : strArrayList) {","lastModifiedDate":"2023-04-08"},{"lineNumber":58,"author":{"gitId":"HappyM0ment"},"content":"            intArrayList.add(Integer.valueOf(s));","lastModifiedDate":"2023-04-08"},{"lineNumber":59,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-08"},{"lineNumber":60,"author":{"gitId":"HappyM0ment"},"content":"        return intArrayList;","lastModifiedDate":"2023-04-08"},{"lineNumber":61,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-08"},{"lineNumber":62,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":63,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-08"},{"lineNumber":64,"author":{"gitId":"HappyM0ment"},"content":"     *  This method takes in an array and split them into integer Arraylist","lastModifiedDate":"2023-04-08"},{"lineNumber":65,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-08"},{"lineNumber":66,"author":{"gitId":"HappyM0ment"},"content":"    public ArrayList\u003cInteger\u003e convertAndSortDescending(String[] inputArray) {","lastModifiedDate":"2023-04-08"},{"lineNumber":67,"author":{"gitId":"HappyM0ment"},"content":"        ArrayList\u003cString\u003e separateMultipleIndex \u003d new ArrayList\u003cString\u003e(Arrays.asList(inputArray));","lastModifiedDate":"2023-04-08"},{"lineNumber":68,"author":{"gitId":"HappyM0ment"},"content":"        ArrayList\u003cInteger\u003e multipleIndexList \u003d convertToIntArrayList(separateMultipleIndex);","lastModifiedDate":"2023-04-08"},{"lineNumber":69,"author":{"gitId":"HappyM0ment"},"content":"        Collections.sort(multipleIndexList, Collections.reverseOrder());","lastModifiedDate":"2023-04-08"},{"lineNumber":70,"author":{"gitId":"HappyM0ment"},"content":"        return multipleIndexList;","lastModifiedDate":"2023-04-08"},{"lineNumber":71,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-08"},{"lineNumber":72,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":73,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-07"},{"lineNumber":74,"author":{"gitId":"HappyM0ment"},"content":"     *  This method performs all the key functions of the Duke programme","lastModifiedDate":"2023-04-07"},{"lineNumber":75,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-07"},{"lineNumber":76,"author":{"gitId":"HappyM0ment"},"content":"    public void execute(TaskList task, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-04-07"},{"lineNumber":77,"author":{"gitId":"HappyM0ment"},"content":"        if (!commandName.equalsIgnoreCase(\"bye\")) {","lastModifiedDate":"2023-04-07"},{"lineNumber":78,"author":{"gitId":"HappyM0ment"},"content":"            if (commandName.equalsIgnoreCase(\"list\")) {","lastModifiedDate":"2023-04-07"},{"lineNumber":79,"author":{"gitId":"HappyM0ment"},"content":"                task.printTaskList();","lastModifiedDate":"2023-04-07"},{"lineNumber":80,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-07"},{"lineNumber":81,"author":{"gitId":"HappyM0ment"},"content":"            else if (commandName.equalsIgnoreCase(\"mark\")) {","lastModifiedDate":"2023-04-07"},{"lineNumber":82,"author":{"gitId":"HappyM0ment"},"content":"                /**","lastModifiedDate":"2023-04-08"},{"lineNumber":83,"author":{"gitId":"HappyM0ment"},"content":"                 * split seperatedInput[1] by commas,","lastModifiedDate":"2023-04-08"},{"lineNumber":84,"author":{"gitId":"HappyM0ment"},"content":"                 * sort by descending using Collections lib,","lastModifiedDate":"2023-04-08"},{"lineNumber":85,"author":{"gitId":"HappyM0ment"},"content":"                 * iterate to retrieve the index to be marked \u0026","lastModifiedDate":"2023-04-08"},{"lineNumber":86,"author":{"gitId":"HappyM0ment"},"content":"                 * set Status of Task to Done","lastModifiedDate":"2023-04-08"},{"lineNumber":87,"author":{"gitId":"HappyM0ment"},"content":"                 */","lastModifiedDate":"2023-04-08"},{"lineNumber":88,"author":{"gitId":"HappyM0ment"},"content":"                ArrayList\u003cInteger\u003e multipleIndexList \u003d convertAndSortDescending(seperatedInput[1].split(\",\"));","lastModifiedDate":"2023-04-08"},{"lineNumber":89,"author":{"gitId":"HappyM0ment"},"content":"                for(int i \u003d 0; i \u003c multipleIndexList.size(); i++) {","lastModifiedDate":"2023-04-08"},{"lineNumber":90,"author":{"gitId":"HappyM0ment"},"content":"                    task.markTask(multipleIndexList.get(i)-1);","lastModifiedDate":"2023-04-08"},{"lineNumber":91,"author":{"gitId":"HappyM0ment"},"content":"                    ui.printEmptyLine();","lastModifiedDate":"2023-04-08"},{"lineNumber":92,"author":{"gitId":"HappyM0ment"},"content":"                }","lastModifiedDate":"2023-04-08"},{"lineNumber":93,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-07"},{"lineNumber":94,"author":{"gitId":"HappyM0ment"},"content":"            else if (commandName.equalsIgnoreCase(\"unmark\")) {","lastModifiedDate":"2023-04-07"},{"lineNumber":95,"author":{"gitId":"HappyM0ment"},"content":"                /**","lastModifiedDate":"2023-04-08"},{"lineNumber":96,"author":{"gitId":"HappyM0ment"},"content":"                 * split seperatedInput[1] by commas,","lastModifiedDate":"2023-04-08"},{"lineNumber":97,"author":{"gitId":"HappyM0ment"},"content":"                 * sort by descending using Collections lib,","lastModifiedDate":"2023-04-08"},{"lineNumber":98,"author":{"gitId":"HappyM0ment"},"content":"                 * iterate to retrieve the index to be marked \u0026","lastModifiedDate":"2023-04-08"},{"lineNumber":99,"author":{"gitId":"HappyM0ment"},"content":"                 * set Status of Task to undone","lastModifiedDate":"2023-04-08"},{"lineNumber":100,"author":{"gitId":"HappyM0ment"},"content":"                 */","lastModifiedDate":"2023-04-08"},{"lineNumber":101,"author":{"gitId":"HappyM0ment"},"content":"                ArrayList\u003cInteger\u003e multipleIndexList \u003d convertAndSortDescending(seperatedInput[1].split(\",\"));","lastModifiedDate":"2023-04-08"},{"lineNumber":102,"author":{"gitId":"HappyM0ment"},"content":"                for(int i \u003d 0; i \u003c multipleIndexList.size(); i++) {","lastModifiedDate":"2023-04-08"},{"lineNumber":103,"author":{"gitId":"HappyM0ment"},"content":"                    task.unmarkTask(multipleIndexList.get(i)-1);","lastModifiedDate":"2023-04-08"},{"lineNumber":104,"author":{"gitId":"HappyM0ment"},"content":"                    ui.printEmptyLine();","lastModifiedDate":"2023-04-08"},{"lineNumber":105,"author":{"gitId":"HappyM0ment"},"content":"                }","lastModifiedDate":"2023-04-08"},{"lineNumber":106,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-07"},{"lineNumber":107,"author":{"gitId":"HappyM0ment"},"content":"            else if (commandName.equalsIgnoreCase(\"delete\")) {","lastModifiedDate":"2023-04-07"},{"lineNumber":108,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":109,"author":{"gitId":"HappyM0ment"},"content":"                /**","lastModifiedDate":"2023-04-08"},{"lineNumber":110,"author":{"gitId":"HappyM0ment"},"content":"                 * split seperatedInput[1] by commas,","lastModifiedDate":"2023-04-08"},{"lineNumber":111,"author":{"gitId":"HappyM0ment"},"content":"                 * sort by descending using Collections lib,","lastModifiedDate":"2023-04-08"},{"lineNumber":112,"author":{"gitId":"HappyM0ment"},"content":"                 * iterate to retrieve the index to be marked \u0026","lastModifiedDate":"2023-04-08"},{"lineNumber":113,"author":{"gitId":"HappyM0ment"},"content":"                 * delete them","lastModifiedDate":"2023-04-08"},{"lineNumber":114,"author":{"gitId":"HappyM0ment"},"content":"                 */","lastModifiedDate":"2023-04-08"},{"lineNumber":115,"author":{"gitId":"HappyM0ment"},"content":"                ArrayList\u003cInteger\u003e multipleIndexList \u003d convertAndSortDescending(seperatedInput[1].split(\",\"));","lastModifiedDate":"2023-04-08"},{"lineNumber":116,"author":{"gitId":"HappyM0ment"},"content":"                for(int i \u003d 0; i \u003c multipleIndexList.size(); i++) {","lastModifiedDate":"2023-04-08"},{"lineNumber":117,"author":{"gitId":"HappyM0ment"},"content":"                    task.deleteTask(multipleIndexList.get(i)-1);","lastModifiedDate":"2023-04-08"},{"lineNumber":118,"author":{"gitId":"HappyM0ment"},"content":"                    ui.printEmptyLine();","lastModifiedDate":"2023-04-08"},{"lineNumber":119,"author":{"gitId":"HappyM0ment"},"content":"                }","lastModifiedDate":"2023-04-08"},{"lineNumber":120,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-07"},{"lineNumber":121,"author":{"gitId":"HappyM0ment"},"content":"            else if (commandName.equalsIgnoreCase(\"deadline\")) {","lastModifiedDate":"2023-04-07"},{"lineNumber":122,"author":{"gitId":"HappyM0ment"},"content":"                /**","lastModifiedDate":"2023-04-08"},{"lineNumber":123,"author":{"gitId":"HappyM0ment"},"content":"                 * Using indexOf method to extract description \u0026 dateline","lastModifiedDate":"2023-04-08"},{"lineNumber":124,"author":{"gitId":"HappyM0ment"},"content":"                 * nextSeparated array will store value in such index","lastModifiedDate":"2023-04-08"},{"lineNumber":125,"author":{"gitId":"HappyM0ment"},"content":"                 * nextSeparated[0] \u003d description;","lastModifiedDate":"2023-04-08"},{"lineNumber":126,"author":{"gitId":"HappyM0ment"},"content":"                 * nextSeparated[1] \u003d deadline;","lastModifiedDate":"2023-04-08"},{"lineNumber":127,"author":{"gitId":"HappyM0ment"},"content":"                 */","lastModifiedDate":"2023-04-08"},{"lineNumber":128,"author":{"gitId":"HappyM0ment"},"content":"                String [] nextSeparated \u003d seperatedInput[1].split(\"/by\");","lastModifiedDate":"2023-04-07"},{"lineNumber":129,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":130,"author":{"gitId":"HappyM0ment"},"content":"                Deadline newDeadline \u003d new Deadline(nextSeparated[0].trim(), nextSeparated[1].trim().trim());","lastModifiedDate":"2023-04-08"},{"lineNumber":131,"author":{"gitId":"HappyM0ment"},"content":"                task.addNewTask(newDeadline);","lastModifiedDate":"2023-04-07"},{"lineNumber":132,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-04"},{"lineNumber":133,"author":{"gitId":"HappyM0ment"},"content":"            else if(commandName.equalsIgnoreCase(\"event\")) {","lastModifiedDate":"2023-04-07"},{"lineNumber":134,"author":{"gitId":"HappyM0ment"},"content":"                /**","lastModifiedDate":"2023-04-08"},{"lineNumber":135,"author":{"gitId":"HappyM0ment"},"content":"                 * Using indexOf method to extract description \u0026 start/end timing","lastModifiedDate":"2023-04-08"},{"lineNumber":136,"author":{"gitId":"HappyM0ment"},"content":"                 * nextSeparated array will store value in such index","lastModifiedDate":"2023-04-08"},{"lineNumber":137,"author":{"gitId":"HappyM0ment"},"content":"                 * @param nextSeparated[0] \u003d description;","lastModifiedDate":"2023-04-08"},{"lineNumber":138,"author":{"gitId":"HappyM0ment"},"content":"                 * @param nextSeparated[1] \u003d start/end timing;","lastModifiedDate":"2023-04-08"},{"lineNumber":139,"author":{"gitId":"HappyM0ment"},"content":"                 */","lastModifiedDate":"2023-04-08"},{"lineNumber":140,"author":{"gitId":"HappyM0ment"},"content":"                String [] nextSeparated \u003d seperatedInput[1].split(\"/from\");","lastModifiedDate":"2023-04-07"},{"lineNumber":141,"author":{"gitId":"HappyM0ment"},"content":"                String [] separatedTiming \u003d nextSeparated[1].split(\"/to\");","lastModifiedDate":"2023-04-07"},{"lineNumber":142,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":143,"author":{"gitId":"HappyM0ment"},"content":"                Event newEvent \u003d new Event(nextSeparated[0].trim(), separatedTiming[0].trim(), separatedTiming[1].trim());","lastModifiedDate":"2023-04-07"},{"lineNumber":144,"author":{"gitId":"HappyM0ment"},"content":"                task.addNewTask(newEvent);","lastModifiedDate":"2023-04-07"},{"lineNumber":145,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-07"},{"lineNumber":146,"author":{"gitId":"HappyM0ment"},"content":"            else if(commandName.equalsIgnoreCase(\"todo\")) {","lastModifiedDate":"2023-04-07"},{"lineNumber":147,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":148,"author":{"gitId":"HappyM0ment"},"content":"                Todo newTodo \u003d new Todo(seperatedInput[1].trim());","lastModifiedDate":"2023-04-08"},{"lineNumber":149,"author":{"gitId":"HappyM0ment"},"content":"                task.addNewTask(newTodo);","lastModifiedDate":"2023-04-07"},{"lineNumber":150,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-07"},{"lineNumber":151,"author":{"gitId":"HappyM0ment"},"content":"            else if(commandName.equalsIgnoreCase(\"find\"))","lastModifiedDate":"2023-04-08"},{"lineNumber":152,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-04-08"},{"lineNumber":153,"author":{"gitId":"HappyM0ment"},"content":"                task.findItemInList(seperatedInput[1].trim());","lastModifiedDate":"2023-04-08"},{"lineNumber":154,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-08"},{"lineNumber":155,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":156,"author":{"gitId":"HappyM0ment"},"content":"            /**","lastModifiedDate":"2023-04-08"},{"lineNumber":157,"author":{"gitId":"HappyM0ment"},"content":"             *  save task list to txt","lastModifiedDate":"2023-04-08"},{"lineNumber":158,"author":{"gitId":"HappyM0ment"},"content":"             */","lastModifiedDate":"2023-04-08"},{"lineNumber":159,"author":{"gitId":"HappyM0ment"},"content":"            storage.saveFile(task);","lastModifiedDate":"2023-04-07"},{"lineNumber":160,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-07"},{"lineNumber":161,"author":{"gitId":"HappyM0ment"},"content":"        else {","lastModifiedDate":"2023-04-07"},{"lineNumber":162,"author":{"gitId":"HappyM0ment"},"content":"            byeAttribute \u003d true;","lastModifiedDate":"2023-04-07"},{"lineNumber":163,"author":{"gitId":"HappyM0ment"},"content":"            ui.showByeMeg();","lastModifiedDate":"2023-04-07"},{"lineNumber":164,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-07"},{"lineNumber":165,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-07"},{"lineNumber":166,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":167,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-07"},{"lineNumber":168,"author":{"gitId":"HappyM0ment"},"content":"     *  This method returns the current status of byeAttribute","lastModifiedDate":"2023-04-07"},{"lineNumber":169,"author":{"gitId":"HappyM0ment"},"content":"     *  returns TRUE if it is bye","lastModifiedDate":"2023-04-07"},{"lineNumber":170,"author":{"gitId":"HappyM0ment"},"content":"     *  returns FALSE if it is not bye","lastModifiedDate":"2023-04-07"},{"lineNumber":171,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-07"},{"lineNumber":172,"author":{"gitId":"HappyM0ment"},"content":"    public boolean isItBye() {","lastModifiedDate":"2023-04-07"},{"lineNumber":173,"author":{"gitId":"HappyM0ment"},"content":"        return byeAttribute;","lastModifiedDate":"2023-04-04"},{"lineNumber":174,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":175,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":176,"author":{"gitId":"HappyM0ment"},"content":"}","lastModifiedDate":"2023-04-04"}],"authorContributionMap":{"HappyM0ment":176}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HappyM0ment"},"content":"/**","lastModifiedDate":"2023-04-04"},{"lineNumber":2,"author":{"gitId":"HappyM0ment"},"content":" *  DONE BY: A0227169X; ANG JIA JIN, GABRIEL","lastModifiedDate":"2023-04-04"},{"lineNumber":3,"author":{"gitId":"HappyM0ment"},"content":" */","lastModifiedDate":"2023-04-04"},{"lineNumber":4,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":5,"author":{"gitId":"HappyM0ment"},"content":"package duke.parser;","lastModifiedDate":"2023-04-04"},{"lineNumber":6,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":7,"author":{"gitId":"HappyM0ment"},"content":"import duke.DukeException;","lastModifiedDate":"2023-04-04"},{"lineNumber":8,"author":{"gitId":"HappyM0ment"},"content":"import duke.command.Command;","lastModifiedDate":"2023-04-04"},{"lineNumber":9,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":10,"author":{"gitId":"HappyM0ment"},"content":"public class Parser {","lastModifiedDate":"2023-04-04"},{"lineNumber":11,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":12,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":13,"author":{"gitId":"HappyM0ment"},"content":"     *  Attribute","lastModifiedDate":"2023-04-04"},{"lineNumber":14,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":15,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":16,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":17,"author":{"gitId":"HappyM0ment"},"content":"     *  Constructor","lastModifiedDate":"2023-04-04"},{"lineNumber":18,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":19,"author":{"gitId":"HappyM0ment"},"content":"    public Parser() {","lastModifiedDate":"2023-04-04"},{"lineNumber":20,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":21,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":22,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":23,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":24,"author":{"gitId":"HappyM0ment"},"content":"     *  This method will make sense of the command given and return a command object","lastModifiedDate":"2023-04-04"},{"lineNumber":25,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":26,"author":{"gitId":"HappyM0ment"},"content":"    public static Command parse(String fullCommand) throws DukeException {","lastModifiedDate":"2023-04-04"},{"lineNumber":27,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":28,"author":{"gitId":"HappyM0ment"},"content":"        if(fullCommand.equalsIgnoreCase(\"bye\") || fullCommand.equalsIgnoreCase(\"list\")) {","lastModifiedDate":"2023-04-04"},{"lineNumber":29,"author":{"gitId":"HappyM0ment"},"content":"            //creating Command object","lastModifiedDate":"2023-04-04"},{"lineNumber":30,"author":{"gitId":"HappyM0ment"},"content":"            Command c \u003d new Command(fullCommand);","lastModifiedDate":"2023-04-04"},{"lineNumber":31,"author":{"gitId":"HappyM0ment"},"content":"            return c;","lastModifiedDate":"2023-04-04"},{"lineNumber":32,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-04"},{"lineNumber":33,"author":{"gitId":"HappyM0ment"},"content":"        else {","lastModifiedDate":"2023-04-04"},{"lineNumber":34,"author":{"gitId":"HappyM0ment"},"content":"            try {","lastModifiedDate":"2023-04-04"},{"lineNumber":35,"author":{"gitId":"HappyM0ment"},"content":"                String [] seperatedInput \u003d identifyFunctionsValidateInput(fullCommand);","lastModifiedDate":"2023-04-04"},{"lineNumber":36,"author":{"gitId":"HappyM0ment"},"content":"                //creating Command object","lastModifiedDate":"2023-04-04"},{"lineNumber":37,"author":{"gitId":"HappyM0ment"},"content":"                Command c \u003d new Command(seperatedInput);","lastModifiedDate":"2023-04-04"},{"lineNumber":38,"author":{"gitId":"HappyM0ment"},"content":"                return c;","lastModifiedDate":"2023-04-04"},{"lineNumber":39,"author":{"gitId":"HappyM0ment"},"content":"            } catch (DukeException de) {","lastModifiedDate":"2023-04-04"},{"lineNumber":40,"author":{"gitId":"HappyM0ment"},"content":"                throw new DukeException(de.getMessage());","lastModifiedDate":"2023-04-04"},{"lineNumber":41,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-04"},{"lineNumber":42,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-04"},{"lineNumber":43,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":44,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":45,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":46,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":47,"author":{"gitId":"HappyM0ment"},"content":"     *  Helper method","lastModifiedDate":"2023-04-04"},{"lineNumber":48,"author":{"gitId":"HappyM0ment"},"content":"     *  isNumber() method will check input if it is a Number","lastModifiedDate":"2023-04-04"},{"lineNumber":49,"author":{"gitId":"HappyM0ment"},"content":"     *  Returns TRUE if it is a number; FALSE if it is a String","lastModifiedDate":"2023-04-04"},{"lineNumber":50,"author":{"gitId":"HappyM0ment"},"content":"     *  Logic:      Integer.parseInt will throw NumberFormatException if it is unable to convert input to Integer","lastModifiedDate":"2023-04-04"},{"lineNumber":51,"author":{"gitId":"HappyM0ment"},"content":"     *              Once NumberFormatException is caught, return FALSE as it is not a Number","lastModifiedDate":"2023-04-04"},{"lineNumber":52,"author":{"gitId":"HappyM0ment"},"content":"     *  Reference:  https://stackoverflow.com/questions/1102891/how-to-check-if-a-string-is-numeric-in-java","lastModifiedDate":"2023-04-04"},{"lineNumber":53,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":54,"author":{"gitId":"HappyM0ment"},"content":"    public static boolean isNumber(String strToCheck)","lastModifiedDate":"2023-04-04"},{"lineNumber":55,"author":{"gitId":"HappyM0ment"},"content":"    {","lastModifiedDate":"2023-04-04"},{"lineNumber":56,"author":{"gitId":"HappyM0ment"},"content":"        try {","lastModifiedDate":"2023-04-04"},{"lineNumber":57,"author":{"gitId":"HappyM0ment"},"content":"            Integer.parseInt(strToCheck);","lastModifiedDate":"2023-04-04"},{"lineNumber":58,"author":{"gitId":"HappyM0ment"},"content":"            return true;","lastModifiedDate":"2023-04-04"},{"lineNumber":59,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-04"},{"lineNumber":60,"author":{"gitId":"HappyM0ment"},"content":"        catch(NumberFormatException exception)","lastModifiedDate":"2023-04-04"},{"lineNumber":61,"author":{"gitId":"HappyM0ment"},"content":"        {","lastModifiedDate":"2023-04-04"},{"lineNumber":62,"author":{"gitId":"HappyM0ment"},"content":"            return false;","lastModifiedDate":"2023-04-04"},{"lineNumber":63,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-04"},{"lineNumber":64,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":65,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":66,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":67,"author":{"gitId":"HappyM0ment"},"content":"     *  Helper method","lastModifiedDate":"2023-04-04"},{"lineNumber":68,"author":{"gitId":"HappyM0ment"},"content":"     *  identifyFunctionsValidateInput() method will perform 2 actions:","lastModifiedDate":"2023-04-04"},{"lineNumber":69,"author":{"gitId":"HappyM0ment"},"content":"     *  1) return Functions and the parameters","lastModifiedDate":"2023-04-04"},{"lineNumber":70,"author":{"gitId":"HappyM0ment"},"content":"     *  functions: \"duke.Deadline\" \"duke.Event\" \"To-Do\" \"Mark\" \"Unmark\"","lastModifiedDate":"2023-04-04"},{"lineNumber":71,"author":{"gitId":"HappyM0ment"},"content":"     *  Outcome: separatedInput[0] \u003d Functions","lastModifiedDate":"2023-04-04"},{"lineNumber":72,"author":{"gitId":"HappyM0ment"},"content":"     *           separatedInput[1] \u003d Parameters","lastModifiedDate":"2023-04-04"},{"lineNumber":73,"author":{"gitId":"HappyM0ment"},"content":"     *","lastModifiedDate":"2023-04-04"},{"lineNumber":74,"author":{"gitId":"HappyM0ment"},"content":"     *  2) validates the input to catch all kinds of error such as","lastModifiedDate":"2023-04-04"},{"lineNumber":75,"author":{"gitId":"HappyM0ment"},"content":"     *  - Empty Parameters","lastModifiedDate":"2023-04-04"},{"lineNumber":76,"author":{"gitId":"HappyM0ment"},"content":"     *  - Invalid Functions","lastModifiedDate":"2023-04-04"},{"lineNumber":77,"author":{"gitId":"HappyM0ment"},"content":"     *  Deadline functions:","lastModifiedDate":"2023-04-04"},{"lineNumber":78,"author":{"gitId":"HappyM0ment"},"content":"     *  - Missing /by parameters","lastModifiedDate":"2023-04-04"},{"lineNumber":79,"author":{"gitId":"HappyM0ment"},"content":"     *  - Missing deadline","lastModifiedDate":"2023-04-04"},{"lineNumber":80,"author":{"gitId":"HappyM0ment"},"content":"     *  Events functions:","lastModifiedDate":"2023-04-04"},{"lineNumber":81,"author":{"gitId":"HappyM0ment"},"content":"     *  - Missing /from \u0026 /to parameters","lastModifiedDate":"2023-04-04"},{"lineNumber":82,"author":{"gitId":"HappyM0ment"},"content":"     *  - Missing duration","lastModifiedDate":"2023-04-04"},{"lineNumber":83,"author":{"gitId":"HappyM0ment"},"content":"     *  Mark / Unmark / Delete functions:","lastModifiedDate":"2023-04-04"},{"lineNumber":84,"author":{"gitId":"HappyM0ment"},"content":"     *  - Missing value for mark \u0026 unmark","lastModifiedDate":"2023-04-04"},{"lineNumber":85,"author":{"gitId":"HappyM0ment"},"content":"     *  - Each value (if more than 1, must be a number or more than 0)","lastModifiedDate":"2023-04-08"},{"lineNumber":86,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":87,"author":{"gitId":"HappyM0ment"},"content":"    public static String[] identifyFunctionsValidateInput(String stringInput) throws DukeException","lastModifiedDate":"2023-04-04"},{"lineNumber":88,"author":{"gitId":"HappyM0ment"},"content":"    {","lastModifiedDate":"2023-04-04"},{"lineNumber":89,"author":{"gitId":"HappyM0ment"},"content":"        String[] separatedInput \u003d stringInput.split(\" \", 2);","lastModifiedDate":"2023-04-04"},{"lineNumber":90,"author":{"gitId":"HappyM0ment"},"content":"        if(separatedInput[0].trim().equalsIgnoreCase(\"Deadline\"))","lastModifiedDate":"2023-04-08"},{"lineNumber":91,"author":{"gitId":"HappyM0ment"},"content":"        {","lastModifiedDate":"2023-04-04"},{"lineNumber":92,"author":{"gitId":"HappyM0ment"},"content":"            if (separatedInput.length \u003c 2)","lastModifiedDate":"2023-04-04"},{"lineNumber":93,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-04-04"},{"lineNumber":94,"author":{"gitId":"HappyM0ment"},"content":"                throw new DukeException(\"☹ OOPS!!! The description of a \" + separatedInput[0].trim() + \" cannot be empty.\");","lastModifiedDate":"2023-04-08"},{"lineNumber":95,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-04"},{"lineNumber":96,"author":{"gitId":"HappyM0ment"},"content":"            else if (!separatedInput[1].contains(\"/by\"))","lastModifiedDate":"2023-04-04"},{"lineNumber":97,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-04-04"},{"lineNumber":98,"author":{"gitId":"HappyM0ment"},"content":"                throw new DukeException(\"☹ OOPS!!! \" + separatedInput[0].trim() + \" is missing a \\\"/by\\\" for deadline\");","lastModifiedDate":"2023-04-08"},{"lineNumber":99,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-04"},{"lineNumber":100,"author":{"gitId":"HappyM0ment"},"content":"            else if(separatedInput[1].split(\"/by\").length \u003c 2)","lastModifiedDate":"2023-04-04"},{"lineNumber":101,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-04-04"},{"lineNumber":102,"author":{"gitId":"HappyM0ment"},"content":"                throw new DukeException(\"☹ OOPS!!! \" + separatedInput[0].trim() + \" is missing a deadline\");","lastModifiedDate":"2023-04-08"},{"lineNumber":103,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-04"},{"lineNumber":104,"author":{"gitId":"HappyM0ment"},"content":"            else","lastModifiedDate":"2023-04-04"},{"lineNumber":105,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-04-04"},{"lineNumber":106,"author":{"gitId":"HappyM0ment"},"content":"                return separatedInput;","lastModifiedDate":"2023-04-04"},{"lineNumber":107,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-04"},{"lineNumber":108,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-04"},{"lineNumber":109,"author":{"gitId":"HappyM0ment"},"content":"        else if(separatedInput[0].trim().equalsIgnoreCase(\"Event\"))","lastModifiedDate":"2023-04-08"},{"lineNumber":110,"author":{"gitId":"HappyM0ment"},"content":"        {","lastModifiedDate":"2023-04-04"},{"lineNumber":111,"author":{"gitId":"HappyM0ment"},"content":"            if (separatedInput.length \u003c 2)","lastModifiedDate":"2023-04-04"},{"lineNumber":112,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-04-04"},{"lineNumber":113,"author":{"gitId":"HappyM0ment"},"content":"                throw new DukeException(\"☹ OOPS!!! The description of a \" + separatedInput[0].trim() + \" cannot be empty.\");","lastModifiedDate":"2023-04-08"},{"lineNumber":114,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-04"},{"lineNumber":115,"author":{"gitId":"HappyM0ment"},"content":"            else if (!separatedInput[1].contains(\"/from\"))","lastModifiedDate":"2023-04-04"},{"lineNumber":116,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-04-04"},{"lineNumber":117,"author":{"gitId":"HappyM0ment"},"content":"                throw new DukeException(\"☹ OOPS!!! \" + separatedInput[0].trim() + \" is missing a \\\"/from\\\" for Event\");","lastModifiedDate":"2023-04-08"},{"lineNumber":118,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-04"},{"lineNumber":119,"author":{"gitId":"HappyM0ment"},"content":"            else if (!separatedInput[1].contains(\"/to\"))","lastModifiedDate":"2023-04-04"},{"lineNumber":120,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-04-04"},{"lineNumber":121,"author":{"gitId":"HappyM0ment"},"content":"                throw new DukeException(\"☹ OOPS!!! \" + separatedInput[0].trim() + \" is missing a \\\"/to\\\" for Event\");","lastModifiedDate":"2023-04-08"},{"lineNumber":122,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-04"},{"lineNumber":123,"author":{"gitId":"HappyM0ment"},"content":"            else","lastModifiedDate":"2023-04-04"},{"lineNumber":124,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-04-04"},{"lineNumber":125,"author":{"gitId":"HappyM0ment"},"content":"                //separate \"/from\" \u0026 \"/to\" to check for variable before returning separatedInput","lastModifiedDate":"2023-04-04"},{"lineNumber":126,"author":{"gitId":"HappyM0ment"},"content":"                return separatedInput;","lastModifiedDate":"2023-04-04"},{"lineNumber":127,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-04"},{"lineNumber":128,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-04"},{"lineNumber":129,"author":{"gitId":"HappyM0ment"},"content":"        else if(separatedInput[0].trim().equalsIgnoreCase(\"Todo\"))","lastModifiedDate":"2023-04-08"},{"lineNumber":130,"author":{"gitId":"HappyM0ment"},"content":"        {","lastModifiedDate":"2023-04-04"},{"lineNumber":131,"author":{"gitId":"HappyM0ment"},"content":"            if (separatedInput.length \u003c 2)","lastModifiedDate":"2023-04-04"},{"lineNumber":132,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-04-04"},{"lineNumber":133,"author":{"gitId":"HappyM0ment"},"content":"                throw new DukeException(\"☹ OOPS!!! The description of a \" + separatedInput[0].trim() + \" cannot be empty.\");","lastModifiedDate":"2023-04-08"},{"lineNumber":134,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-04"},{"lineNumber":135,"author":{"gitId":"HappyM0ment"},"content":"            else","lastModifiedDate":"2023-04-04"},{"lineNumber":136,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-04-04"},{"lineNumber":137,"author":{"gitId":"HappyM0ment"},"content":"                return separatedInput;","lastModifiedDate":"2023-04-04"},{"lineNumber":138,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-04"},{"lineNumber":139,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-04"},{"lineNumber":140,"author":{"gitId":"HappyM0ment"},"content":"        else if (separatedInput[0].trim().equalsIgnoreCase(\"Mark\") || separatedInput[0].trim().equalsIgnoreCase(\"Unmark\") || separatedInput[0].trim().equalsIgnoreCase(\"Delete\"))","lastModifiedDate":"2023-04-08"},{"lineNumber":141,"author":{"gitId":"HappyM0ment"},"content":"        {","lastModifiedDate":"2023-04-04"},{"lineNumber":142,"author":{"gitId":"HappyM0ment"},"content":"            if (separatedInput.length \u003c 2)","lastModifiedDate":"2023-04-04"},{"lineNumber":143,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-04-04"},{"lineNumber":144,"author":{"gitId":"HappyM0ment"},"content":"                throw new DukeException(\"☹ OOPS!!! The value after \" + separatedInput[0].trim() + \" cannot be empty.\");","lastModifiedDate":"2023-04-08"},{"lineNumber":145,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-04"},{"lineNumber":146,"author":{"gitId":"HappyM0ment"},"content":"            else","lastModifiedDate":"2023-04-08"},{"lineNumber":147,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-04-04"},{"lineNumber":148,"author":{"gitId":"HappyM0ment"},"content":"                String[] separateMultipleIndex \u003d separatedInput[1].split(\",\");","lastModifiedDate":"2023-04-08"},{"lineNumber":149,"author":{"gitId":"HappyM0ment"},"content":"                for(int i \u003d 0; i \u003c separateMultipleIndex.length; i++)","lastModifiedDate":"2023-04-08"},{"lineNumber":150,"author":{"gitId":"HappyM0ment"},"content":"                {","lastModifiedDate":"2023-04-08"},{"lineNumber":151,"author":{"gitId":"HappyM0ment"},"content":"                    if(!isNumber(separateMultipleIndex[i].trim()))","lastModifiedDate":"2023-04-08"},{"lineNumber":152,"author":{"gitId":"HappyM0ment"},"content":"                    {","lastModifiedDate":"2023-04-07"},{"lineNumber":153,"author":{"gitId":"HappyM0ment"},"content":"                        throw new DukeException(\"☹ OOPS!!! The value \" + separateMultipleIndex[i].trim() + \" must be a number.\");","lastModifiedDate":"2023-04-08"},{"lineNumber":154,"author":{"gitId":"HappyM0ment"},"content":"                    }","lastModifiedDate":"2023-04-07"},{"lineNumber":155,"author":{"gitId":"HappyM0ment"},"content":"                    else if (Integer.parseInt(separateMultipleIndex[i].trim()) \u003c\u003d 0)","lastModifiedDate":"2023-04-08"},{"lineNumber":156,"author":{"gitId":"HappyM0ment"},"content":"                    {","lastModifiedDate":"2023-04-04"},{"lineNumber":157,"author":{"gitId":"HappyM0ment"},"content":"                        throw new DukeException(\"☹ OOPS!!! The value \" + separateMultipleIndex[i].trim() + \" cannot be smaller than 0.\");","lastModifiedDate":"2023-04-08"},{"lineNumber":158,"author":{"gitId":"HappyM0ment"},"content":"                    }","lastModifiedDate":"2023-04-08"},{"lineNumber":159,"author":{"gitId":"HappyM0ment"},"content":"                }","lastModifiedDate":"2023-04-08"},{"lineNumber":160,"author":{"gitId":"HappyM0ment"},"content":"                return separatedInput;","lastModifiedDate":"2023-04-04"},{"lineNumber":161,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-04"},{"lineNumber":162,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-04"},{"lineNumber":163,"author":{"gitId":"HappyM0ment"},"content":"        else if(separatedInput[0].trim().equalsIgnoreCase(\"Find\"))","lastModifiedDate":"2023-04-08"},{"lineNumber":164,"author":{"gitId":"HappyM0ment"},"content":"        {","lastModifiedDate":"2023-04-08"},{"lineNumber":165,"author":{"gitId":"HappyM0ment"},"content":"            if (separatedInput.length \u003c 2)","lastModifiedDate":"2023-04-08"},{"lineNumber":166,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-04-08"},{"lineNumber":167,"author":{"gitId":"HappyM0ment"},"content":"                throw new DukeException(\"☹ OOPS!!! Find command is unable to find an empty input.\");","lastModifiedDate":"2023-04-08"},{"lineNumber":168,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-08"},{"lineNumber":169,"author":{"gitId":"HappyM0ment"},"content":"            else","lastModifiedDate":"2023-04-08"},{"lineNumber":170,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-04-08"},{"lineNumber":171,"author":{"gitId":"HappyM0ment"},"content":"                return separatedInput;","lastModifiedDate":"2023-04-08"},{"lineNumber":172,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-08"},{"lineNumber":173,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-08"},{"lineNumber":174,"author":{"gitId":"HappyM0ment"},"content":"        else","lastModifiedDate":"2023-04-04"},{"lineNumber":175,"author":{"gitId":"HappyM0ment"},"content":"        {","lastModifiedDate":"2023-04-04"},{"lineNumber":176,"author":{"gitId":"HappyM0ment"},"content":"            //any other starting words besides the functions list, throws error","lastModifiedDate":"2023-04-04"},{"lineNumber":177,"author":{"gitId":"HappyM0ment"},"content":"            throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-04-04"},{"lineNumber":178,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-04"},{"lineNumber":179,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":180,"author":{"gitId":"HappyM0ment"},"content":"}","lastModifiedDate":"2023-04-04"}],"authorContributionMap":{"HappyM0ment":180}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HappyM0ment"},"content":"/**","lastModifiedDate":"2023-04-04"},{"lineNumber":2,"author":{"gitId":"HappyM0ment"},"content":" *  DONE BY: A0227169X; ANG JIA JIN, GABRIEL","lastModifiedDate":"2023-04-04"},{"lineNumber":3,"author":{"gitId":"HappyM0ment"},"content":" */","lastModifiedDate":"2023-04-04"},{"lineNumber":4,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":5,"author":{"gitId":"HappyM0ment"},"content":"package duke.storage;","lastModifiedDate":"2023-04-04"},{"lineNumber":6,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":7,"author":{"gitId":"HappyM0ment"},"content":"import duke.*;","lastModifiedDate":"2023-04-07"},{"lineNumber":8,"author":{"gitId":"HappyM0ment"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-04-07"},{"lineNumber":9,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":10,"author":{"gitId":"HappyM0ment"},"content":"import java.io.File;","lastModifiedDate":"2023-04-04"},{"lineNumber":11,"author":{"gitId":"HappyM0ment"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-04-07"},{"lineNumber":12,"author":{"gitId":"HappyM0ment"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-04-04"},{"lineNumber":13,"author":{"gitId":"HappyM0ment"},"content":"import java.io.IOException;","lastModifiedDate":"2023-04-07"},{"lineNumber":14,"author":{"gitId":"HappyM0ment"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-04-04"},{"lineNumber":15,"author":{"gitId":"HappyM0ment"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-04-07"},{"lineNumber":16,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":17,"author":{"gitId":"HappyM0ment"},"content":"public class Storage {","lastModifiedDate":"2023-04-04"},{"lineNumber":18,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":19,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":20,"author":{"gitId":"HappyM0ment"},"content":"     *  Attribute","lastModifiedDate":"2023-04-04"},{"lineNumber":21,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":22,"author":{"gitId":"HappyM0ment"},"content":"    private static String filePath;","lastModifiedDate":"2023-04-04"},{"lineNumber":23,"author":{"gitId":"HappyM0ment"},"content":"    private static File fileItem;","lastModifiedDate":"2023-04-04"},{"lineNumber":24,"author":{"gitId":"HappyM0ment"},"content":"    private static ArrayList\u003cTask\u003e listOfTask;","lastModifiedDate":"2023-04-07"},{"lineNumber":25,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":26,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":27,"author":{"gitId":"HappyM0ment"},"content":"     *  Constructor","lastModifiedDate":"2023-04-04"},{"lineNumber":28,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":29,"author":{"gitId":"HappyM0ment"},"content":"    public Storage(String pathFile) {","lastModifiedDate":"2023-04-04"},{"lineNumber":30,"author":{"gitId":"HappyM0ment"},"content":"        this.filePath \u003d pathFile;","lastModifiedDate":"2023-04-04"},{"lineNumber":31,"author":{"gitId":"HappyM0ment"},"content":"        fileItem \u003d new File(pathFile);","lastModifiedDate":"2023-04-04"},{"lineNumber":32,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":33,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":34,"author":{"gitId":"HappyM0ment"},"content":"    public static ArrayList\u003cTask\u003e load() throws DukeException {","lastModifiedDate":"2023-04-04"},{"lineNumber":35,"author":{"gitId":"HappyM0ment"},"content":"        if (!fileItem.exists() || !fileItem.isFile()) {","lastModifiedDate":"2023-04-07"},{"lineNumber":36,"author":{"gitId":"HappyM0ment"},"content":"            throw new DukeException(\"☹ OOPS!!! File is empty\");","lastModifiedDate":"2023-04-04"},{"lineNumber":37,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-04"},{"lineNumber":38,"author":{"gitId":"HappyM0ment"},"content":"        else {","lastModifiedDate":"2023-04-04"},{"lineNumber":39,"author":{"gitId":"HappyM0ment"},"content":"            listOfTask \u003d new ArrayList\u003cTask\u003e(); //string initialize Task arraylist","lastModifiedDate":"2023-04-07"},{"lineNumber":40,"author":{"gitId":"HappyM0ment"},"content":"            try {","lastModifiedDate":"2023-04-07"},{"lineNumber":41,"author":{"gitId":"HappyM0ment"},"content":"                Scanner scan \u003d new Scanner(fileItem);","lastModifiedDate":"2023-04-07"},{"lineNumber":42,"author":{"gitId":"HappyM0ment"},"content":"                while (scan.hasNext()) {","lastModifiedDate":"2023-04-07"},{"lineNumber":43,"author":{"gitId":"HappyM0ment"},"content":"                    String itemEntry \u003d scan.nextLine();","lastModifiedDate":"2023-04-07"},{"lineNumber":44,"author":{"gitId":"HappyM0ment"},"content":"                    Task newTask;","lastModifiedDate":"2023-04-07"},{"lineNumber":45,"author":{"gitId":"HappyM0ment"},"content":"                    String [] splitEntryValue \u003d itemEntry.split(\":\");","lastModifiedDate":"2023-04-07"},{"lineNumber":46,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":47,"author":{"gitId":"HappyM0ment"},"content":"                    if(splitEntryValue[0].trim().equalsIgnoreCase(\"T\")) {","lastModifiedDate":"2023-04-07"},{"lineNumber":48,"author":{"gitId":"HappyM0ment"},"content":"                        /**","lastModifiedDate":"2023-04-07"},{"lineNumber":49,"author":{"gitId":"HappyM0ment"},"content":"                         * @param splitEntryValue[0] \u003d T","lastModifiedDate":"2023-04-07"},{"lineNumber":50,"author":{"gitId":"HappyM0ment"},"content":"                         * @param splitEntryValue[1] \u003d 1 - done, 0 - not done","lastModifiedDate":"2023-04-07"},{"lineNumber":51,"author":{"gitId":"HappyM0ment"},"content":"                         * @param splitEntryValue[2] \u003d Description","lastModifiedDate":"2023-04-07"},{"lineNumber":52,"author":{"gitId":"HappyM0ment"},"content":"                         */","lastModifiedDate":"2023-04-07"},{"lineNumber":53,"author":{"gitId":"HappyM0ment"},"content":"                        newTask \u003d new Todo(splitEntryValue[2].trim());","lastModifiedDate":"2023-04-07"},{"lineNumber":54,"author":{"gitId":"HappyM0ment"},"content":"                    }","lastModifiedDate":"2023-04-07"},{"lineNumber":55,"author":{"gitId":"HappyM0ment"},"content":"                    else if(splitEntryValue[0].trim().equalsIgnoreCase(\"D\")) {","lastModifiedDate":"2023-04-07"},{"lineNumber":56,"author":{"gitId":"HappyM0ment"},"content":"                        /**","lastModifiedDate":"2023-04-07"},{"lineNumber":57,"author":{"gitId":"HappyM0ment"},"content":"                         * @param splitEntryValue[0] \u003d D","lastModifiedDate":"2023-04-07"},{"lineNumber":58,"author":{"gitId":"HappyM0ment"},"content":"                         * @param splitEntryValue[1] \u003d 1 - done, 0 - not done","lastModifiedDate":"2023-04-07"},{"lineNumber":59,"author":{"gitId":"HappyM0ment"},"content":"                         * @param splitEntryValue[2] \u003d Description","lastModifiedDate":"2023-04-07"},{"lineNumber":60,"author":{"gitId":"HappyM0ment"},"content":"                         * @param splitEntryValue[3] \u003d \u0027By\u0027 attribute","lastModifiedDate":"2023-04-07"},{"lineNumber":61,"author":{"gitId":"HappyM0ment"},"content":"                         */","lastModifiedDate":"2023-04-07"},{"lineNumber":62,"author":{"gitId":"HappyM0ment"},"content":"                        newTask \u003d new Deadline(splitEntryValue[2].trim(), splitEntryValue[3].trim());","lastModifiedDate":"2023-04-07"},{"lineNumber":63,"author":{"gitId":"HappyM0ment"},"content":"                    }","lastModifiedDate":"2023-04-07"},{"lineNumber":64,"author":{"gitId":"HappyM0ment"},"content":"                    else  {","lastModifiedDate":"2023-04-07"},{"lineNumber":65,"author":{"gitId":"HappyM0ment"},"content":"                        /**","lastModifiedDate":"2023-04-07"},{"lineNumber":66,"author":{"gitId":"HappyM0ment"},"content":"                         * @param splitEntryValue[0] \u003d E","lastModifiedDate":"2023-04-07"},{"lineNumber":67,"author":{"gitId":"HappyM0ment"},"content":"                         * @param splitEntryValue[1] \u003d 1 - done, 0 - not done","lastModifiedDate":"2023-04-07"},{"lineNumber":68,"author":{"gitId":"HappyM0ment"},"content":"                         * @param splitEntryValue[2] \u003d Description","lastModifiedDate":"2023-04-07"},{"lineNumber":69,"author":{"gitId":"HappyM0ment"},"content":"                         * @param splitEntryValue[3] \u003d Start","lastModifiedDate":"2023-04-07"},{"lineNumber":70,"author":{"gitId":"HappyM0ment"},"content":"                         * @param splitEntryValue[4] \u003d End","lastModifiedDate":"2023-04-07"},{"lineNumber":71,"author":{"gitId":"HappyM0ment"},"content":"                         */","lastModifiedDate":"2023-04-07"},{"lineNumber":72,"author":{"gitId":"HappyM0ment"},"content":"                        newTask \u003d new Event(splitEntryValue[2].trim(), splitEntryValue[3].trim(), splitEntryValue[4].trim());","lastModifiedDate":"2023-04-07"},{"lineNumber":73,"author":{"gitId":"HappyM0ment"},"content":"                    }","lastModifiedDate":"2023-04-07"},{"lineNumber":74,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":75,"author":{"gitId":"HappyM0ment"},"content":"                    //mark as done if value is 1","lastModifiedDate":"2023-04-08"},{"lineNumber":76,"author":{"gitId":"HappyM0ment"},"content":"                    if(splitEntryValue[1].trim().equalsIgnoreCase(\"1\"))","lastModifiedDate":"2023-04-08"},{"lineNumber":77,"author":{"gitId":"HappyM0ment"},"content":"                    {","lastModifiedDate":"2023-04-08"},{"lineNumber":78,"author":{"gitId":"HappyM0ment"},"content":"                        newTask.markAsDone();","lastModifiedDate":"2023-04-08"},{"lineNumber":79,"author":{"gitId":"HappyM0ment"},"content":"                    }","lastModifiedDate":"2023-04-08"},{"lineNumber":80,"author":{"gitId":"HappyM0ment"},"content":"                    listOfTask.add(newTask);","lastModifiedDate":"2023-04-07"},{"lineNumber":81,"author":{"gitId":"HappyM0ment"},"content":"                }","lastModifiedDate":"2023-04-07"},{"lineNumber":82,"author":{"gitId":"HappyM0ment"},"content":"            } catch (FileNotFoundException e) {","lastModifiedDate":"2023-04-07"},{"lineNumber":83,"author":{"gitId":"HappyM0ment"},"content":"                throw new DukeException(\"☹ OOPS!!! Error caught: \" + e.getMessage());","lastModifiedDate":"2023-04-07"},{"lineNumber":84,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-07"},{"lineNumber":85,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":86,"author":{"gitId":"HappyM0ment"},"content":"            return listOfTask;","lastModifiedDate":"2023-04-07"},{"lineNumber":87,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-07"},{"lineNumber":88,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":89,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":90,"author":{"gitId":"HappyM0ment"},"content":"    public static void saveFile(TaskList listOfTask) throws DukeException {","lastModifiedDate":"2023-04-07"},{"lineNumber":91,"author":{"gitId":"HappyM0ment"},"content":"        try {","lastModifiedDate":"2023-04-07"},{"lineNumber":92,"author":{"gitId":"HappyM0ment"},"content":"            FileWriter newFW \u003d new FileWriter(filePath);","lastModifiedDate":"2023-04-07"},{"lineNumber":93,"author":{"gitId":"HappyM0ment"},"content":"            for(int i \u003d 0; i \u003c listOfTask.getSizeOfList(); i++)","lastModifiedDate":"2023-04-07"},{"lineNumber":94,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-04-07"},{"lineNumber":95,"author":{"gitId":"HappyM0ment"},"content":"                Task itemToAdd \u003d listOfTask.getElementFromList(i);","lastModifiedDate":"2023-04-07"},{"lineNumber":96,"author":{"gitId":"HappyM0ment"},"content":"                String finalLine \u003d new String();","lastModifiedDate":"2023-04-07"},{"lineNumber":97,"author":{"gitId":"HappyM0ment"},"content":"                if(itemToAdd instanceof Todo) {","lastModifiedDate":"2023-04-07"},{"lineNumber":98,"author":{"gitId":"HappyM0ment"},"content":"                    finalLine +\u003d \"T : \";","lastModifiedDate":"2023-04-07"},{"lineNumber":99,"author":{"gitId":"HappyM0ment"},"content":"                    if(itemToAdd.getTaskStatus().equalsIgnoreCase(\"X\")) {","lastModifiedDate":"2023-04-07"},{"lineNumber":100,"author":{"gitId":"HappyM0ment"},"content":"                        finalLine +\u003d \"1\";","lastModifiedDate":"2023-04-07"},{"lineNumber":101,"author":{"gitId":"HappyM0ment"},"content":"                    }","lastModifiedDate":"2023-04-07"},{"lineNumber":102,"author":{"gitId":"HappyM0ment"},"content":"                    else {","lastModifiedDate":"2023-04-07"},{"lineNumber":103,"author":{"gitId":"HappyM0ment"},"content":"                        finalLine +\u003d \"0\";","lastModifiedDate":"2023-04-07"},{"lineNumber":104,"author":{"gitId":"HappyM0ment"},"content":"                    }","lastModifiedDate":"2023-04-07"},{"lineNumber":105,"author":{"gitId":"HappyM0ment"},"content":"                    finalLine +\u003d \" : \" + itemToAdd.getDescription();","lastModifiedDate":"2023-04-07"},{"lineNumber":106,"author":{"gitId":"HappyM0ment"},"content":"                }","lastModifiedDate":"2023-04-07"},{"lineNumber":107,"author":{"gitId":"HappyM0ment"},"content":"                else if(itemToAdd instanceof Deadline) {","lastModifiedDate":"2023-04-07"},{"lineNumber":108,"author":{"gitId":"HappyM0ment"},"content":"                    finalLine +\u003d \"D : \";","lastModifiedDate":"2023-04-07"},{"lineNumber":109,"author":{"gitId":"HappyM0ment"},"content":"                    if(itemToAdd.getTaskStatus().equalsIgnoreCase(\"X\")) {","lastModifiedDate":"2023-04-07"},{"lineNumber":110,"author":{"gitId":"HappyM0ment"},"content":"                        finalLine +\u003d \"1\";","lastModifiedDate":"2023-04-07"},{"lineNumber":111,"author":{"gitId":"HappyM0ment"},"content":"                    }","lastModifiedDate":"2023-04-07"},{"lineNumber":112,"author":{"gitId":"HappyM0ment"},"content":"                    else {","lastModifiedDate":"2023-04-07"},{"lineNumber":113,"author":{"gitId":"HappyM0ment"},"content":"                        finalLine +\u003d \"0\";","lastModifiedDate":"2023-04-07"},{"lineNumber":114,"author":{"gitId":"HappyM0ment"},"content":"                    }","lastModifiedDate":"2023-04-07"},{"lineNumber":115,"author":{"gitId":"HappyM0ment"},"content":"                    finalLine +\u003d \" : \" + itemToAdd.getDescription() + \" : \" + ((Deadline) itemToAdd).getBy();","lastModifiedDate":"2023-04-07"},{"lineNumber":116,"author":{"gitId":"HappyM0ment"},"content":"                }","lastModifiedDate":"2023-04-07"},{"lineNumber":117,"author":{"gitId":"HappyM0ment"},"content":"                else {","lastModifiedDate":"2023-04-07"},{"lineNumber":118,"author":{"gitId":"HappyM0ment"},"content":"                    finalLine +\u003d \"E : \";","lastModifiedDate":"2023-04-07"},{"lineNumber":119,"author":{"gitId":"HappyM0ment"},"content":"                    if(itemToAdd.getTaskStatus().equalsIgnoreCase(\"X\")) {","lastModifiedDate":"2023-04-07"},{"lineNumber":120,"author":{"gitId":"HappyM0ment"},"content":"                        finalLine +\u003d \"1\";","lastModifiedDate":"2023-04-07"},{"lineNumber":121,"author":{"gitId":"HappyM0ment"},"content":"                    }","lastModifiedDate":"2023-04-07"},{"lineNumber":122,"author":{"gitId":"HappyM0ment"},"content":"                    else {","lastModifiedDate":"2023-04-07"},{"lineNumber":123,"author":{"gitId":"HappyM0ment"},"content":"                        finalLine +\u003d \"0\";","lastModifiedDate":"2023-04-07"},{"lineNumber":124,"author":{"gitId":"HappyM0ment"},"content":"                    }","lastModifiedDate":"2023-04-07"},{"lineNumber":125,"author":{"gitId":"HappyM0ment"},"content":"                    finalLine +\u003d \" : \" + itemToAdd.getDescription() + \" : \" + ((Event) itemToAdd).getStart()+ \" : \" + ((Event) itemToAdd).getEnd();","lastModifiedDate":"2023-04-07"},{"lineNumber":126,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":127,"author":{"gitId":"HappyM0ment"},"content":"                }","lastModifiedDate":"2023-04-07"},{"lineNumber":128,"author":{"gitId":"HappyM0ment"},"content":"                newFW.write(finalLine);","lastModifiedDate":"2023-04-07"},{"lineNumber":129,"author":{"gitId":"HappyM0ment"},"content":"                newFW.write(System.getProperty( \"line.separator\" ));","lastModifiedDate":"2023-04-07"},{"lineNumber":130,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-07"},{"lineNumber":131,"author":{"gitId":"HappyM0ment"},"content":"            newFW.close();","lastModifiedDate":"2023-04-07"},{"lineNumber":132,"author":{"gitId":"HappyM0ment"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-04-07"},{"lineNumber":133,"author":{"gitId":"HappyM0ment"},"content":"            throw new DukeException(\"☹ OOPS!!! Error caught: \" + e.getMessage());","lastModifiedDate":"2023-04-07"},{"lineNumber":134,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-07"},{"lineNumber":135,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":136,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":137,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":138,"author":{"gitId":"HappyM0ment"},"content":"}","lastModifiedDate":"2023-04-04"}],"authorContributionMap":{"HappyM0ment":138}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HappyM0ment"},"content":"/**","lastModifiedDate":"2023-04-04"},{"lineNumber":2,"author":{"gitId":"HappyM0ment"},"content":" *  DONE BY: A0227169X; ANG JIA JIN, GABRIEL","lastModifiedDate":"2023-04-04"},{"lineNumber":3,"author":{"gitId":"HappyM0ment"},"content":" */","lastModifiedDate":"2023-04-04"},{"lineNumber":4,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":5,"author":{"gitId":"HappyM0ment"},"content":"package duke.task;","lastModifiedDate":"2023-04-04"},{"lineNumber":6,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":7,"author":{"gitId":"HappyM0ment"},"content":"import duke.Todo;","lastModifiedDate":"2023-04-08"},{"lineNumber":8,"author":{"gitId":"HappyM0ment"},"content":"import duke.Deadline;","lastModifiedDate":"2023-04-08"},{"lineNumber":9,"author":{"gitId":"HappyM0ment"},"content":"import duke.Event;","lastModifiedDate":"2023-04-08"},{"lineNumber":10,"author":{"gitId":"HappyM0ment"},"content":"import duke.DukeException;","lastModifiedDate":"2023-04-07"},{"lineNumber":11,"author":{"gitId":"HappyM0ment"},"content":"import duke.Task;","lastModifiedDate":"2023-04-04"},{"lineNumber":12,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":13,"author":{"gitId":"HappyM0ment"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-04-04"},{"lineNumber":14,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":15,"author":{"gitId":"HappyM0ment"},"content":"public class TaskList {","lastModifiedDate":"2023-04-04"},{"lineNumber":16,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":17,"author":{"gitId":"HappyM0ment"},"content":"     *  Attribute","lastModifiedDate":"2023-04-04"},{"lineNumber":18,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":19,"author":{"gitId":"HappyM0ment"},"content":"    private ArrayList\u003cTask\u003e list; //string initialize Task arraylist","lastModifiedDate":"2023-04-07"},{"lineNumber":20,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":21,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":22,"author":{"gitId":"HappyM0ment"},"content":"     *  Constructor [with inputs]","lastModifiedDate":"2023-04-04"},{"lineNumber":23,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":24,"author":{"gitId":"HappyM0ment"},"content":"    public TaskList(ArrayList\u003cTask\u003e inputList) {","lastModifiedDate":"2023-04-04"},{"lineNumber":25,"author":{"gitId":"HappyM0ment"},"content":"        this.list \u003d inputList;","lastModifiedDate":"2023-04-04"},{"lineNumber":26,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":27,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":28,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":29,"author":{"gitId":"HappyM0ment"},"content":"     *  Constructor 2 [w/o inputs]","lastModifiedDate":"2023-04-04"},{"lineNumber":30,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":31,"author":{"gitId":"HappyM0ment"},"content":"    public TaskList() {","lastModifiedDate":"2023-04-04"},{"lineNumber":32,"author":{"gitId":"HappyM0ment"},"content":"        this.list \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-04-04"},{"lineNumber":33,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":34,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":35,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":36,"author":{"gitId":"HappyM0ment"},"content":"     *  This method will print all the elements in the list","lastModifiedDate":"2023-04-04"},{"lineNumber":37,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":38,"author":{"gitId":"HappyM0ment"},"content":"    public void printTaskList() {","lastModifiedDate":"2023-04-07"},{"lineNumber":39,"author":{"gitId":"HappyM0ment"},"content":"        System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2023-04-04"},{"lineNumber":40,"author":{"gitId":"HappyM0ment"},"content":"        for(int i \u003d 0; i \u003c this.list.size(); i++) {","lastModifiedDate":"2023-04-08"},{"lineNumber":41,"author":{"gitId":"HappyM0ment"},"content":"            System.out.println(i+1 + \".\" + this.list.get(i).toString());","lastModifiedDate":"2023-04-04"},{"lineNumber":42,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-04"},{"lineNumber":43,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":44,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":45,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":46,"author":{"gitId":"HappyM0ment"},"content":"     *  This method will add a new Tasking into the current list","lastModifiedDate":"2023-04-04"},{"lineNumber":47,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":48,"author":{"gitId":"HappyM0ment"},"content":"    public Task getElementFromList(int eleIndex) {","lastModifiedDate":"2023-04-04"},{"lineNumber":49,"author":{"gitId":"HappyM0ment"},"content":"        Task item \u003d this.list.get(eleIndex);","lastModifiedDate":"2023-04-04"},{"lineNumber":50,"author":{"gitId":"HappyM0ment"},"content":"        return item;","lastModifiedDate":"2023-04-04"},{"lineNumber":51,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":52,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":53,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-07"},{"lineNumber":54,"author":{"gitId":"HappyM0ment"},"content":"     *  This method will return size of currentList","lastModifiedDate":"2023-04-07"},{"lineNumber":55,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-07"},{"lineNumber":56,"author":{"gitId":"HappyM0ment"},"content":"    public int getSizeOfList () {","lastModifiedDate":"2023-04-07"},{"lineNumber":57,"author":{"gitId":"HappyM0ment"},"content":"        return this.list.size();","lastModifiedDate":"2023-04-07"},{"lineNumber":58,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-07"},{"lineNumber":59,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":60,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":61,"author":{"gitId":"HappyM0ment"},"content":"     *  This method will add a new Tasking into the current list","lastModifiedDate":"2023-04-04"},{"lineNumber":62,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":63,"author":{"gitId":"HappyM0ment"},"content":"    public Task addNewTask(Task newTask) throws DukeException{","lastModifiedDate":"2023-04-08"},{"lineNumber":64,"author":{"gitId":"HappyM0ment"},"content":"        if (checkDuplicate(newTask)) {","lastModifiedDate":"2023-04-08"},{"lineNumber":65,"author":{"gitId":"HappyM0ment"},"content":"            throw new DukeException(\"☹ OOPS!!! This already task exists\");","lastModifiedDate":"2023-04-08"},{"lineNumber":66,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-08"},{"lineNumber":67,"author":{"gitId":"HappyM0ment"},"content":"        else {","lastModifiedDate":"2023-04-08"},{"lineNumber":68,"author":{"gitId":"HappyM0ment"},"content":"            this.list.add(newTask);","lastModifiedDate":"2023-04-04"},{"lineNumber":69,"author":{"gitId":"HappyM0ment"},"content":"            System.out.println(\"Got it. I\u0027ve added this task:\\n\" + newTask.toString());","lastModifiedDate":"2023-04-04"},{"lineNumber":70,"author":{"gitId":"HappyM0ment"},"content":"            System.out.println(\"Now you have \" + this.getSizeOfList() + \" task(s) in the list\");","lastModifiedDate":"2023-04-08"},{"lineNumber":71,"author":{"gitId":"HappyM0ment"},"content":"            return newTask;","lastModifiedDate":"2023-04-04"},{"lineNumber":72,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-04"},{"lineNumber":73,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-08"},{"lineNumber":74,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":75,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":76,"author":{"gitId":"HappyM0ment"},"content":"     *  this method will take in an index \u0026 remove an existing Tasking from the current list","lastModifiedDate":"2023-04-04"},{"lineNumber":77,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":78,"author":{"gitId":"HappyM0ment"},"content":"    public Task deleteTask(int indexToBeDeleted) throws DukeException {","lastModifiedDate":"2023-04-07"},{"lineNumber":79,"author":{"gitId":"HappyM0ment"},"content":"        if(indexToBeDeleted \u003e (this.getSizeOfList()-1)) {","lastModifiedDate":"2023-04-08"},{"lineNumber":80,"author":{"gitId":"HappyM0ment"},"content":"            throw new DukeException(\"☹ OOPS!!! The value after delete is over the size of the list.\");","lastModifiedDate":"2023-04-07"},{"lineNumber":81,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-07"},{"lineNumber":82,"author":{"gitId":"HappyM0ment"},"content":"        else {","lastModifiedDate":"2023-04-07"},{"lineNumber":83,"author":{"gitId":"HappyM0ment"},"content":"            Task deletedItem \u003d getElementFromList(indexToBeDeleted);","lastModifiedDate":"2023-04-04"},{"lineNumber":84,"author":{"gitId":"HappyM0ment"},"content":"            Task item \u003d this.list.remove(indexToBeDeleted);","lastModifiedDate":"2023-04-04"},{"lineNumber":85,"author":{"gitId":"HappyM0ment"},"content":"            System.out.println(\"Noted. I\u0027ve removed this task:\\n\" + deletedItem);","lastModifiedDate":"2023-04-04"},{"lineNumber":86,"author":{"gitId":"HappyM0ment"},"content":"            System.out.println(\"Now you have \" + this.getSizeOfList() + \" task(s) in the list\");","lastModifiedDate":"2023-04-08"},{"lineNumber":87,"author":{"gitId":"HappyM0ment"},"content":"            return deletedItem;","lastModifiedDate":"2023-04-04"},{"lineNumber":88,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-04"},{"lineNumber":89,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-07"},{"lineNumber":90,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":91,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-07"},{"lineNumber":92,"author":{"gitId":"HappyM0ment"},"content":"     *  This method will retrieve the item to mark it","lastModifiedDate":"2023-04-07"},{"lineNumber":93,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-07"},{"lineNumber":94,"author":{"gitId":"HappyM0ment"},"content":"    public void markTask(int indexToBeMarked) throws DukeException {","lastModifiedDate":"2023-04-07"},{"lineNumber":95,"author":{"gitId":"HappyM0ment"},"content":"        if(indexToBeMarked \u003e (this.getSizeOfList()-1)) {","lastModifiedDate":"2023-04-08"},{"lineNumber":96,"author":{"gitId":"HappyM0ment"},"content":"            throw new DukeException(\"☹ OOPS!!! The value after mark is over the size of the list.\");","lastModifiedDate":"2023-04-07"},{"lineNumber":97,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-07"},{"lineNumber":98,"author":{"gitId":"HappyM0ment"},"content":"        else {","lastModifiedDate":"2023-04-07"},{"lineNumber":99,"author":{"gitId":"HappyM0ment"},"content":"            this.list.get(indexToBeMarked).markAsDone();","lastModifiedDate":"2023-04-07"},{"lineNumber":100,"author":{"gitId":"HappyM0ment"},"content":"            System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-04-07"},{"lineNumber":101,"author":{"gitId":"HappyM0ment"},"content":"            System.out.println(this.list.get(indexToBeMarked).toString());","lastModifiedDate":"2023-04-07"},{"lineNumber":102,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-07"},{"lineNumber":103,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-07"},{"lineNumber":104,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":105,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-07"},{"lineNumber":106,"author":{"gitId":"HappyM0ment"},"content":"     *  This method will retrieve the item to unmark it","lastModifiedDate":"2023-04-08"},{"lineNumber":107,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-07"},{"lineNumber":108,"author":{"gitId":"HappyM0ment"},"content":"    public void unmarkTask(int indexToBeUnmarked) throws DukeException {","lastModifiedDate":"2023-04-07"},{"lineNumber":109,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":110,"author":{"gitId":"HappyM0ment"},"content":"        if(indexToBeUnmarked \u003e (this.getSizeOfList()-1)) {","lastModifiedDate":"2023-04-08"},{"lineNumber":111,"author":{"gitId":"HappyM0ment"},"content":"            throw new DukeException(\"☹ OOPS!!! The value after unmark is over the size of the list.\");","lastModifiedDate":"2023-04-07"},{"lineNumber":112,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-07"},{"lineNumber":113,"author":{"gitId":"HappyM0ment"},"content":"        else {","lastModifiedDate":"2023-04-07"},{"lineNumber":114,"author":{"gitId":"HappyM0ment"},"content":"            this.list.get(indexToBeUnmarked).markAsUndone();","lastModifiedDate":"2023-04-07"},{"lineNumber":115,"author":{"gitId":"HappyM0ment"},"content":"            System.out.println(\"OK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2023-04-07"},{"lineNumber":116,"author":{"gitId":"HappyM0ment"},"content":"            System.out.println(this.list.get(indexToBeUnmarked).toString());","lastModifiedDate":"2023-04-07"},{"lineNumber":117,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-07"},{"lineNumber":118,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-07"},{"lineNumber":119,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":120,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-08"},{"lineNumber":121,"author":{"gitId":"HappyM0ment"},"content":"     *  This method will search task by keyword and display matching tasks","lastModifiedDate":"2023-04-08"},{"lineNumber":122,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-08"},{"lineNumber":123,"author":{"gitId":"HappyM0ment"},"content":"    public void findItemInList(String searchKeyword) {","lastModifiedDate":"2023-04-08"},{"lineNumber":124,"author":{"gitId":"HappyM0ment"},"content":"        System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2023-04-08"},{"lineNumber":125,"author":{"gitId":"HappyM0ment"},"content":"        for(int i \u003d 0; i \u003c this.getSizeOfList(); i++) {","lastModifiedDate":"2023-04-08"},{"lineNumber":126,"author":{"gitId":"HappyM0ment"},"content":"            if(this.list.get(i).getDescription().contains(searchKeyword)) {","lastModifiedDate":"2023-04-08"},{"lineNumber":127,"author":{"gitId":"HappyM0ment"},"content":"                System.out.println(i+1 + \".\" + this.list.get(i).toString());","lastModifiedDate":"2023-04-08"},{"lineNumber":128,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-08"},{"lineNumber":129,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-08"},{"lineNumber":130,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-08"},{"lineNumber":131,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":132,"author":{"gitId":"HappyM0ment"},"content":"    /**","lastModifiedDate":"2023-04-08"},{"lineNumber":133,"author":{"gitId":"HappyM0ment"},"content":"     *  This method will search the list to check for duplicates","lastModifiedDate":"2023-04-08"},{"lineNumber":134,"author":{"gitId":"HappyM0ment"},"content":"     * @return true if duplicate exists","lastModifiedDate":"2023-04-08"},{"lineNumber":135,"author":{"gitId":"HappyM0ment"},"content":"     * @return false if no duplicates","lastModifiedDate":"2023-04-08"},{"lineNumber":136,"author":{"gitId":"HappyM0ment"},"content":"     */","lastModifiedDate":"2023-04-08"},{"lineNumber":137,"author":{"gitId":"HappyM0ment"},"content":"    public boolean checkDuplicate(Task newTask)","lastModifiedDate":"2023-04-08"},{"lineNumber":138,"author":{"gitId":"HappyM0ment"},"content":"    {","lastModifiedDate":"2023-04-08"},{"lineNumber":139,"author":{"gitId":"HappyM0ment"},"content":"        boolean counter \u003d false;","lastModifiedDate":"2023-04-08"},{"lineNumber":140,"author":{"gitId":"HappyM0ment"},"content":"        for(int i \u003d 0; i \u003c this.getSizeOfList(); i++) {","lastModifiedDate":"2023-04-08"},{"lineNumber":141,"author":{"gitId":"HappyM0ment"},"content":"            Task currItem \u003d this.getElementFromList(i);","lastModifiedDate":"2023-04-08"},{"lineNumber":142,"author":{"gitId":"HappyM0ment"},"content":"            if(newTask.getClass().equals(currItem.getClass())) {","lastModifiedDate":"2023-04-08"},{"lineNumber":143,"author":{"gitId":"HappyM0ment"},"content":"                if(newTask instanceof Todo)","lastModifiedDate":"2023-04-08"},{"lineNumber":144,"author":{"gitId":"HappyM0ment"},"content":"                {","lastModifiedDate":"2023-04-08"},{"lineNumber":145,"author":{"gitId":"HappyM0ment"},"content":"                    if(newTask.getDescription().equalsIgnoreCase(currItem.getDescription())) {","lastModifiedDate":"2023-04-08"},{"lineNumber":146,"author":{"gitId":"HappyM0ment"},"content":"                        return true;","lastModifiedDate":"2023-04-08"},{"lineNumber":147,"author":{"gitId":"HappyM0ment"},"content":"                    }","lastModifiedDate":"2023-04-08"},{"lineNumber":148,"author":{"gitId":"HappyM0ment"},"content":"                }","lastModifiedDate":"2023-04-08"},{"lineNumber":149,"author":{"gitId":"HappyM0ment"},"content":"                else if(newTask instanceof Deadline)","lastModifiedDate":"2023-04-08"},{"lineNumber":150,"author":{"gitId":"HappyM0ment"},"content":"                {","lastModifiedDate":"2023-04-08"},{"lineNumber":151,"author":{"gitId":"HappyM0ment"},"content":"                    if(newTask.getDescription().equalsIgnoreCase(currItem.getDescription()) \u0026\u0026 ((Deadline) newTask).getBy().equalsIgnoreCase(((Deadline) currItem).getBy())) {","lastModifiedDate":"2023-04-08"},{"lineNumber":152,"author":{"gitId":"HappyM0ment"},"content":"                        return true;","lastModifiedDate":"2023-04-08"},{"lineNumber":153,"author":{"gitId":"HappyM0ment"},"content":"                    }","lastModifiedDate":"2023-04-08"},{"lineNumber":154,"author":{"gitId":"HappyM0ment"},"content":"                }","lastModifiedDate":"2023-04-08"},{"lineNumber":155,"author":{"gitId":"HappyM0ment"},"content":"                else {","lastModifiedDate":"2023-04-08"},{"lineNumber":156,"author":{"gitId":"HappyM0ment"},"content":"                    if(newTask.getDescription().equalsIgnoreCase(currItem.getDescription()) \u0026\u0026 ((Event) newTask).getStart().equalsIgnoreCase(((Event) currItem).getStart()) \u0026\u0026 ((Event) newTask).getEnd().equalsIgnoreCase(((Event) currItem).getEnd())) {","lastModifiedDate":"2023-04-08"},{"lineNumber":157,"author":{"gitId":"HappyM0ment"},"content":"                        return true;","lastModifiedDate":"2023-04-08"},{"lineNumber":158,"author":{"gitId":"HappyM0ment"},"content":"                    }","lastModifiedDate":"2023-04-08"},{"lineNumber":159,"author":{"gitId":"HappyM0ment"},"content":"                }","lastModifiedDate":"2023-04-08"},{"lineNumber":160,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-04-08"},{"lineNumber":161,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-04-08"},{"lineNumber":162,"author":{"gitId":"HappyM0ment"},"content":"        return counter;","lastModifiedDate":"2023-04-08"},{"lineNumber":163,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-04-08"},{"lineNumber":164,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":165,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":166,"author":{"gitId":"HappyM0ment"},"content":"}","lastModifiedDate":"2023-04-04"}],"authorContributionMap":{"HappyM0ment":166}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"HappyM0ment"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-04-04"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"HappyM0ment":1,"-":20}}]
