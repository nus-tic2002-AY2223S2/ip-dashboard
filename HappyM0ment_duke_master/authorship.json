[{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"HappyM0ment"},"content":"T | 1 | read book","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"HappyM0ment"},"content":"D | 0 | return book | June 6th","lastModifiedDate":"2023-03-30"},{"lineNumber":3,"author":{"gitId":"HappyM0ment"},"content":"E | 0 | project meeting | Aug 6th 2-4pm","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"HappyM0ment"},"content":"T | 1 | join sports club","lastModifiedDate":"2023-03-30"}],"authorContributionMap":{"HappyM0ment":4}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HappyM0ment"},"content":"////////////////////////////////////////////////","lastModifiedDate":"2023-03-17"},{"lineNumber":2,"author":{"gitId":"HappyM0ment"},"content":"//  DONE BY: A0227169X; ANG JIA JIN, GABRIEL  //","lastModifiedDate":"2023-03-17"},{"lineNumber":3,"author":{"gitId":"HappyM0ment"},"content":"////////////////////////////////////////////////","lastModifiedDate":"2023-03-17"},{"lineNumber":4,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":5,"author":{"gitId":"HappyM0ment"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-03-17"},{"lineNumber":6,"author":{"gitId":"HappyM0ment"},"content":"    ///////////////////","lastModifiedDate":"2023-03-18"},{"lineNumber":7,"author":{"gitId":"HappyM0ment"},"content":"    //  Attributes   //","lastModifiedDate":"2023-03-18"},{"lineNumber":8,"author":{"gitId":"HappyM0ment"},"content":"    ///////////////////","lastModifiedDate":"2023-03-18"},{"lineNumber":9,"author":{"gitId":"HappyM0ment"},"content":"    protected String by;","lastModifiedDate":"2023-03-17"},{"lineNumber":10,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":11,"author":{"gitId":"HappyM0ment"},"content":"    ///////////////////","lastModifiedDate":"2023-03-18"},{"lineNumber":12,"author":{"gitId":"HappyM0ment"},"content":"    //  Constructor  //","lastModifiedDate":"2023-03-18"},{"lineNumber":13,"author":{"gitId":"HappyM0ment"},"content":"    ///////////////////","lastModifiedDate":"2023-03-18"},{"lineNumber":14,"author":{"gitId":"HappyM0ment"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2023-03-17"},{"lineNumber":15,"author":{"gitId":"HappyM0ment"},"content":"        super(description);","lastModifiedDate":"2023-03-17"},{"lineNumber":16,"author":{"gitId":"HappyM0ment"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-03-17"},{"lineNumber":17,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":18,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":19,"author":{"gitId":"HappyM0ment"},"content":"    ///////////////////////////////////////////////////////","lastModifiedDate":"2023-03-18"},{"lineNumber":20,"author":{"gitId":"HappyM0ment"},"content":"    //  getBy() method will return the deadline of Task  //","lastModifiedDate":"2023-03-18"},{"lineNumber":21,"author":{"gitId":"HappyM0ment"},"content":"    ///////////////////////////////////////////////////////","lastModifiedDate":"2023-03-18"},{"lineNumber":22,"author":{"gitId":"HappyM0ment"},"content":"    public String getBy() {","lastModifiedDate":"2023-03-17"},{"lineNumber":23,"author":{"gitId":"HappyM0ment"},"content":"        return by;","lastModifiedDate":"2023-03-17"},{"lineNumber":24,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":25,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":26,"author":{"gitId":"HappyM0ment"},"content":"    ///////////////////////////////////////////////////////","lastModifiedDate":"2023-03-18"},{"lineNumber":27,"author":{"gitId":"HappyM0ment"},"content":"    //  setBy() method will change the deadline of Task  //","lastModifiedDate":"2023-03-18"},{"lineNumber":28,"author":{"gitId":"HappyM0ment"},"content":"    ///////////////////////////////////////////////////////","lastModifiedDate":"2023-03-18"},{"lineNumber":29,"author":{"gitId":"HappyM0ment"},"content":"    public void setBy(String by) {","lastModifiedDate":"2023-03-17"},{"lineNumber":30,"author":{"gitId":"HappyM0ment"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-03-17"},{"lineNumber":31,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":32,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":33,"author":{"gitId":"HappyM0ment"},"content":"    ///////////////////////////////////////////////////////////////","lastModifiedDate":"2023-03-18"},{"lineNumber":34,"author":{"gitId":"HappyM0ment"},"content":"    //  toString() method will print out Task\u0027s standard output  //","lastModifiedDate":"2023-03-18"},{"lineNumber":35,"author":{"gitId":"HappyM0ment"},"content":"    ///////////////////////////////////////////////////////////////","lastModifiedDate":"2023-03-18"},{"lineNumber":36,"author":{"gitId":"HappyM0ment"},"content":"    @Override","lastModifiedDate":"2023-03-17"},{"lineNumber":37,"author":{"gitId":"HappyM0ment"},"content":"    public String toString() {","lastModifiedDate":"2023-03-17"},{"lineNumber":38,"author":{"gitId":"HappyM0ment"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";","lastModifiedDate":"2023-03-17"},{"lineNumber":39,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":40,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":41,"author":{"gitId":"HappyM0ment"},"content":"}","lastModifiedDate":"2023-03-17"}],"authorContributionMap":{"HappyM0ment":41}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HappyM0ment"},"content":"////////////////////////////////////////////////","lastModifiedDate":"2023-03-17"},{"lineNumber":2,"author":{"gitId":"HappyM0ment"},"content":"//  DONE BY: A0227169X; ANG JIA JIN, GABRIEL  //","lastModifiedDate":"2023-02-09"},{"lineNumber":3,"author":{"gitId":"HappyM0ment"},"content":"////////////////////////////////////////////////","lastModifiedDate":"2023-03-17"},{"lineNumber":4,"author":{"gitId":"HappyM0ment"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-02-13"},{"lineNumber":5,"author":{"gitId":"HappyM0ment"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-13"},{"lineNumber":6,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":8,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":9,"author":{"gitId":"HappyM0ment"},"content":"    public static String uiDivider \u003d \"____________________________________________________________\";","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"HappyM0ment"},"content":"    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////","lastModifiedDate":"2023-03-17"},{"lineNumber":12,"author":{"gitId":"HappyM0ment"},"content":"    //  Helper method                                                                                              //","lastModifiedDate":"2023-03-17"},{"lineNumber":13,"author":{"gitId":"HappyM0ment"},"content":"    //  isNumber() method will check input if it is a number                                                       //","lastModifiedDate":"2023-03-17"},{"lineNumber":14,"author":{"gitId":"HappyM0ment"},"content":"    //  Returns TRUE if it is a number; FALSE if it is a String                                                    //","lastModifiedDate":"2023-03-17"},{"lineNumber":15,"author":{"gitId":"HappyM0ment"},"content":"    //  Logic:      Integer.parseInt will throw NumberFormatException if it is unable to convert input to Integer  //","lastModifiedDate":"2023-03-17"},{"lineNumber":16,"author":{"gitId":"HappyM0ment"},"content":"    //              Once NumberFormatException is caught, return FALSE as it is not a Number                       //","lastModifiedDate":"2023-03-17"},{"lineNumber":17,"author":{"gitId":"HappyM0ment"},"content":"    //  Reference:  https://stackoverflow.com/questions/1102891/how-to-check-if-a-string-is-numeric-in-java        //","lastModifiedDate":"2023-03-17"},{"lineNumber":18,"author":{"gitId":"HappyM0ment"},"content":"    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////","lastModifiedDate":"2023-03-17"},{"lineNumber":19,"author":{"gitId":"HappyM0ment"},"content":"    public static boolean isNumber(String strToCheck)","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"HappyM0ment"},"content":"    {","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"HappyM0ment"},"content":"        try {","lastModifiedDate":"2023-03-17"},{"lineNumber":22,"author":{"gitId":"HappyM0ment"},"content":"            Integer.parseInt(strToCheck);","lastModifiedDate":"2023-03-17"},{"lineNumber":23,"author":{"gitId":"HappyM0ment"},"content":"            return true;","lastModifiedDate":"2023-03-17"},{"lineNumber":24,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-03-17"},{"lineNumber":25,"author":{"gitId":"HappyM0ment"},"content":"        catch(NumberFormatException exception)","lastModifiedDate":"2023-03-17"},{"lineNumber":26,"author":{"gitId":"HappyM0ment"},"content":"        {","lastModifiedDate":"2023-03-17"},{"lineNumber":27,"author":{"gitId":"HappyM0ment"},"content":"            return false;","lastModifiedDate":"2023-03-17"},{"lineNumber":28,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-03-17"},{"lineNumber":29,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":30,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":31,"author":{"gitId":"HappyM0ment"},"content":"    ///////////////////////////////////////////////////////////////////////////////////////////////////","lastModifiedDate":"2023-03-17"},{"lineNumber":32,"author":{"gitId":"HappyM0ment"},"content":"    //  Helper method                                                                                //","lastModifiedDate":"2023-03-17"},{"lineNumber":33,"author":{"gitId":"HappyM0ment"},"content":"    //  checkInputForMarkAction() method will return TRUE if needs to execute Mark function          //","lastModifiedDate":"2023-03-17"},{"lineNumber":34,"author":{"gitId":"HappyM0ment"},"content":"    //  Assumption: Mark function will only contain input with 2 words; \u0027Mark\u0027 followed by a number  //","lastModifiedDate":"2023-03-17"},{"lineNumber":35,"author":{"gitId":"HappyM0ment"},"content":"    //              Anything besides that will be treated as a Task to be added to the list          //","lastModifiedDate":"2023-03-17"},{"lineNumber":36,"author":{"gitId":"HappyM0ment"},"content":"    //              E.G. \u0027Mark Dairy\u0027 - goes to List                                                 //","lastModifiedDate":"2023-03-17"},{"lineNumber":37,"author":{"gitId":"HappyM0ment"},"content":"    //              E.G. \u0027Mark 2\u0027 - perform Mark function                                            //","lastModifiedDate":"2023-03-17"},{"lineNumber":38,"author":{"gitId":"HappyM0ment"},"content":"    ///////////////////////////////////////////////////////////////////////////////////////////////////","lastModifiedDate":"2023-03-17"},{"lineNumber":39,"author":{"gitId":"HappyM0ment"},"content":"    public static boolean checkInputForMarkAction(String load)","lastModifiedDate":"2023-03-17"},{"lineNumber":40,"author":{"gitId":"HappyM0ment"},"content":"    {","lastModifiedDate":"2023-03-17"},{"lineNumber":41,"author":{"gitId":"HappyM0ment"},"content":"        String[] separatedLoad \u003d load.split(\" \");","lastModifiedDate":"2023-03-17"},{"lineNumber":42,"author":{"gitId":"HappyM0ment"},"content":"        if (separatedLoad[0].equalsIgnoreCase(\"mark\") \u0026\u0026 separatedLoad.length \u003d\u003d 2 \u0026\u0026 isNumber(separatedLoad[1]))","lastModifiedDate":"2023-03-17"},{"lineNumber":43,"author":{"gitId":"HappyM0ment"},"content":"        {","lastModifiedDate":"2023-03-17"},{"lineNumber":44,"author":{"gitId":"HappyM0ment"},"content":"            return true;","lastModifiedDate":"2023-03-17"},{"lineNumber":45,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-03-17"},{"lineNumber":46,"author":{"gitId":"HappyM0ment"},"content":"        else","lastModifiedDate":"2023-03-17"},{"lineNumber":47,"author":{"gitId":"HappyM0ment"},"content":"        {","lastModifiedDate":"2023-03-17"},{"lineNumber":48,"author":{"gitId":"HappyM0ment"},"content":"            return false;","lastModifiedDate":"2023-03-17"},{"lineNumber":49,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-03-17"},{"lineNumber":50,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":51,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":52,"author":{"gitId":"HappyM0ment"},"content":"    ///////////////////////////////////////////////////////////////////////////////////////////////////////","lastModifiedDate":"2023-03-17"},{"lineNumber":53,"author":{"gitId":"HappyM0ment"},"content":"    //  Helper method                                                                                    //","lastModifiedDate":"2023-03-17"},{"lineNumber":54,"author":{"gitId":"HappyM0ment"},"content":"    //  checkInputForUnmarkAction() method will return TRUE if needs to execute Unmark function          //","lastModifiedDate":"2023-03-17"},{"lineNumber":55,"author":{"gitId":"HappyM0ment"},"content":"    //  Assumption: Unmark function will only contain input with 2 Words; \u0027Unmark\u0027 followed by a number  //","lastModifiedDate":"2023-03-17"},{"lineNumber":56,"author":{"gitId":"HappyM0ment"},"content":"    //              Anything besides that will be treated as a Task to be added to the list              //","lastModifiedDate":"2023-03-17"},{"lineNumber":57,"author":{"gitId":"HappyM0ment"},"content":"    //              E.G. \u0027Unmark Dairy\u0027 - goes to List                                                   //","lastModifiedDate":"2023-03-17"},{"lineNumber":58,"author":{"gitId":"HappyM0ment"},"content":"    //              E.G. \u0027Unmark 2\u0027 - perform Unmark function                                            //","lastModifiedDate":"2023-03-17"},{"lineNumber":59,"author":{"gitId":"HappyM0ment"},"content":"    ///////////////////////////////////////////////////////////////////////////////////////////////////////","lastModifiedDate":"2023-03-17"},{"lineNumber":60,"author":{"gitId":"HappyM0ment"},"content":"    public static boolean checkInputForUnmarkAction(String load)","lastModifiedDate":"2023-03-17"},{"lineNumber":61,"author":{"gitId":"HappyM0ment"},"content":"    {","lastModifiedDate":"2023-03-17"},{"lineNumber":62,"author":{"gitId":"HappyM0ment"},"content":"        String[] separatedLoad \u003d load.split(\" \");","lastModifiedDate":"2023-03-17"},{"lineNumber":63,"author":{"gitId":"HappyM0ment"},"content":"        if (separatedLoad[0].equalsIgnoreCase(\"unmark\") \u0026\u0026 separatedLoad.length \u003d\u003d 2 \u0026\u0026 isNumber(separatedLoad[1]))","lastModifiedDate":"2023-03-17"},{"lineNumber":64,"author":{"gitId":"HappyM0ment"},"content":"        {","lastModifiedDate":"2023-03-17"},{"lineNumber":65,"author":{"gitId":"HappyM0ment"},"content":"            return true;","lastModifiedDate":"2023-03-17"},{"lineNumber":66,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-03-17"},{"lineNumber":67,"author":{"gitId":"HappyM0ment"},"content":"        else","lastModifiedDate":"2023-03-17"},{"lineNumber":68,"author":{"gitId":"HappyM0ment"},"content":"        {","lastModifiedDate":"2023-03-17"},{"lineNumber":69,"author":{"gitId":"HappyM0ment"},"content":"            return false;","lastModifiedDate":"2023-03-17"},{"lineNumber":70,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-03-17"},{"lineNumber":71,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":72,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":73,"author":{"gitId":"HappyM0ment"},"content":"    ///////////////////////////////////////////////////////////////////////////////////////////////////////","lastModifiedDate":"2023-03-18"},{"lineNumber":74,"author":{"gitId":"HappyM0ment"},"content":"    //  Helper method                                                                                    //","lastModifiedDate":"2023-03-18"},{"lineNumber":75,"author":{"gitId":"HappyM0ment"},"content":"    //  identifyFunctionsValidateInput() method will perform 2 actions:                                  //","lastModifiedDate":"2023-03-18"},{"lineNumber":76,"author":{"gitId":"HappyM0ment"},"content":"    //  1) return Functions and the parameters                                                           //","lastModifiedDate":"2023-03-18"},{"lineNumber":77,"author":{"gitId":"HappyM0ment"},"content":"    //  functions: \"Deadline\" \"Event\" \"To-Do\" \"Mark\" \"Unmark\"                                            //","lastModifiedDate":"2023-03-18"},{"lineNumber":78,"author":{"gitId":"HappyM0ment"},"content":"    //  Outcome: separatedInput[0] \u003d Functions                                                           //","lastModifiedDate":"2023-03-18"},{"lineNumber":79,"author":{"gitId":"HappyM0ment"},"content":"    //           separatedInput[1] \u003d Parameters                                                          //","lastModifiedDate":"2023-03-18"},{"lineNumber":80,"author":{"gitId":"HappyM0ment"},"content":"    //                                                                                                   //","lastModifiedDate":"2023-03-18"},{"lineNumber":81,"author":{"gitId":"HappyM0ment"},"content":"    //  2) validates the input to catch all kinds of error such as                                       //","lastModifiedDate":"2023-03-18"},{"lineNumber":82,"author":{"gitId":"HappyM0ment"},"content":"    //  - Empty Parameters                                                                               //","lastModifiedDate":"2023-03-18"},{"lineNumber":83,"author":{"gitId":"HappyM0ment"},"content":"    //  - Invalid functions                                                                              //","lastModifiedDate":"2023-03-18"},{"lineNumber":84,"author":{"gitId":"HappyM0ment"},"content":"    //  Deadline functions:                                                                              //","lastModifiedDate":"2023-03-18"},{"lineNumber":85,"author":{"gitId":"HappyM0ment"},"content":"    //  - Missing /by parameters                                                                         //","lastModifiedDate":"2023-03-18"},{"lineNumber":86,"author":{"gitId":"HappyM0ment"},"content":"    //  - Missing deadline                                                                               //","lastModifiedDate":"2023-03-18"},{"lineNumber":87,"author":{"gitId":"HappyM0ment"},"content":"    //  Events functions:                                                                                //","lastModifiedDate":"2023-03-18"},{"lineNumber":88,"author":{"gitId":"HappyM0ment"},"content":"    //  - Missing /from \u0026 /to parameters                                                                 //","lastModifiedDate":"2023-03-18"},{"lineNumber":89,"author":{"gitId":"HappyM0ment"},"content":"    //  - Missing duration                                                                               //","lastModifiedDate":"2023-03-18"},{"lineNumber":90,"author":{"gitId":"HappyM0ment"},"content":"    //  Mark / Unmark / Delete functions:                                                                //","lastModifiedDate":"2023-03-18"},{"lineNumber":91,"author":{"gitId":"HappyM0ment"},"content":"    //  - Missing value for mark \u0026 unmark                                                                //","lastModifiedDate":"2023-03-18"},{"lineNumber":92,"author":{"gitId":"HappyM0ment"},"content":"    //  - Too much values for mark \u0026 unmark                                                              //","lastModifiedDate":"2023-03-18"},{"lineNumber":93,"author":{"gitId":"HappyM0ment"},"content":"    //  - Index over the List size                                                                       //","lastModifiedDate":"2023-03-18"},{"lineNumber":94,"author":{"gitId":"HappyM0ment"},"content":"    ///////////////////////////////////////////////////////////////////////////////////////////////////////","lastModifiedDate":"2023-03-18"},{"lineNumber":95,"author":{"gitId":"HappyM0ment"},"content":"    public static String[] identifyFunctionsValidateInput(String stringInput, ArrayList currList) throws DukeException","lastModifiedDate":"2023-03-18"},{"lineNumber":96,"author":{"gitId":"HappyM0ment"},"content":"    {","lastModifiedDate":"2023-03-18"},{"lineNumber":97,"author":{"gitId":"HappyM0ment"},"content":"        String[] separatedInput \u003d stringInput.split(\" \", 2);","lastModifiedDate":"2023-03-18"},{"lineNumber":98,"author":{"gitId":"HappyM0ment"},"content":"        if(separatedInput[0].equalsIgnoreCase(\"Deadline\"))","lastModifiedDate":"2023-03-18"},{"lineNumber":99,"author":{"gitId":"HappyM0ment"},"content":"        {","lastModifiedDate":"2023-03-18"},{"lineNumber":100,"author":{"gitId":"HappyM0ment"},"content":"            if (separatedInput.length \u003c 2)","lastModifiedDate":"2023-03-18"},{"lineNumber":101,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-03-18"},{"lineNumber":102,"author":{"gitId":"HappyM0ment"},"content":"                throw new DukeException(\"☹ OOPS!!! The description of a \" + separatedInput[0] + \" cannot be empty.\");","lastModifiedDate":"2023-03-18"},{"lineNumber":103,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-03-18"},{"lineNumber":104,"author":{"gitId":"HappyM0ment"},"content":"            else if (!separatedInput[1].contains(\"/by\"))","lastModifiedDate":"2023-03-18"},{"lineNumber":105,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-03-18"},{"lineNumber":106,"author":{"gitId":"HappyM0ment"},"content":"                throw new DukeException(\"☹ OOPS!!! \" + separatedInput[0] + \" is missing a \\\"/by\\\" for deadline\");","lastModifiedDate":"2023-03-21"},{"lineNumber":107,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-03-18"},{"lineNumber":108,"author":{"gitId":"HappyM0ment"},"content":"            else if(separatedInput[1].split(\"/by\").length \u003c 2)","lastModifiedDate":"2023-03-18"},{"lineNumber":109,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-03-18"},{"lineNumber":110,"author":{"gitId":"HappyM0ment"},"content":"                throw new DukeException(\"☹ OOPS!!! \" + separatedInput[0] + \" is missing a deadline\");","lastModifiedDate":"2023-03-18"},{"lineNumber":111,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-03-18"},{"lineNumber":112,"author":{"gitId":"HappyM0ment"},"content":"            else","lastModifiedDate":"2023-03-18"},{"lineNumber":113,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-03-18"},{"lineNumber":114,"author":{"gitId":"HappyM0ment"},"content":"                return separatedInput;","lastModifiedDate":"2023-03-18"},{"lineNumber":115,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-03-18"},{"lineNumber":116,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-03-18"},{"lineNumber":117,"author":{"gitId":"HappyM0ment"},"content":"        else if(separatedInput[0].equalsIgnoreCase(\"Event\"))","lastModifiedDate":"2023-03-18"},{"lineNumber":118,"author":{"gitId":"HappyM0ment"},"content":"        {","lastModifiedDate":"2023-03-18"},{"lineNumber":119,"author":{"gitId":"HappyM0ment"},"content":"            if (separatedInput.length \u003c 2)","lastModifiedDate":"2023-03-18"},{"lineNumber":120,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-03-18"},{"lineNumber":121,"author":{"gitId":"HappyM0ment"},"content":"                throw new DukeException(\"☹ OOPS!!! The description of a \" + separatedInput[0] + \" cannot be empty.\");","lastModifiedDate":"2023-03-18"},{"lineNumber":122,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-03-18"},{"lineNumber":123,"author":{"gitId":"HappyM0ment"},"content":"            else if (!separatedInput[1].contains(\"/from\"))","lastModifiedDate":"2023-03-19"},{"lineNumber":124,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-03-19"},{"lineNumber":125,"author":{"gitId":"HappyM0ment"},"content":"                throw new DukeException(\"☹ OOPS!!! \" + separatedInput[0] + \" is missing a \\\"/from\\\" for deadline\");","lastModifiedDate":"2023-03-21"},{"lineNumber":126,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-03-19"},{"lineNumber":127,"author":{"gitId":"HappyM0ment"},"content":"            else if (!separatedInput[1].contains(\"/to\"))","lastModifiedDate":"2023-03-19"},{"lineNumber":128,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-03-19"},{"lineNumber":129,"author":{"gitId":"HappyM0ment"},"content":"                throw new DukeException(\"☹ OOPS!!! \" + separatedInput[0] + \" is missing a \\\"/to\\\" for deadline\");","lastModifiedDate":"2023-03-21"},{"lineNumber":130,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-03-19"},{"lineNumber":131,"author":{"gitId":"HappyM0ment"},"content":"            else","lastModifiedDate":"2023-03-18"},{"lineNumber":132,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-03-18"},{"lineNumber":133,"author":{"gitId":"HappyM0ment"},"content":"                //separate \"/from\" \u0026 \"/to\" to check for variable before returning separatedInput","lastModifiedDate":"2023-03-19"},{"lineNumber":134,"author":{"gitId":"HappyM0ment"},"content":"                return separatedInput;","lastModifiedDate":"2023-03-18"},{"lineNumber":135,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-03-18"},{"lineNumber":136,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-03-18"},{"lineNumber":137,"author":{"gitId":"HappyM0ment"},"content":"        else if(separatedInput[0].equalsIgnoreCase(\"Todo\"))","lastModifiedDate":"2023-03-18"},{"lineNumber":138,"author":{"gitId":"HappyM0ment"},"content":"        {","lastModifiedDate":"2023-03-18"},{"lineNumber":139,"author":{"gitId":"HappyM0ment"},"content":"            if (separatedInput.length \u003c 2)","lastModifiedDate":"2023-03-18"},{"lineNumber":140,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-03-18"},{"lineNumber":141,"author":{"gitId":"HappyM0ment"},"content":"                throw new DukeException(\"☹ OOPS!!! The description of a \" + separatedInput[0] + \" cannot be empty.\");","lastModifiedDate":"2023-03-18"},{"lineNumber":142,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-03-18"},{"lineNumber":143,"author":{"gitId":"HappyM0ment"},"content":"            else","lastModifiedDate":"2023-03-18"},{"lineNumber":144,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-03-18"},{"lineNumber":145,"author":{"gitId":"HappyM0ment"},"content":"                return separatedInput;","lastModifiedDate":"2023-03-18"},{"lineNumber":146,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-03-18"},{"lineNumber":147,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-03-18"},{"lineNumber":148,"author":{"gitId":"HappyM0ment"},"content":"        else if (separatedInput[0].equalsIgnoreCase(\"Mark\") || separatedInput[0].equalsIgnoreCase(\"Unmark\") || separatedInput[0].equalsIgnoreCase(\"Delete\"))","lastModifiedDate":"2023-03-18"},{"lineNumber":149,"author":{"gitId":"HappyM0ment"},"content":"        {","lastModifiedDate":"2023-03-18"},{"lineNumber":150,"author":{"gitId":"HappyM0ment"},"content":"            if (separatedInput.length \u003c 2)","lastModifiedDate":"2023-03-18"},{"lineNumber":151,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-03-18"},{"lineNumber":152,"author":{"gitId":"HappyM0ment"},"content":"                throw new DukeException(\"☹ OOPS!!! The value after \" + separatedInput[0] + \" cannot be empty.\");","lastModifiedDate":"2023-03-18"},{"lineNumber":153,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-03-18"},{"lineNumber":154,"author":{"gitId":"HappyM0ment"},"content":"            else if (!isNumber(separatedInput[1]))","lastModifiedDate":"2023-03-18"},{"lineNumber":155,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-03-18"},{"lineNumber":156,"author":{"gitId":"HappyM0ment"},"content":"                throw new DukeException(\"☹ OOPS!!! The value after \" + separatedInput[0] + \" must be a number.\");","lastModifiedDate":"2023-03-18"},{"lineNumber":157,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-03-18"},{"lineNumber":158,"author":{"gitId":"HappyM0ment"},"content":"            else if (Integer.parseInt(separatedInput[1]) \u003e currList.size())","lastModifiedDate":"2023-03-19"},{"lineNumber":159,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-03-19"},{"lineNumber":160,"author":{"gitId":"HappyM0ment"},"content":"                throw new DukeException(\"☹ OOPS!!! The index after command \" + separatedInput[0] + \" is over the list.\");","lastModifiedDate":"2023-03-19"},{"lineNumber":161,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-03-19"},{"lineNumber":162,"author":{"gitId":"HappyM0ment"},"content":"            else","lastModifiedDate":"2023-03-18"},{"lineNumber":163,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-03-18"},{"lineNumber":164,"author":{"gitId":"HappyM0ment"},"content":"                return separatedInput;","lastModifiedDate":"2023-03-18"},{"lineNumber":165,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-03-18"},{"lineNumber":166,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-03-18"},{"lineNumber":167,"author":{"gitId":"HappyM0ment"},"content":"        else","lastModifiedDate":"2023-03-18"},{"lineNumber":168,"author":{"gitId":"HappyM0ment"},"content":"        {","lastModifiedDate":"2023-03-18"},{"lineNumber":169,"author":{"gitId":"HappyM0ment"},"content":"            //any other starting words besides the functions list, throws error","lastModifiedDate":"2023-03-18"},{"lineNumber":170,"author":{"gitId":"HappyM0ment"},"content":"            throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-03-18"},{"lineNumber":171,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-03-18"},{"lineNumber":172,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-18"},{"lineNumber":173,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":174,"author":{"gitId":"HappyM0ment"},"content":"    public static void main(String[] args)","lastModifiedDate":"2023-03-30"},{"lineNumber":175,"author":{"gitId":"HappyM0ment"},"content":"    {","lastModifiedDate":"2023-03-30"},{"lineNumber":176,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":177,"author":{"gitId":"HappyM0ment"},"content":"        //variable initialization","lastModifiedDate":"2023-02-08"},{"lineNumber":178,"author":{"gitId":"HappyM0ment"},"content":"        Scanner scanObj \u003d new Scanner(System.in); //scanner","lastModifiedDate":"2023-02-13"},{"lineNumber":179,"author":{"gitId":"HappyM0ment"},"content":"        var lists \u003d new ArrayList\u003cTask\u003e(); //string initialize Task arraylist","lastModifiedDate":"2023-03-17"},{"lineNumber":180,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2023-03-30"},{"lineNumber":182,"author":{"gitId":"-"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":183,"author":{"gitId":"-"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":184,"author":{"gitId":"-"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":185,"author":{"gitId":"-"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2019-07-29"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        System.out.println(\"Hello from\\n\" + logo);","lastModifiedDate":"2023-03-30"},{"lineNumber":187,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":188,"author":{"gitId":"HappyM0ment"},"content":"        System.out.println(uiDivider);","lastModifiedDate":"2023-03-30"},{"lineNumber":189,"author":{"gitId":"HappyM0ment"},"content":"        System.out.println(\"Hello! I\u0027m Duke\");","lastModifiedDate":"2023-02-08"},{"lineNumber":190,"author":{"gitId":"HappyM0ment"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2023-02-08"},{"lineNumber":191,"author":{"gitId":"HappyM0ment"},"content":"        System.out.println(uiDivider + \"\\n\");","lastModifiedDate":"2023-03-30"},{"lineNumber":192,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":193,"author":{"gitId":"HappyM0ment"},"content":"        // Get input from user","lastModifiedDate":"2023-02-08"},{"lineNumber":194,"author":{"gitId":"HappyM0ment"},"content":"        String input \u003d scanObj.nextLine();","lastModifiedDate":"2023-02-08"},{"lineNumber":195,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-02-09"},{"lineNumber":196,"author":{"gitId":"HappyM0ment"},"content":"        // Main loop of the programme; exit upon \"Bye\" input","lastModifiedDate":"2023-03-17"},{"lineNumber":197,"author":{"gitId":"HappyM0ment"},"content":"        while(!input.equals(\"bye\"))","lastModifiedDate":"2023-02-09"},{"lineNumber":198,"author":{"gitId":"HappyM0ment"},"content":"        {","lastModifiedDate":"2023-02-08"},{"lineNumber":199,"author":{"gitId":"HappyM0ment"},"content":"            System.out.println(uiDivider);","lastModifiedDate":"2023-03-30"},{"lineNumber":200,"author":{"gitId":"HappyM0ment"},"content":"            if(input.equals(\"list\"))","lastModifiedDate":"2023-02-13"},{"lineNumber":201,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-02-13"},{"lineNumber":202,"author":{"gitId":"HappyM0ment"},"content":"                System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2023-03-17"},{"lineNumber":203,"author":{"gitId":"HappyM0ment"},"content":"                for(int i \u003d 0; i \u003c lists.size(); i++)","lastModifiedDate":"2023-02-13"},{"lineNumber":204,"author":{"gitId":"HappyM0ment"},"content":"                {","lastModifiedDate":"2023-02-13"},{"lineNumber":205,"author":{"gitId":"HappyM0ment"},"content":"                    System.out.println(i+1 + \".\" + lists.get(i).toString());","lastModifiedDate":"2023-03-17"},{"lineNumber":206,"author":{"gitId":"HappyM0ment"},"content":"                }","lastModifiedDate":"2023-03-17"},{"lineNumber":207,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-02-13"},{"lineNumber":208,"author":{"gitId":"HappyM0ment"},"content":"            else if (checkInputForMarkAction(input))","lastModifiedDate":"2023-03-17"},{"lineNumber":209,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-03-17"},{"lineNumber":210,"author":{"gitId":"HappyM0ment"},"content":"                //This condition checks if the Mark Action needs to be executed","lastModifiedDate":"2023-03-17"},{"lineNumber":211,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":212,"author":{"gitId":"HappyM0ment"},"content":"                //retrieve the index to be marked","lastModifiedDate":"2023-03-17"},{"lineNumber":213,"author":{"gitId":"HappyM0ment"},"content":"                try{","lastModifiedDate":"2023-03-19"},{"lineNumber":214,"author":{"gitId":"HappyM0ment"},"content":"                    String[] separatedReturn \u003d identifyFunctionsValidateInput(input, lists);","lastModifiedDate":"2023-03-19"},{"lineNumber":215,"author":{"gitId":"HappyM0ment"},"content":"                    int indexInList \u003d Integer.parseInt(separatedReturn[1]) - 1 ;","lastModifiedDate":"2023-03-17"},{"lineNumber":216,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":217,"author":{"gitId":"HappyM0ment"},"content":"                    //set Status of Task to Done","lastModifiedDate":"2023-03-17"},{"lineNumber":218,"author":{"gitId":"HappyM0ment"},"content":"                    lists.get(indexInList).markAsDone();","lastModifiedDate":"2023-03-17"},{"lineNumber":219,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":220,"author":{"gitId":"HappyM0ment"},"content":"                    //Print output as expected","lastModifiedDate":"2023-03-17"},{"lineNumber":221,"author":{"gitId":"HappyM0ment"},"content":"                    System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-03-17"},{"lineNumber":222,"author":{"gitId":"HappyM0ment"},"content":"                    System.out.println(lists.get(indexInList).toString());","lastModifiedDate":"2023-03-17"},{"lineNumber":223,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":224,"author":{"gitId":"HappyM0ment"},"content":"                }","lastModifiedDate":"2023-03-17"},{"lineNumber":225,"author":{"gitId":"HappyM0ment"},"content":"                catch (DukeException de)","lastModifiedDate":"2023-03-19"},{"lineNumber":226,"author":{"gitId":"HappyM0ment"},"content":"                {","lastModifiedDate":"2023-03-17"},{"lineNumber":227,"author":{"gitId":"HappyM0ment"},"content":"                    System.out.println(\"Caught: \" + de);","lastModifiedDate":"2023-03-19"},{"lineNumber":228,"author":{"gitId":"HappyM0ment"},"content":"                }","lastModifiedDate":"2023-03-19"},{"lineNumber":229,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":230,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-03-19"},{"lineNumber":231,"author":{"gitId":"HappyM0ment"},"content":"            else if (checkInputForUnmarkAction(input))","lastModifiedDate":"2023-03-30"},{"lineNumber":232,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-03-30"},{"lineNumber":233,"author":{"gitId":"HappyM0ment"},"content":"                //This condition checks if the Unmark Action needs to be executed","lastModifiedDate":"2023-03-17"},{"lineNumber":234,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":235,"author":{"gitId":"HappyM0ment"},"content":"                //retrieve the index to be unmarked","lastModifiedDate":"2023-03-17"},{"lineNumber":236,"author":{"gitId":"HappyM0ment"},"content":"                try","lastModifiedDate":"2023-03-19"},{"lineNumber":237,"author":{"gitId":"HappyM0ment"},"content":"                {","lastModifiedDate":"2023-03-19"},{"lineNumber":238,"author":{"gitId":"HappyM0ment"},"content":"                    String[] separatedReturn \u003d identifyFunctionsValidateInput(input, lists);","lastModifiedDate":"2023-03-19"},{"lineNumber":239,"author":{"gitId":"HappyM0ment"},"content":"                    int indexInList \u003d Integer.parseInt(separatedReturn[1]) - 1;","lastModifiedDate":"2023-03-17"},{"lineNumber":240,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":241,"author":{"gitId":"HappyM0ment"},"content":"                    //set Status of Task to Undone","lastModifiedDate":"2023-03-17"},{"lineNumber":242,"author":{"gitId":"HappyM0ment"},"content":"                    lists.get(indexInList).markAsUndone();","lastModifiedDate":"2023-03-17"},{"lineNumber":243,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":244,"author":{"gitId":"HappyM0ment"},"content":"                    //Print output as expected","lastModifiedDate":"2023-03-17"},{"lineNumber":245,"author":{"gitId":"HappyM0ment"},"content":"                    System.out.println(\"OK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2023-03-17"},{"lineNumber":246,"author":{"gitId":"HappyM0ment"},"content":"                    System.out.println(lists.get(indexInList).toString());","lastModifiedDate":"2023-03-17"},{"lineNumber":247,"author":{"gitId":"HappyM0ment"},"content":"                }","lastModifiedDate":"2023-02-13"},{"lineNumber":248,"author":{"gitId":"HappyM0ment"},"content":"                catch (DukeException de)","lastModifiedDate":"2023-03-19"},{"lineNumber":249,"author":{"gitId":"HappyM0ment"},"content":"                {","lastModifiedDate":"2023-03-19"},{"lineNumber":250,"author":{"gitId":"HappyM0ment"},"content":"                    System.out.println(\"Caught: \" + de);","lastModifiedDate":"2023-03-19"},{"lineNumber":251,"author":{"gitId":"HappyM0ment"},"content":"                }","lastModifiedDate":"2023-03-19"},{"lineNumber":252,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-03-19"},{"lineNumber":253,"author":{"gitId":"HappyM0ment"},"content":"            else","lastModifiedDate":"2023-02-13"},{"lineNumber":254,"author":{"gitId":"HappyM0ment"},"content":"            {","lastModifiedDate":"2023-02-13"},{"lineNumber":255,"author":{"gitId":"HappyM0ment"},"content":"                //time to start adding DATELINES / TODOS / EVENTS","lastModifiedDate":"2023-03-17"},{"lineNumber":256,"author":{"gitId":"HappyM0ment"},"content":"                try{","lastModifiedDate":"2023-03-18"},{"lineNumber":257,"author":{"gitId":"HappyM0ment"},"content":"                    //this method [identifyFunctionsValidateInput] will validate most commonly seen error and handle it within the method","lastModifiedDate":"2023-03-18"},{"lineNumber":258,"author":{"gitId":"HappyM0ment"},"content":"                    String[] separatedString \u003d identifyFunctionsValidateInput(input, lists);","lastModifiedDate":"2023-03-18"},{"lineNumber":259,"author":{"gitId":"HappyM0ment"},"content":"                    //by doing so, everything after the first space will be stored in the last index of the array","lastModifiedDate":"2023-03-18"},{"lineNumber":260,"author":{"gitId":"HappyM0ment"},"content":"                    if(separatedString[0].equalsIgnoreCase(\"deadline\"))","lastModifiedDate":"2023-03-17"},{"lineNumber":261,"author":{"gitId":"HappyM0ment"},"content":"                    {","lastModifiedDate":"2023-03-17"},{"lineNumber":262,"author":{"gitId":"HappyM0ment"},"content":"                        //Using indexOf method to extract description \u0026 dateline","lastModifiedDate":"2023-03-18"},{"lineNumber":263,"author":{"gitId":"HappyM0ment"},"content":"                        //nextSeparated array will store value in such index","lastModifiedDate":"2023-03-18"},{"lineNumber":264,"author":{"gitId":"HappyM0ment"},"content":"                        //nextSeparated[0] \u003d description;","lastModifiedDate":"2023-03-18"},{"lineNumber":265,"author":{"gitId":"HappyM0ment"},"content":"                        //nextSeparated[1] \u003d deadline;","lastModifiedDate":"2023-03-18"},{"lineNumber":266,"author":{"gitId":"HappyM0ment"},"content":"                        String [] nextSeparated \u003d separatedString[1].split(\"/by\");","lastModifiedDate":"2023-03-18"},{"lineNumber":267,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":268,"author":{"gitId":"HappyM0ment"},"content":"                        Deadline newDeadline \u003d new Deadline(nextSeparated[0].trim(), nextSeparated[1].trim());","lastModifiedDate":"2023-03-18"},{"lineNumber":269,"author":{"gitId":"HappyM0ment"},"content":"                        lists.add(newDeadline);","lastModifiedDate":"2023-03-18"},{"lineNumber":270,"author":{"gitId":"HappyM0ment"},"content":"                        System.out.println(\"Got it. I\u0027ve added this task:\\n\" + newDeadline.toString());","lastModifiedDate":"2023-03-19"},{"lineNumber":271,"author":{"gitId":"HappyM0ment"},"content":"                    }","lastModifiedDate":"2023-03-17"},{"lineNumber":272,"author":{"gitId":"HappyM0ment"},"content":"                    else if(separatedString[0].equalsIgnoreCase(\"event\"))","lastModifiedDate":"2023-03-17"},{"lineNumber":273,"author":{"gitId":"HappyM0ment"},"content":"                    {","lastModifiedDate":"2023-03-17"},{"lineNumber":274,"author":{"gitId":"HappyM0ment"},"content":"                        //Using indexOf method to extract description \u0026 start/end timing","lastModifiedDate":"2023-03-18"},{"lineNumber":275,"author":{"gitId":"HappyM0ment"},"content":"                        //nextSeparated array will store value in such index","lastModifiedDate":"2023-03-18"},{"lineNumber":276,"author":{"gitId":"HappyM0ment"},"content":"                        //nextSeparated[0] \u003d description;","lastModifiedDate":"2023-03-18"},{"lineNumber":277,"author":{"gitId":"HappyM0ment"},"content":"                        //nextSeparated[1] \u003d start/end timing;","lastModifiedDate":"2023-03-18"},{"lineNumber":278,"author":{"gitId":"HappyM0ment"},"content":"                        String [] nextSeparated \u003d separatedString[1].split(\"/from\");","lastModifiedDate":"2023-03-18"},{"lineNumber":279,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":280,"author":{"gitId":"HappyM0ment"},"content":"                        //Using indexOf method again to extract start \u0026 end timing","lastModifiedDate":"2023-03-18"},{"lineNumber":281,"author":{"gitId":"HappyM0ment"},"content":"                        //nextSeparated array will store value in such index","lastModifiedDate":"2023-03-18"},{"lineNumber":282,"author":{"gitId":"HappyM0ment"},"content":"                        //separatedTiming[0] \u003d start timing;","lastModifiedDate":"2023-03-18"},{"lineNumber":283,"author":{"gitId":"HappyM0ment"},"content":"                        //separatedTiming[1] \u003d end timing;","lastModifiedDate":"2023-03-18"},{"lineNumber":284,"author":{"gitId":"HappyM0ment"},"content":"                        String [] separatedTiming \u003d nextSeparated[1].split(\"/to\");","lastModifiedDate":"2023-03-18"},{"lineNumber":285,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":286,"author":{"gitId":"HappyM0ment"},"content":"                        Event newEvent \u003d new Event(nextSeparated[0].trim(), separatedTiming[0].trim(), separatedTiming[1].trim());","lastModifiedDate":"2023-03-18"},{"lineNumber":287,"author":{"gitId":"HappyM0ment"},"content":"                        lists.add(newEvent);","lastModifiedDate":"2023-03-18"},{"lineNumber":288,"author":{"gitId":"HappyM0ment"},"content":"                        System.out.println(\"Got it. I\u0027ve added this task:\\n\" + newEvent.toString());","lastModifiedDate":"2023-03-19"},{"lineNumber":289,"author":{"gitId":"HappyM0ment"},"content":"                    }","lastModifiedDate":"2023-03-17"},{"lineNumber":290,"author":{"gitId":"HappyM0ment"},"content":"                    else if (separatedString[0].equalsIgnoreCase(\"todo\"))","lastModifiedDate":"2023-03-18"},{"lineNumber":291,"author":{"gitId":"HappyM0ment"},"content":"                    {","lastModifiedDate":"2023-03-17"},{"lineNumber":292,"author":{"gitId":"HappyM0ment"},"content":"                        Todo newTodo \u003d new Todo(separatedString[1]);","lastModifiedDate":"2023-03-18"},{"lineNumber":293,"author":{"gitId":"HappyM0ment"},"content":"                        lists.add(newTodo);","lastModifiedDate":"2023-03-17"},{"lineNumber":294,"author":{"gitId":"HappyM0ment"},"content":"                        System.out.println(\"Got it. I\u0027ve added this task:\\n\" + newTodo.toString());","lastModifiedDate":"2023-03-19"},{"lineNumber":295,"author":{"gitId":"HappyM0ment"},"content":"                    }","lastModifiedDate":"2023-02-13"},{"lineNumber":296,"author":{"gitId":"HappyM0ment"},"content":"                    else if (separatedString[0].equalsIgnoreCase(\"delete\"))","lastModifiedDate":"2023-03-18"},{"lineNumber":297,"author":{"gitId":"HappyM0ment"},"content":"                    {","lastModifiedDate":"2023-03-18"},{"lineNumber":298,"author":{"gitId":"HappyM0ment"},"content":"                        int indexInList \u003d Integer.parseInt(separatedString[1]) - 1 ;","lastModifiedDate":"2023-03-18"},{"lineNumber":299,"author":{"gitId":"HappyM0ment"},"content":"                        Task item \u003d lists.get(indexInList);","lastModifiedDate":"2023-03-18"},{"lineNumber":300,"author":{"gitId":"HappyM0ment"},"content":"                        lists.remove(indexInList);","lastModifiedDate":"2023-03-18"},{"lineNumber":301,"author":{"gitId":"HappyM0ment"},"content":"                        System.out.println(\"Noted. I\u0027ve removed this task:\\n\" + item.toString());","lastModifiedDate":"2023-03-18"},{"lineNumber":302,"author":{"gitId":"HappyM0ment"},"content":"                    }","lastModifiedDate":"2023-03-18"},{"lineNumber":303,"author":{"gitId":"HappyM0ment"},"content":"                    else","lastModifiedDate":"2023-03-18"},{"lineNumber":304,"author":{"gitId":"HappyM0ment"},"content":"                    {","lastModifiedDate":"2023-03-18"},{"lineNumber":305,"author":{"gitId":"HappyM0ment"},"content":"                        System.out.println(separatedString[0] + \" is unknown!\");","lastModifiedDate":"2023-03-18"},{"lineNumber":306,"author":{"gitId":"HappyM0ment"},"content":"                    }","lastModifiedDate":"2023-03-18"},{"lineNumber":307,"author":{"gitId":"HappyM0ment"},"content":"                    System.out.println(\"Now you have \" + lists.size() + \" task(s) in the list\");","lastModifiedDate":"2023-03-18"},{"lineNumber":308,"author":{"gitId":"HappyM0ment"},"content":"                }","lastModifiedDate":"2023-03-17"},{"lineNumber":309,"author":{"gitId":"HappyM0ment"},"content":"                catch (DukeException de)","lastModifiedDate":"2023-03-18"},{"lineNumber":310,"author":{"gitId":"HappyM0ment"},"content":"                {","lastModifiedDate":"2023-03-18"},{"lineNumber":311,"author":{"gitId":"HappyM0ment"},"content":"                    System.out.println(\"Caught: \" + de);","lastModifiedDate":"2023-03-18"},{"lineNumber":312,"author":{"gitId":"HappyM0ment"},"content":"                }","lastModifiedDate":"2023-03-18"},{"lineNumber":313,"author":{"gitId":"HappyM0ment"},"content":"            }","lastModifiedDate":"2023-03-18"},{"lineNumber":314,"author":{"gitId":"HappyM0ment"},"content":"            System.out.println(uiDivider + \"\\n\");","lastModifiedDate":"2023-03-30"},{"lineNumber":315,"author":{"gitId":"HappyM0ment"},"content":"            input \u003d scanObj.nextLine();","lastModifiedDate":"2023-02-09"},{"lineNumber":316,"author":{"gitId":"HappyM0ment"},"content":"        }","lastModifiedDate":"2023-02-08"},{"lineNumber":317,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":318,"author":{"gitId":"HappyM0ment"},"content":"        // Motherhood Statement when bye is key-ed in","lastModifiedDate":"2023-02-09"},{"lineNumber":319,"author":{"gitId":"HappyM0ment"},"content":"        System.out.println(uiDivider);","lastModifiedDate":"2023-03-30"},{"lineNumber":320,"author":{"gitId":"HappyM0ment"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-02-09"},{"lineNumber":321,"author":{"gitId":"HappyM0ment"},"content":"        System.out.println(uiDivider);","lastModifiedDate":"2023-03-30"},{"lineNumber":322,"author":{"gitId":"HappyM0ment"},"content":"        // End of programme","lastModifiedDate":"2023-02-09"},{"lineNumber":323,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-02-08"},{"lineNumber":324,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":325,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"HappyM0ment":316,"-":9}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HappyM0ment"},"content":"////////////////////////////////////////////////","lastModifiedDate":"2023-03-18"},{"lineNumber":2,"author":{"gitId":"HappyM0ment"},"content":"//  DONE BY: A0227169X; ANG JIA JIN, GABRIEL  //","lastModifiedDate":"2023-03-18"},{"lineNumber":3,"author":{"gitId":"HappyM0ment"},"content":"////////////////////////////////////////////////","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"HappyM0ment"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"HappyM0ment"},"content":"    public DukeException(String errMsg) {","lastModifiedDate":"2023-03-18"},{"lineNumber":6,"author":{"gitId":"HappyM0ment"},"content":"        super(errMsg);","lastModifiedDate":"2023-03-18"},{"lineNumber":7,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-18"},{"lineNumber":8,"author":{"gitId":"HappyM0ment"},"content":"}","lastModifiedDate":"2023-03-18"}],"authorContributionMap":{"HappyM0ment":8}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HappyM0ment"},"content":"////////////////////////////////////////////////","lastModifiedDate":"2023-03-17"},{"lineNumber":2,"author":{"gitId":"HappyM0ment"},"content":"//  DONE BY: A0227169X; ANG JIA JIN, GABRIEL  //","lastModifiedDate":"2023-03-17"},{"lineNumber":3,"author":{"gitId":"HappyM0ment"},"content":"////////////////////////////////////////////////","lastModifiedDate":"2023-03-17"},{"lineNumber":4,"author":{"gitId":"HappyM0ment"},"content":"public class Event extends Task {","lastModifiedDate":"2023-03-17"},{"lineNumber":5,"author":{"gitId":"HappyM0ment"},"content":"    ///////////////////","lastModifiedDate":"2023-03-18"},{"lineNumber":6,"author":{"gitId":"HappyM0ment"},"content":"    //  Attributes   //","lastModifiedDate":"2023-03-18"},{"lineNumber":7,"author":{"gitId":"HappyM0ment"},"content":"    ///////////////////","lastModifiedDate":"2023-03-18"},{"lineNumber":8,"author":{"gitId":"HappyM0ment"},"content":"    protected String start;","lastModifiedDate":"2023-03-17"},{"lineNumber":9,"author":{"gitId":"HappyM0ment"},"content":"    protected String end;","lastModifiedDate":"2023-03-17"},{"lineNumber":10,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":11,"author":{"gitId":"HappyM0ment"},"content":"    ///////////////////","lastModifiedDate":"2023-03-18"},{"lineNumber":12,"author":{"gitId":"HappyM0ment"},"content":"    //  Constructor  //","lastModifiedDate":"2023-03-18"},{"lineNumber":13,"author":{"gitId":"HappyM0ment"},"content":"    ///////////////////","lastModifiedDate":"2023-03-18"},{"lineNumber":14,"author":{"gitId":"HappyM0ment"},"content":"    public Event(String description, String start, String end) {","lastModifiedDate":"2023-03-17"},{"lineNumber":15,"author":{"gitId":"HappyM0ment"},"content":"        super(description);","lastModifiedDate":"2023-03-17"},{"lineNumber":16,"author":{"gitId":"HappyM0ment"},"content":"        this.start \u003d start;","lastModifiedDate":"2023-03-17"},{"lineNumber":17,"author":{"gitId":"HappyM0ment"},"content":"        this.end \u003d end;","lastModifiedDate":"2023-03-17"},{"lineNumber":18,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":19,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":20,"author":{"gitId":"HappyM0ment"},"content":"    /////////////////////////////////////////////////////////////","lastModifiedDate":"2023-03-18"},{"lineNumber":21,"author":{"gitId":"HappyM0ment"},"content":"    //  getStart() method will return the start value of Task  //","lastModifiedDate":"2023-03-18"},{"lineNumber":22,"author":{"gitId":"HappyM0ment"},"content":"    /////////////////////////////////////////////////////////////","lastModifiedDate":"2023-03-18"},{"lineNumber":23,"author":{"gitId":"HappyM0ment"},"content":"    public String getStart() {","lastModifiedDate":"2023-03-17"},{"lineNumber":24,"author":{"gitId":"HappyM0ment"},"content":"        return start;","lastModifiedDate":"2023-03-17"},{"lineNumber":25,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":26,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":27,"author":{"gitId":"HappyM0ment"},"content":"    /////////////////////////////////////////////////////////////","lastModifiedDate":"2023-03-18"},{"lineNumber":28,"author":{"gitId":"HappyM0ment"},"content":"    //  setStart() method will change the start value of Task  //","lastModifiedDate":"2023-03-18"},{"lineNumber":29,"author":{"gitId":"HappyM0ment"},"content":"    /////////////////////////////////////////////////////////////","lastModifiedDate":"2023-03-18"},{"lineNumber":30,"author":{"gitId":"HappyM0ment"},"content":"    public void setStart(String start) {","lastModifiedDate":"2023-03-17"},{"lineNumber":31,"author":{"gitId":"HappyM0ment"},"content":"        this.start \u003d start;","lastModifiedDate":"2023-03-17"},{"lineNumber":32,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":33,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":34,"author":{"gitId":"HappyM0ment"},"content":"    /////////////////////////////////////////////////////////","lastModifiedDate":"2023-03-18"},{"lineNumber":35,"author":{"gitId":"HappyM0ment"},"content":"    //  getEnd() method will return the end value of Task  //","lastModifiedDate":"2023-03-18"},{"lineNumber":36,"author":{"gitId":"HappyM0ment"},"content":"    /////////////////////////////////////////////////////////","lastModifiedDate":"2023-03-18"},{"lineNumber":37,"author":{"gitId":"HappyM0ment"},"content":"    public String getEnd() {","lastModifiedDate":"2023-03-17"},{"lineNumber":38,"author":{"gitId":"HappyM0ment"},"content":"        return end;","lastModifiedDate":"2023-03-17"},{"lineNumber":39,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":40,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":41,"author":{"gitId":"HappyM0ment"},"content":"    /////////////////////////////////////////////////////////","lastModifiedDate":"2023-03-18"},{"lineNumber":42,"author":{"gitId":"HappyM0ment"},"content":"    //  setEnd() method will change the end value of Task  //","lastModifiedDate":"2023-03-18"},{"lineNumber":43,"author":{"gitId":"HappyM0ment"},"content":"    /////////////////////////////////////////////////////////","lastModifiedDate":"2023-03-18"},{"lineNumber":44,"author":{"gitId":"HappyM0ment"},"content":"    public void setEnd(String end) {","lastModifiedDate":"2023-03-17"},{"lineNumber":45,"author":{"gitId":"HappyM0ment"},"content":"        this.end \u003d end;","lastModifiedDate":"2023-03-17"},{"lineNumber":46,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":47,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":48,"author":{"gitId":"HappyM0ment"},"content":"    ///////////////////////////////////////////////////////////////","lastModifiedDate":"2023-03-18"},{"lineNumber":49,"author":{"gitId":"HappyM0ment"},"content":"    //  toString() method will print out Task\u0027s standard output  //","lastModifiedDate":"2023-03-18"},{"lineNumber":50,"author":{"gitId":"HappyM0ment"},"content":"    ///////////////////////////////////////////////////////////////","lastModifiedDate":"2023-03-18"},{"lineNumber":51,"author":{"gitId":"HappyM0ment"},"content":"    @Override","lastModifiedDate":"2023-03-17"},{"lineNumber":52,"author":{"gitId":"HappyM0ment"},"content":"    public String toString() {","lastModifiedDate":"2023-03-17"},{"lineNumber":53,"author":{"gitId":"HappyM0ment"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + start + \" to: \" + end + \")\";","lastModifiedDate":"2023-03-17"},{"lineNumber":54,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":55,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":56,"author":{"gitId":"HappyM0ment"},"content":"}","lastModifiedDate":"2023-03-17"}],"authorContributionMap":{"HappyM0ment":56}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HappyM0ment"},"content":"////////////////////////////////////////////////","lastModifiedDate":"2023-03-17"},{"lineNumber":2,"author":{"gitId":"HappyM0ment"},"content":"//  DONE BY: A0227169X; ANG JIA JIN, GABRIEL  //","lastModifiedDate":"2023-03-17"},{"lineNumber":3,"author":{"gitId":"HappyM0ment"},"content":"////////////////////////////////////////////////","lastModifiedDate":"2023-03-17"},{"lineNumber":4,"author":{"gitId":"HappyM0ment"},"content":"public class Task {","lastModifiedDate":"2023-03-17"},{"lineNumber":5,"author":{"gitId":"HappyM0ment"},"content":"    ///////////////////","lastModifiedDate":"2023-03-17"},{"lineNumber":6,"author":{"gitId":"HappyM0ment"},"content":"    //  Attributes   //","lastModifiedDate":"2023-03-17"},{"lineNumber":7,"author":{"gitId":"HappyM0ment"},"content":"    ///////////////////","lastModifiedDate":"2023-03-17"},{"lineNumber":8,"author":{"gitId":"HappyM0ment"},"content":"    protected String description;","lastModifiedDate":"2023-03-17"},{"lineNumber":9,"author":{"gitId":"HappyM0ment"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-03-17"},{"lineNumber":10,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":11,"author":{"gitId":"HappyM0ment"},"content":"    ///////////////////","lastModifiedDate":"2023-03-17"},{"lineNumber":12,"author":{"gitId":"HappyM0ment"},"content":"    //  Constructor  //","lastModifiedDate":"2023-03-17"},{"lineNumber":13,"author":{"gitId":"HappyM0ment"},"content":"    ///////////////////","lastModifiedDate":"2023-03-17"},{"lineNumber":14,"author":{"gitId":"HappyM0ment"},"content":"    public Task(String description) {","lastModifiedDate":"2023-03-17"},{"lineNumber":15,"author":{"gitId":"HappyM0ment"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-03-17"},{"lineNumber":16,"author":{"gitId":"HappyM0ment"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-03-17"},{"lineNumber":17,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":18,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":19,"author":{"gitId":"HappyM0ment"},"content":"    ///////////////////////////////////////////////////////////////////","lastModifiedDate":"2023-03-17"},{"lineNumber":20,"author":{"gitId":"HappyM0ment"},"content":"    //  getDescription() method will return the description of Task  //","lastModifiedDate":"2023-03-17"},{"lineNumber":21,"author":{"gitId":"HappyM0ment"},"content":"    ///////////////////////////////////////////////////////////////////","lastModifiedDate":"2023-03-17"},{"lineNumber":22,"author":{"gitId":"HappyM0ment"},"content":"    public String getDescription() {","lastModifiedDate":"2023-03-17"},{"lineNumber":23,"author":{"gitId":"HappyM0ment"},"content":"        return this.description; // returns the value stored in the description attribute","lastModifiedDate":"2023-03-17"},{"lineNumber":24,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":25,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":26,"author":{"gitId":"HappyM0ment"},"content":"    ///////////////////////////////////////////////////////////////////","lastModifiedDate":"2023-03-17"},{"lineNumber":27,"author":{"gitId":"HappyM0ment"},"content":"    //  setDescription() method will change the description of Task  //","lastModifiedDate":"2023-03-17"},{"lineNumber":28,"author":{"gitId":"HappyM0ment"},"content":"    ///////////////////////////////////////////////////////////////////","lastModifiedDate":"2023-03-17"},{"lineNumber":29,"author":{"gitId":"HappyM0ment"},"content":"    public void setDescription(String newDescription) {","lastModifiedDate":"2023-03-17"},{"lineNumber":30,"author":{"gitId":"HappyM0ment"},"content":"        this.description \u003d newDescription; // changes the description with the new input","lastModifiedDate":"2023-03-17"},{"lineNumber":31,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":32,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":33,"author":{"gitId":"HappyM0ment"},"content":"    /////////////////////////////////////////////////////////////////","lastModifiedDate":"2023-03-17"},{"lineNumber":34,"author":{"gitId":"HappyM0ment"},"content":"    //  getTaskStatus() method will return the status of the Task  //","lastModifiedDate":"2023-03-17"},{"lineNumber":35,"author":{"gitId":"HappyM0ment"},"content":"    /////////////////////////////////////////////////////////////////","lastModifiedDate":"2023-03-17"},{"lineNumber":36,"author":{"gitId":"HappyM0ment"},"content":"    public String getTaskStatus() {","lastModifiedDate":"2023-03-17"},{"lineNumber":37,"author":{"gitId":"HappyM0ment"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2023-03-17"},{"lineNumber":38,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":39,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":40,"author":{"gitId":"HappyM0ment"},"content":"    ////////////////////////////////////////////////////////////////////////////////////////////////////","lastModifiedDate":"2023-03-17"},{"lineNumber":41,"author":{"gitId":"HappyM0ment"},"content":"    //  markAsDone() method will mark the current task object as done by changing the isDone to TRUE  //","lastModifiedDate":"2023-03-17"},{"lineNumber":42,"author":{"gitId":"HappyM0ment"},"content":"    ////////////////////////////////////////////////////////////////////////////////////////////////////","lastModifiedDate":"2023-03-17"},{"lineNumber":43,"author":{"gitId":"HappyM0ment"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-03-17"},{"lineNumber":44,"author":{"gitId":"HappyM0ment"},"content":"        this.isDone \u003d true; // converts isDone attribute to \u0027TRUE\u0027","lastModifiedDate":"2023-03-17"},{"lineNumber":45,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":46,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":47,"author":{"gitId":"HappyM0ment"},"content":"    ////////////////////////////////////////////////////////////////////////////////////////////////////////////","lastModifiedDate":"2023-03-17"},{"lineNumber":48,"author":{"gitId":"HappyM0ment"},"content":"    //  markAsUndone() method will un-mark the current task object as undone by changing the isDone to FALSE  //","lastModifiedDate":"2023-03-17"},{"lineNumber":49,"author":{"gitId":"HappyM0ment"},"content":"    ////////////////////////////////////////////////////////////////////////////////////////////////////////////","lastModifiedDate":"2023-03-17"},{"lineNumber":50,"author":{"gitId":"HappyM0ment"},"content":"    public void markAsUndone() {","lastModifiedDate":"2023-03-17"},{"lineNumber":51,"author":{"gitId":"HappyM0ment"},"content":"        this.isDone \u003d false; // converts isDone attribute to \u0027FALSE\u0027","lastModifiedDate":"2023-03-17"},{"lineNumber":52,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":53,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":54,"author":{"gitId":"HappyM0ment"},"content":"    ///////////////////////////////////////////////////////////////","lastModifiedDate":"2023-03-17"},{"lineNumber":55,"author":{"gitId":"HappyM0ment"},"content":"    //  toString() method will print out Task\u0027s standard output  //","lastModifiedDate":"2023-03-17"},{"lineNumber":56,"author":{"gitId":"HappyM0ment"},"content":"    ///////////////////////////////////////////////////////////////","lastModifiedDate":"2023-03-17"},{"lineNumber":57,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":58,"author":{"gitId":"HappyM0ment"},"content":"    @Override","lastModifiedDate":"2023-03-17"},{"lineNumber":59,"author":{"gitId":"HappyM0ment"},"content":"    public String toString() {","lastModifiedDate":"2023-03-17"},{"lineNumber":60,"author":{"gitId":"HappyM0ment"},"content":"        return \"[\" + this.getTaskStatus() + \"] \" + this.description;","lastModifiedDate":"2023-03-17"},{"lineNumber":61,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":62,"author":{"gitId":"HappyM0ment"},"content":"}","lastModifiedDate":"2023-03-17"}],"authorContributionMap":{"HappyM0ment":62}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HappyM0ment"},"content":"////////////////////////////////////////////////","lastModifiedDate":"2023-03-17"},{"lineNumber":2,"author":{"gitId":"HappyM0ment"},"content":"//  DONE BY: A0227169X; ANG JIA JIN, GABRIEL  //","lastModifiedDate":"2023-03-17"},{"lineNumber":3,"author":{"gitId":"HappyM0ment"},"content":"////////////////////////////////////////////////","lastModifiedDate":"2023-03-17"},{"lineNumber":4,"author":{"gitId":"HappyM0ment"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-03-17"},{"lineNumber":5,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":6,"author":{"gitId":"HappyM0ment"},"content":"    ///////////////////","lastModifiedDate":"2023-03-18"},{"lineNumber":7,"author":{"gitId":"HappyM0ment"},"content":"    //  Constructor  //","lastModifiedDate":"2023-03-18"},{"lineNumber":8,"author":{"gitId":"HappyM0ment"},"content":"    ///////////////////","lastModifiedDate":"2023-03-18"},{"lineNumber":9,"author":{"gitId":"HappyM0ment"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-03-17"},{"lineNumber":10,"author":{"gitId":"HappyM0ment"},"content":"        super(description);","lastModifiedDate":"2023-03-17"},{"lineNumber":11,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":12,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":13,"author":{"gitId":"HappyM0ment"},"content":"    ///////////////////////////////////////////////////////////////","lastModifiedDate":"2023-03-18"},{"lineNumber":14,"author":{"gitId":"HappyM0ment"},"content":"    //  toString() method will print out Task\u0027s standard output  //","lastModifiedDate":"2023-03-18"},{"lineNumber":15,"author":{"gitId":"HappyM0ment"},"content":"    ///////////////////////////////////////////////////////////////","lastModifiedDate":"2023-03-18"},{"lineNumber":16,"author":{"gitId":"HappyM0ment"},"content":"    @Override","lastModifiedDate":"2023-03-17"},{"lineNumber":17,"author":{"gitId":"HappyM0ment"},"content":"    public String toString() {","lastModifiedDate":"2023-03-17"},{"lineNumber":18,"author":{"gitId":"HappyM0ment"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-03-17"},{"lineNumber":19,"author":{"gitId":"HappyM0ment"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":20,"author":{"gitId":"HappyM0ment"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":21,"author":{"gitId":"HappyM0ment"},"content":"}","lastModifiedDate":"2023-03-17"}],"authorContributionMap":{"HappyM0ment":21}}]
