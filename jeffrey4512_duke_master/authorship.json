[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"jeffrey4512"},"content":"# duke.Duke project template","lastModifiedDate":"2023-03-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"jeffrey4512"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-03-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"jeffrey4512":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"jeffrey4512"},"content":"    implementation \u0027junit:junit:4.13.1\u0027","lastModifiedDate":"2023-03-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"jeffrey4512"},"content":"    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.8.1\u0027","lastModifiedDate":"2023-03-15"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"jeffrey4512"},"content":"sourceSets {","lastModifiedDate":"2023-03-15"},{"lineNumber":18,"author":{"gitId":"jeffrey4512"},"content":"    test {","lastModifiedDate":"2023-03-15"},{"lineNumber":19,"author":{"gitId":"jeffrey4512"},"content":"        java.srcDir \u0027src/test\u0027","lastModifiedDate":"2023-03-15"},{"lineNumber":20,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":21,"author":{"gitId":"jeffrey4512"},"content":"}","lastModifiedDate":"2023-03-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    mainClassName \u003d \"seedu.duke.Duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"jeffrey4512"},"content":"jar {","lastModifiedDate":"2023-03-31"},{"lineNumber":41,"author":{"gitId":"jeffrey4512"},"content":"    manifest {","lastModifiedDate":"2023-03-31"},{"lineNumber":42,"author":{"gitId":"jeffrey4512"},"content":"        attributes \u0027Main-Class\u0027: application.mainClassName","lastModifiedDate":"2023-03-31"},{"lineNumber":43,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-03-31"},{"lineNumber":44,"author":{"gitId":"jeffrey4512"},"content":"}","lastModifiedDate":"2023-03-31"},{"lineNumber":45,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"jeffrey4512":12,"-":40}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jeffrey4512"},"content":"D | 1 | H | return book | 02 Dec 2022 6PM","lastModifiedDate":"2023-03-27"},{"lineNumber":2,"author":{"gitId":"jeffrey4512"},"content":"T | 1 | L | jog 2.4km","lastModifiedDate":"2023-03-22"},{"lineNumber":3,"author":{"gitId":"jeffrey4512"},"content":"E | 0 |   | project eve | 03 May 2023 6PM | 03 May 2023 8PM","lastModifiedDate":"2023-03-27"},{"lineNumber":4,"author":{"gitId":"jeffrey4512"},"content":"T | 0 |   | eat food","lastModifiedDate":"2023-03-31"},{"lineNumber":5,"author":{"gitId":"jeffrey4512"},"content":"T | 0 |   | test","lastModifiedDate":"2023-03-31"},{"lineNumber":6,"author":{"gitId":"jeffrey4512"},"content":"T | 0 |   | test","lastModifiedDate":"2023-03-31"},{"lineNumber":7,"author":{"gitId":"jeffrey4512"},"content":"E | 0 |   | project meeting | 02 Dec 2023 6PM | 02 Dec 2023 8PM","lastModifiedDate":"2023-03-31"},{"lineNumber":8,"author":{"gitId":"jeffrey4512"},"content":"E | 0 |   | project meeting | 02 Dec 2023 6PM | 02 Dec 2023 10AM","lastModifiedDate":"2023-03-31"},{"lineNumber":9,"author":{"gitId":"jeffrey4512"},"content":"E | 0 |   | project meeting | 02 Dec 2024 6PM | 02 Dec 2023 8PM","lastModifiedDate":"2023-03-31"},{"lineNumber":10,"author":{"gitId":"jeffrey4512"},"content":"E | 0 |   | project meeting | 02 Dec 2023 6PM | 02 Dec 2024 8PM","lastModifiedDate":"2023-03-31"},{"lineNumber":11,"author":{"gitId":"jeffrey4512"},"content":"E | 0 |   | project meeting | 02 Dec 2023 6PM | 02 Dec 2023 8PM","lastModifiedDate":"2023-03-31"},{"lineNumber":12,"author":{"gitId":"jeffrey4512"},"content":"E | 0 |   | project meeting | 02 Dec 2023 10PM | 02 Dec 2023 8PM","lastModifiedDate":"2023-03-31"},{"lineNumber":13,"author":{"gitId":"jeffrey4512"},"content":"E | 0 |   | project meeting | 02 Dec 2023 6PM | 02 Dec 2023 8PM","lastModifiedDate":"2023-03-31"}],"authorContributionMap":{"jeffrey4512":13}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jeffrey4512"},"content":"package duke;","lastModifiedDate":"2023-03-22"},{"lineNumber":2,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":3,"author":{"gitId":"jeffrey4512"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-03-22"},{"lineNumber":4,"author":{"gitId":"jeffrey4512"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-03-22"},{"lineNumber":5,"author":{"gitId":"jeffrey4512"},"content":"import duke.task.Task;","lastModifiedDate":"2023-03-22"},{"lineNumber":6,"author":{"gitId":"jeffrey4512"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-03-22"},{"lineNumber":7,"author":{"gitId":"jeffrey4512"},"content":"import duke.util.Parser;","lastModifiedDate":"2023-03-22"},{"lineNumber":8,"author":{"gitId":"jeffrey4512"},"content":"import duke.util.Ui;","lastModifiedDate":"2023-03-22"},{"lineNumber":9,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":10,"author":{"gitId":"jeffrey4512"},"content":"import java.io.File;","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-01-21"},{"lineNumber":12,"author":{"gitId":"jeffrey4512"},"content":"/**","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"jeffrey4512"},"content":" * @author Ng Kwang Hai Jeffrey (A0227137H)","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"jeffrey4512"},"content":" * Implemented individual feature 1: C-duke.task.Priority","lastModifiedDate":"2023-03-22"},{"lineNumber":15,"author":{"gitId":"jeffrey4512"},"content":" */","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":17,"author":{"gitId":"jeffrey4512"},"content":"    private Storage storage;","lastModifiedDate":"2023-03-09"},{"lineNumber":18,"author":{"gitId":"jeffrey4512"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-03-16"},{"lineNumber":19,"author":{"gitId":"jeffrey4512"},"content":"    private Ui ui;","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"jeffrey4512"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"jeffrey4512"},"content":"     * The Duke class represents the main component of the duke.Duke application.","lastModifiedDate":"2023-03-31"},{"lineNumber":23,"author":{"gitId":"jeffrey4512"},"content":"     *","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"jeffrey4512"},"content":"     * @param filename the name of the file to store the data.","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"jeffrey4512"},"content":"     * @throws DukeException if there is an error creating the directory or initializing the storage.","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"jeffrey4512"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"jeffrey4512"},"content":"    public Duke(String filename) throws DukeException {","lastModifiedDate":"2023-03-14"},{"lineNumber":28,"author":{"gitId":"jeffrey4512"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-03-14"},{"lineNumber":29,"author":{"gitId":"jeffrey4512"},"content":"        File directory \u003d new File(\"data\"); //The directory of the save file.","lastModifiedDate":"2023-03-14"},{"lineNumber":30,"author":{"gitId":"jeffrey4512"},"content":"        if (!directory.exists()) {","lastModifiedDate":"2023-03-09"},{"lineNumber":31,"author":{"gitId":"jeffrey4512"},"content":"            System.out.println(\"Directory doesn\u0027t exist, creating it now\");","lastModifiedDate":"2023-03-09"},{"lineNumber":32,"author":{"gitId":"jeffrey4512"},"content":"            boolean isDirCreated \u003d directory.mkdir();","lastModifiedDate":"2023-03-14"},{"lineNumber":33,"author":{"gitId":"jeffrey4512"},"content":"            if (isDirCreated) {","lastModifiedDate":"2023-03-14"},{"lineNumber":34,"author":{"gitId":"jeffrey4512"},"content":"                System.out.println(\"Directory created!\");","lastModifiedDate":"2023-03-14"},{"lineNumber":35,"author":{"gitId":"jeffrey4512"},"content":"            } else {","lastModifiedDate":"2023-03-14"},{"lineNumber":36,"author":{"gitId":"jeffrey4512"},"content":"                throw new DukeException(\"OOPS!!! Failed to create directory, please check your folder permission!\");","lastModifiedDate":"2023-03-31"},{"lineNumber":37,"author":{"gitId":"jeffrey4512"},"content":"            }","lastModifiedDate":"2023-03-14"},{"lineNumber":38,"author":{"gitId":"jeffrey4512"},"content":"        }","lastModifiedDate":"2023-02-03"},{"lineNumber":39,"author":{"gitId":"jeffrey4512"},"content":"        storage \u003d new Storage(filename);","lastModifiedDate":"2023-03-10"},{"lineNumber":40,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-01-30"},{"lineNumber":41,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":42,"author":{"gitId":"jeffrey4512"},"content":"    public static void main(String[] args) throws DukeException {","lastModifiedDate":"2023-03-14"},{"lineNumber":43,"author":{"gitId":"jeffrey4512"},"content":"        new Duke(\"data/duke.txt\").run();","lastModifiedDate":"2023-03-14"},{"lineNumber":44,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":45,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":46,"author":{"gitId":"jeffrey4512"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":47,"author":{"gitId":"jeffrey4512"},"content":"     * The run method handles the main functionality of the Duke application.","lastModifiedDate":"2023-03-31"},{"lineNumber":48,"author":{"gitId":"jeffrey4512"},"content":"     * It reads user input and performs the actions based on the command entered by the user.","lastModifiedDate":"2023-03-14"},{"lineNumber":49,"author":{"gitId":"jeffrey4512"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":50,"author":{"gitId":"jeffrey4512"},"content":"    public void run() {","lastModifiedDate":"2023-03-10"},{"lineNumber":51,"author":{"gitId":"jeffrey4512"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2023-03-10"},{"lineNumber":52,"author":{"gitId":"jeffrey4512"},"content":"        String userInput \u003d \"\";","lastModifiedDate":"2023-01-21"},{"lineNumber":53,"author":{"gitId":"jeffrey4512"},"content":"        Task t;","lastModifiedDate":"2023-03-09"},{"lineNumber":54,"author":{"gitId":"jeffrey4512"},"content":"        tasks \u003d new TaskList();","lastModifiedDate":"2023-03-16"},{"lineNumber":55,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":56,"author":{"gitId":"jeffrey4512"},"content":"        //attempt to load data from save file.","lastModifiedDate":"2023-03-22"},{"lineNumber":57,"author":{"gitId":"jeffrey4512"},"content":"        try {","lastModifiedDate":"2023-03-14"},{"lineNumber":58,"author":{"gitId":"jeffrey4512"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2023-03-14"},{"lineNumber":59,"author":{"gitId":"jeffrey4512"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-03-14"},{"lineNumber":60,"author":{"gitId":"jeffrey4512"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-03-14"},{"lineNumber":61,"author":{"gitId":"jeffrey4512"},"content":"            ui.showLoadingError();","lastModifiedDate":"2023-03-14"},{"lineNumber":62,"author":{"gitId":"jeffrey4512"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":63,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":64,"author":{"gitId":"jeffrey4512"},"content":"        ui.showWelcome(); //Display logo","lastModifiedDate":"2023-03-22"},{"lineNumber":65,"author":{"gitId":"jeffrey4512"},"content":"        while (!userInput.equals(\"bye\")) {","lastModifiedDate":"2023-01-21"},{"lineNumber":66,"author":{"gitId":"jeffrey4512"},"content":"            //Read user input.","lastModifiedDate":"2023-01-30"},{"lineNumber":67,"author":{"gitId":"jeffrey4512"},"content":"            userInput \u003d ui.readCommand();","lastModifiedDate":"2023-03-14"},{"lineNumber":68,"author":{"gitId":"jeffrey4512"},"content":"            ui.showLine(); // show the divider line (\"_______\")","lastModifiedDate":"2023-03-14"},{"lineNumber":69,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":70,"author":{"gitId":"jeffrey4512"},"content":"            try {","lastModifiedDate":"2023-02-08"},{"lineNumber":71,"author":{"gitId":"jeffrey4512"},"content":"                //Exit the chatbot.","lastModifiedDate":"2023-01-21"},{"lineNumber":72,"author":{"gitId":"jeffrey4512"},"content":"                if (userInput.equals(\"bye\")) {","lastModifiedDate":"2023-01-21"},{"lineNumber":73,"author":{"gitId":"jeffrey4512"},"content":"                    System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-01-21"},{"lineNumber":74,"author":{"gitId":"jeffrey4512"},"content":"                } else if (parser.isListCommand(userInput)) {","lastModifiedDate":"2023-03-09"},{"lineNumber":75,"author":{"gitId":"jeffrey4512"},"content":"                    //List out all the elements stored.","lastModifiedDate":"2023-03-10"},{"lineNumber":76,"author":{"gitId":"jeffrey4512"},"content":"                    tasks.listTasks();","lastModifiedDate":"2023-03-09"},{"lineNumber":77,"author":{"gitId":"jeffrey4512"},"content":"                } else if (parser.isDeleteCommand(userInput)) {","lastModifiedDate":"2023-03-09"},{"lineNumber":78,"author":{"gitId":"jeffrey4512"},"content":"                    //Deletes a task.","lastModifiedDate":"2023-02-09"},{"lineNumber":79,"author":{"gitId":"jeffrey4512"},"content":"                    tasks.updateTask(userInput);","lastModifiedDate":"2023-03-10"},{"lineNumber":80,"author":{"gitId":"jeffrey4512"},"content":"                } else if (parser.isMarkCommand(userInput)) {","lastModifiedDate":"2023-03-09"},{"lineNumber":81,"author":{"gitId":"jeffrey4512"},"content":"                    //Marks a task as done.","lastModifiedDate":"2023-01-30"},{"lineNumber":82,"author":{"gitId":"jeffrey4512"},"content":"                    tasks.updateTask(userInput);","lastModifiedDate":"2023-03-10"},{"lineNumber":83,"author":{"gitId":"jeffrey4512"},"content":"                } else if (parser.isUnmarkCommand(userInput)) {","lastModifiedDate":"2023-03-09"},{"lineNumber":84,"author":{"gitId":"jeffrey4512"},"content":"                    //unmarks a task as not done.","lastModifiedDate":"2023-01-30"},{"lineNumber":85,"author":{"gitId":"jeffrey4512"},"content":"                    tasks.updateTask(userInput);","lastModifiedDate":"2023-03-10"},{"lineNumber":86,"author":{"gitId":"jeffrey4512"},"content":"                } else if (parser.isToDoCommand(userInput)) {","lastModifiedDate":"2023-03-09"},{"lineNumber":87,"author":{"gitId":"jeffrey4512"},"content":"                    //Create to-do task","lastModifiedDate":"2023-02-09"},{"lineNumber":88,"author":{"gitId":"jeffrey4512"},"content":"                    t \u003d parser.createToDo(userInput);","lastModifiedDate":"2023-03-09"},{"lineNumber":89,"author":{"gitId":"jeffrey4512"},"content":"                    tasks.addTask(t);","lastModifiedDate":"2023-03-09"},{"lineNumber":90,"author":{"gitId":"jeffrey4512"},"content":"                } else if (parser.isDeadlineCommand(userInput)) {","lastModifiedDate":"2023-03-09"},{"lineNumber":91,"author":{"gitId":"jeffrey4512"},"content":"                    //Create Deadline task","lastModifiedDate":"2023-03-27"},{"lineNumber":92,"author":{"gitId":"jeffrey4512"},"content":"                    t \u003d parser.createDeadline(userInput);","lastModifiedDate":"2023-03-09"},{"lineNumber":93,"author":{"gitId":"jeffrey4512"},"content":"                    tasks.addTask(t);","lastModifiedDate":"2023-03-09"},{"lineNumber":94,"author":{"gitId":"jeffrey4512"},"content":"                } else if (parser.isEventCommand(userInput)) {","lastModifiedDate":"2023-03-09"},{"lineNumber":95,"author":{"gitId":"jeffrey4512"},"content":"                    //Create event task","lastModifiedDate":"2023-02-09"},{"lineNumber":96,"author":{"gitId":"jeffrey4512"},"content":"                    t \u003d parser.createEvent(userInput);","lastModifiedDate":"2023-03-09"},{"lineNumber":97,"author":{"gitId":"jeffrey4512"},"content":"                    tasks.addTask(t);","lastModifiedDate":"2023-03-09"},{"lineNumber":98,"author":{"gitId":"jeffrey4512"},"content":"                } else if (parser.isFindCommand(userInput)) {","lastModifiedDate":"2023-03-15"},{"lineNumber":99,"author":{"gitId":"jeffrey4512"},"content":"                    //List out all the elements based on the user\u0027s find keyword.","lastModifiedDate":"2023-03-15"},{"lineNumber":100,"author":{"gitId":"jeffrey4512"},"content":"                    tasks.listFindTasks(userInput);","lastModifiedDate":"2023-03-15"},{"lineNumber":101,"author":{"gitId":"jeffrey4512"},"content":"                } else {","lastModifiedDate":"2023-02-08"},{"lineNumber":102,"author":{"gitId":"jeffrey4512"},"content":"                    throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-03-31"},{"lineNumber":103,"author":{"gitId":"jeffrey4512"},"content":"                }","lastModifiedDate":"2023-02-08"},{"lineNumber":104,"author":{"gitId":"jeffrey4512"},"content":"            } catch (Exception e) {","lastModifiedDate":"2023-02-08"},{"lineNumber":105,"author":{"gitId":"jeffrey4512"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2023-03-14"},{"lineNumber":106,"author":{"gitId":"jeffrey4512"},"content":"            } finally {","lastModifiedDate":"2023-03-14"},{"lineNumber":107,"author":{"gitId":"jeffrey4512"},"content":"                ui.showLine();","lastModifiedDate":"2023-03-14"},{"lineNumber":108,"author":{"gitId":"jeffrey4512"},"content":"                //Save the task into the file.","lastModifiedDate":"2023-03-10"},{"lineNumber":109,"author":{"gitId":"jeffrey4512"},"content":"                storage.save(tasks);","lastModifiedDate":"2023-03-10"},{"lineNumber":110,"author":{"gitId":"jeffrey4512"},"content":"            }","lastModifiedDate":"2023-01-27"},{"lineNumber":111,"author":{"gitId":"jeffrey4512"},"content":"        }","lastModifiedDate":"2023-01-21"},{"lineNumber":112,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":113,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"jeffrey4512":111,"-":2}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jeffrey4512"},"content":"package duke.exception;","lastModifiedDate":"2023-03-22"},{"lineNumber":2,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":3,"author":{"gitId":"jeffrey4512"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-02-08"},{"lineNumber":4,"author":{"gitId":"jeffrey4512"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"jeffrey4512"},"content":"     * Constructor for duke.exception.DukeException class.","lastModifiedDate":"2023-03-22"},{"lineNumber":6,"author":{"gitId":"jeffrey4512"},"content":"     *","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"jeffrey4512"},"content":"     * @param message the error message to be displayed","lastModifiedDate":"2023-03-14"},{"lineNumber":8,"author":{"gitId":"jeffrey4512"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"jeffrey4512"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-02-08"},{"lineNumber":10,"author":{"gitId":"jeffrey4512"},"content":"        super(message);","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":12,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":13,"author":{"gitId":"jeffrey4512"},"content":"    public String toString() {","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"jeffrey4512"},"content":"        return getMessage(); // return only the exception message","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"jeffrey4512"},"content":"}","lastModifiedDate":"2023-02-08"}],"authorContributionMap":{"jeffrey4512":16}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jeffrey4512"},"content":"package duke.storage;","lastModifiedDate":"2023-03-22"},{"lineNumber":2,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":3,"author":{"gitId":"jeffrey4512"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-03-22"},{"lineNumber":4,"author":{"gitId":"jeffrey4512"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-03-22"},{"lineNumber":5,"author":{"gitId":"jeffrey4512"},"content":"import duke.task.Event;","lastModifiedDate":"2023-03-22"},{"lineNumber":6,"author":{"gitId":"jeffrey4512"},"content":"import duke.task.ToDo;","lastModifiedDate":"2023-03-22"},{"lineNumber":7,"author":{"gitId":"jeffrey4512"},"content":"import duke.task.Task;","lastModifiedDate":"2023-03-22"},{"lineNumber":8,"author":{"gitId":"jeffrey4512"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-03-22"},{"lineNumber":9,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":10,"author":{"gitId":"jeffrey4512"},"content":"import java.io.File;","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"jeffrey4512"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-03-10"},{"lineNumber":12,"author":{"gitId":"jeffrey4512"},"content":"import java.io.IOException;","lastModifiedDate":"2023-03-09"},{"lineNumber":13,"author":{"gitId":"jeffrey4512"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-09"},{"lineNumber":14,"author":{"gitId":"jeffrey4512"},"content":"import java.util.List;","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"jeffrey4512"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-03-09"},{"lineNumber":16,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":17,"author":{"gitId":"jeffrey4512"},"content":"/**","lastModifiedDate":"2023-03-14"},{"lineNumber":18,"author":{"gitId":"jeffrey4512"},"content":" * This is a storage class that creates/saves duke\u0027s file","lastModifiedDate":"2023-03-14"},{"lineNumber":19,"author":{"gitId":"jeffrey4512"},"content":" */","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"jeffrey4512"},"content":"public class Storage {","lastModifiedDate":"2023-03-09"},{"lineNumber":21,"author":{"gitId":"jeffrey4512"},"content":"    private File duke_save;","lastModifiedDate":"2023-03-16"},{"lineNumber":22,"author":{"gitId":"jeffrey4512"},"content":"    private String filename;","lastModifiedDate":"2023-03-09"},{"lineNumber":23,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"jeffrey4512"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"jeffrey4512"},"content":"     * Constructor for duke.storage.Storage class","lastModifiedDate":"2023-03-22"},{"lineNumber":26,"author":{"gitId":"jeffrey4512"},"content":"     *","lastModifiedDate":"2023-03-16"},{"lineNumber":27,"author":{"gitId":"jeffrey4512"},"content":"     * @param filename the name of the file to be created if it doesn\u0027t exist","lastModifiedDate":"2023-03-14"},{"lineNumber":28,"author":{"gitId":"jeffrey4512"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":29,"author":{"gitId":"jeffrey4512"},"content":"    public Storage(String filename) {","lastModifiedDate":"2023-03-09"},{"lineNumber":30,"author":{"gitId":"jeffrey4512"},"content":"        this.filename \u003d filename;","lastModifiedDate":"2023-03-09"},{"lineNumber":31,"author":{"gitId":"jeffrey4512"},"content":"        duke_save \u003d new File(filename);","lastModifiedDate":"2023-03-16"},{"lineNumber":32,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":33,"author":{"gitId":"jeffrey4512"},"content":"        if (!duke_save.exists()) {","lastModifiedDate":"2023-03-10"},{"lineNumber":34,"author":{"gitId":"jeffrey4512"},"content":"            try {","lastModifiedDate":"2023-03-10"},{"lineNumber":35,"author":{"gitId":"jeffrey4512"},"content":"                //create a new save file","lastModifiedDate":"2023-03-10"},{"lineNumber":36,"author":{"gitId":"jeffrey4512"},"content":"                boolean isFileCreated \u003d duke_save.createNewFile();","lastModifiedDate":"2023-03-14"},{"lineNumber":37,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":38,"author":{"gitId":"jeffrey4512"},"content":"                if (isFileCreated) {","lastModifiedDate":"2023-03-14"},{"lineNumber":39,"author":{"gitId":"jeffrey4512"},"content":"                    System.out.println(\"New save file created: \" + duke_save.getAbsoluteFile());","lastModifiedDate":"2023-03-10"},{"lineNumber":40,"author":{"gitId":"jeffrey4512"},"content":"                } else {","lastModifiedDate":"2023-03-14"},{"lineNumber":41,"author":{"gitId":"jeffrey4512"},"content":"                    throw new DukeException(\"OOPS!!! Failed to create file, Please check the path and folder permission\");","lastModifiedDate":"2023-03-31"},{"lineNumber":42,"author":{"gitId":"jeffrey4512"},"content":"                }","lastModifiedDate":"2023-03-14"},{"lineNumber":43,"author":{"gitId":"jeffrey4512"},"content":"            } catch (IOException | DukeException io) {","lastModifiedDate":"2023-03-14"},{"lineNumber":44,"author":{"gitId":"jeffrey4512"},"content":"                System.out.println(io.getMessage());","lastModifiedDate":"2023-03-14"},{"lineNumber":45,"author":{"gitId":"jeffrey4512"},"content":"            }","lastModifiedDate":"2023-03-10"},{"lineNumber":46,"author":{"gitId":"jeffrey4512"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":47,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":48,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":49,"author":{"gitId":"jeffrey4512"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":50,"author":{"gitId":"jeffrey4512"},"content":"     * Save user\u0027s task into a file.","lastModifiedDate":"2023-03-31"},{"lineNumber":51,"author":{"gitId":"jeffrey4512"},"content":"     *","lastModifiedDate":"2023-03-16"},{"lineNumber":52,"author":{"gitId":"jeffrey4512"},"content":"     * @param userTask the user\u0027s task list","lastModifiedDate":"2023-03-14"},{"lineNumber":53,"author":{"gitId":"jeffrey4512"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":54,"author":{"gitId":"jeffrey4512"},"content":"    public void save(TaskList userTask) {","lastModifiedDate":"2023-03-10"},{"lineNumber":55,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":56,"author":{"gitId":"jeffrey4512"},"content":"        try {","lastModifiedDate":"2023-03-10"},{"lineNumber":57,"author":{"gitId":"jeffrey4512"},"content":"            FileWriter myWriter \u003d new FileWriter(filename);","lastModifiedDate":"2023-03-16"},{"lineNumber":58,"author":{"gitId":"jeffrey4512"},"content":"            for (int i \u003d 0; i \u003c userTask.getTaskSize(); i++) {","lastModifiedDate":"2023-03-10"},{"lineNumber":59,"author":{"gitId":"jeffrey4512"},"content":"                int status \u003d userTask.getTask(i).getStatus().equals(\"X\") ? 1 : 0;","lastModifiedDate":"2023-03-14"},{"lineNumber":60,"author":{"gitId":"jeffrey4512"},"content":"                String priority \u003d userTask.getTask(i).getPriority();","lastModifiedDate":"2023-03-14"},{"lineNumber":61,"author":{"gitId":"jeffrey4512"},"content":"                String output \u003d userTask.getTask(i).getTaskType() + \" | \" + status + \" | \" + priority + \" | \" + userTask.getTask(i).getDescription();","lastModifiedDate":"2023-03-14"},{"lineNumber":62,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":63,"author":{"gitId":"jeffrey4512"},"content":"                String finalOutput \u003d output + userTask.getTaskDetails(i);","lastModifiedDate":"2023-03-14"},{"lineNumber":64,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":65,"author":{"gitId":"jeffrey4512"},"content":"                try {","lastModifiedDate":"2023-03-10"},{"lineNumber":66,"author":{"gitId":"jeffrey4512"},"content":"                    myWriter.write(finalOutput + \"\\n\");","lastModifiedDate":"2023-03-14"},{"lineNumber":67,"author":{"gitId":"jeffrey4512"},"content":"                } catch (IOException io) {","lastModifiedDate":"2023-03-14"},{"lineNumber":68,"author":{"gitId":"jeffrey4512"},"content":"                    System.out.println(\"An error occurred while writing to the save file.\");","lastModifiedDate":"2023-03-14"},{"lineNumber":69,"author":{"gitId":"jeffrey4512"},"content":"                    io.printStackTrace();","lastModifiedDate":"2023-03-14"},{"lineNumber":70,"author":{"gitId":"jeffrey4512"},"content":"                }","lastModifiedDate":"2023-03-10"},{"lineNumber":71,"author":{"gitId":"jeffrey4512"},"content":"            }","lastModifiedDate":"2023-03-10"},{"lineNumber":72,"author":{"gitId":"jeffrey4512"},"content":"            myWriter.close();","lastModifiedDate":"2023-03-10"},{"lineNumber":73,"author":{"gitId":"jeffrey4512"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-03-10"},{"lineNumber":74,"author":{"gitId":"jeffrey4512"},"content":"            System.out.println(\"An error occurred while accessing the save file.\");","lastModifiedDate":"2023-03-14"},{"lineNumber":75,"author":{"gitId":"jeffrey4512"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-03-10"},{"lineNumber":76,"author":{"gitId":"jeffrey4512"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":77,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":78,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":79,"author":{"gitId":"jeffrey4512"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":80,"author":{"gitId":"jeffrey4512"},"content":"     * Loads user\u0027s task from a file.","lastModifiedDate":"2023-03-14"},{"lineNumber":81,"author":{"gitId":"jeffrey4512"},"content":"     *","lastModifiedDate":"2023-03-16"},{"lineNumber":82,"author":{"gitId":"jeffrey4512"},"content":"     * @return a list of task loaded from the file.","lastModifiedDate":"2023-03-14"},{"lineNumber":83,"author":{"gitId":"jeffrey4512"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":84,"author":{"gitId":"jeffrey4512"},"content":"    public List\u003cTask\u003e load() {","lastModifiedDate":"2023-03-14"},{"lineNumber":85,"author":{"gitId":"jeffrey4512"},"content":"        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-14"},{"lineNumber":86,"author":{"gitId":"jeffrey4512"},"content":"        Task t;","lastModifiedDate":"2023-03-10"},{"lineNumber":87,"author":{"gitId":"jeffrey4512"},"content":"        try {","lastModifiedDate":"2023-03-09"},{"lineNumber":88,"author":{"gitId":"jeffrey4512"},"content":"            //Try to load the file","lastModifiedDate":"2023-03-10"},{"lineNumber":89,"author":{"gitId":"jeffrey4512"},"content":"            Scanner myReader \u003d new Scanner(duke_save);","lastModifiedDate":"2023-03-09"},{"lineNumber":90,"author":{"gitId":"jeffrey4512"},"content":"            if(myReader.hasNextLine()){","lastModifiedDate":"2023-03-22"},{"lineNumber":91,"author":{"gitId":"jeffrey4512"},"content":"                System.out.println(\"File exist, loading data.\");","lastModifiedDate":"2023-03-22"},{"lineNumber":92,"author":{"gitId":"jeffrey4512"},"content":"            }","lastModifiedDate":"2023-03-22"},{"lineNumber":93,"author":{"gitId":"jeffrey4512"},"content":"            while (myReader.hasNextLine()) {","lastModifiedDate":"2023-03-09"},{"lineNumber":94,"author":{"gitId":"jeffrey4512"},"content":"                String data \u003d myReader.nextLine();","lastModifiedDate":"2023-03-09"},{"lineNumber":95,"author":{"gitId":"jeffrey4512"},"content":"                String[] formatSaveDataSplit \u003d data.split(\"\\\\|\");","lastModifiedDate":"2023-03-14"},{"lineNumber":96,"author":{"gitId":"jeffrey4512"},"content":"                assert formatSaveDataSplit.length \u003c 0 : \"Empty save data!\";","lastModifiedDate":"2023-03-31"},{"lineNumber":97,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":98,"author":{"gitId":"jeffrey4512"},"content":"                //Remove all blank spaces","lastModifiedDate":"2023-03-15"},{"lineNumber":99,"author":{"gitId":"jeffrey4512"},"content":"                for (int i \u003d 0; i \u003c formatSaveDataSplit.length; i++) {","lastModifiedDate":"2023-03-14"},{"lineNumber":100,"author":{"gitId":"jeffrey4512"},"content":"                    formatSaveDataSplit[i] \u003d formatSaveDataSplit[i].trim();","lastModifiedDate":"2023-03-14"},{"lineNumber":101,"author":{"gitId":"jeffrey4512"},"content":"                }","lastModifiedDate":"2023-03-09"},{"lineNumber":102,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":103,"author":{"gitId":"jeffrey4512"},"content":"                String description \u003d formatSaveDataSplit[3];","lastModifiedDate":"2023-03-15"},{"lineNumber":104,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":105,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":106,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":107,"author":{"gitId":"jeffrey4512"},"content":"                if (formatSaveDataSplit.length \u003d\u003d 4) {","lastModifiedDate":"2023-03-15"},{"lineNumber":108,"author":{"gitId":"jeffrey4512"},"content":"                    t \u003d new ToDo(description, \"T\");","lastModifiedDate":"2023-03-15"},{"lineNumber":109,"author":{"gitId":"jeffrey4512"},"content":"                    t.setPriority(formatSaveDataSplit[2]);","lastModifiedDate":"2023-03-15"},{"lineNumber":110,"author":{"gitId":"jeffrey4512"},"content":"                    if (formatSaveDataSplit[1].equals(\"1\")) {","lastModifiedDate":"2023-03-14"},{"lineNumber":111,"author":{"gitId":"jeffrey4512"},"content":"                        t.setStatusAsMarked();","lastModifiedDate":"2023-03-14"},{"lineNumber":112,"author":{"gitId":"jeffrey4512"},"content":"                    }","lastModifiedDate":"2023-03-14"},{"lineNumber":113,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":114,"author":{"gitId":"jeffrey4512"},"content":"                    tasks.add(t);","lastModifiedDate":"2023-03-14"},{"lineNumber":115,"author":{"gitId":"jeffrey4512"},"content":"                } else if (formatSaveDataSplit.length \u003d\u003d 5) {","lastModifiedDate":"2023-03-15"},{"lineNumber":116,"author":{"gitId":"jeffrey4512"},"content":"                    t \u003d new Deadline(description, \"D\", formatSaveDataSplit[4]);","lastModifiedDate":"2023-03-15"},{"lineNumber":117,"author":{"gitId":"jeffrey4512"},"content":"                    t.setPriority(formatSaveDataSplit[2]);","lastModifiedDate":"2023-03-15"},{"lineNumber":118,"author":{"gitId":"jeffrey4512"},"content":"                    if (formatSaveDataSplit[1].equals(\"1\")) {","lastModifiedDate":"2023-03-14"},{"lineNumber":119,"author":{"gitId":"jeffrey4512"},"content":"                        t.setStatusAsMarked();","lastModifiedDate":"2023-03-14"},{"lineNumber":120,"author":{"gitId":"jeffrey4512"},"content":"                    }","lastModifiedDate":"2023-03-09"},{"lineNumber":121,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":122,"author":{"gitId":"jeffrey4512"},"content":"                    tasks.add(t);","lastModifiedDate":"2023-03-14"},{"lineNumber":123,"author":{"gitId":"jeffrey4512"},"content":"                } else if (formatSaveDataSplit.length \u003d\u003d 6) {","lastModifiedDate":"2023-03-15"},{"lineNumber":124,"author":{"gitId":"jeffrey4512"},"content":"                    t \u003d new Event(description, \"E\", formatSaveDataSplit[4], formatSaveDataSplit[5]);","lastModifiedDate":"2023-03-15"},{"lineNumber":125,"author":{"gitId":"jeffrey4512"},"content":"                    t.setPriority(formatSaveDataSplit[2]);","lastModifiedDate":"2023-03-15"},{"lineNumber":126,"author":{"gitId":"jeffrey4512"},"content":"                    if (formatSaveDataSplit[1].equals(\"1\")) {","lastModifiedDate":"2023-03-14"},{"lineNumber":127,"author":{"gitId":"jeffrey4512"},"content":"                        t.setStatusAsMarked();","lastModifiedDate":"2023-03-14"},{"lineNumber":128,"author":{"gitId":"jeffrey4512"},"content":"                    }","lastModifiedDate":"2023-03-14"},{"lineNumber":129,"author":{"gitId":"jeffrey4512"},"content":"                    tasks.add(t);","lastModifiedDate":"2023-03-14"},{"lineNumber":130,"author":{"gitId":"jeffrey4512"},"content":"                }","lastModifiedDate":"2023-03-14"},{"lineNumber":131,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":132,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":133,"author":{"gitId":"jeffrey4512"},"content":"            }","lastModifiedDate":"2023-03-14"},{"lineNumber":134,"author":{"gitId":"jeffrey4512"},"content":"            myReader.close();","lastModifiedDate":"2023-03-14"},{"lineNumber":135,"author":{"gitId":"jeffrey4512"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-03-14"},{"lineNumber":136,"author":{"gitId":"jeffrey4512"},"content":"            System.out.println(\"OOPS!!! an error occurred while reading the save file.\");","lastModifiedDate":"2023-03-31"},{"lineNumber":137,"author":{"gitId":"jeffrey4512"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":138,"author":{"gitId":"jeffrey4512"},"content":"        return tasks;","lastModifiedDate":"2023-03-10"},{"lineNumber":139,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":140,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":141,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":142,"author":{"gitId":"jeffrey4512"},"content":"}","lastModifiedDate":"2023-03-09"}],"authorContributionMap":{"jeffrey4512":142}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jeffrey4512"},"content":"package duke.task;","lastModifiedDate":"2023-03-22"},{"lineNumber":2,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":3,"author":{"gitId":"jeffrey4512"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"jeffrey4512"},"content":"    protected String taskType;","lastModifiedDate":"2023-02-03"},{"lineNumber":5,"author":{"gitId":"jeffrey4512"},"content":"    protected String by;","lastModifiedDate":"2023-02-03"},{"lineNumber":6,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"jeffrey4512"},"content":"    public Deadline(String description, String taskType, String by) {","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"jeffrey4512"},"content":"        super(description);","lastModifiedDate":"2023-02-03"},{"lineNumber":9,"author":{"gitId":"jeffrey4512"},"content":"        this.taskType \u003d taskType;","lastModifiedDate":"2023-02-03"},{"lineNumber":10,"author":{"gitId":"jeffrey4512"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-02-03"},{"lineNumber":11,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":12,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":13,"author":{"gitId":"jeffrey4512"},"content":"    //Getter Methods","lastModifiedDate":"2023-02-03"},{"lineNumber":14,"author":{"gitId":"jeffrey4512"},"content":"    public String getTaskType() {","lastModifiedDate":"2023-02-03"},{"lineNumber":15,"author":{"gitId":"jeffrey4512"},"content":"        return taskType;","lastModifiedDate":"2023-02-03"},{"lineNumber":16,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":17,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":18,"author":{"gitId":"jeffrey4512"},"content":"    public String getBy() {","lastModifiedDate":"2023-02-03"},{"lineNumber":19,"author":{"gitId":"jeffrey4512"},"content":"        return by;","lastModifiedDate":"2023-02-03"},{"lineNumber":20,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":21,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":22,"author":{"gitId":"jeffrey4512"},"content":"    //Setter Methods","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"jeffrey4512"},"content":"    public void setBy(String by) {","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"jeffrey4512"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"jeffrey4512"},"content":"    public String toString() {","lastModifiedDate":"2023-02-03"},{"lineNumber":28,"author":{"gitId":"jeffrey4512"},"content":"        return super.toString() + \"(by: \" + by + \")\";","lastModifiedDate":"2023-02-03"},{"lineNumber":29,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":30,"author":{"gitId":"jeffrey4512"},"content":"}","lastModifiedDate":"2023-02-03"}],"authorContributionMap":{"jeffrey4512":30}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jeffrey4512"},"content":"package duke.task;","lastModifiedDate":"2023-03-22"},{"lineNumber":2,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":3,"author":{"gitId":"jeffrey4512"},"content":"import duke.task.Task;","lastModifiedDate":"2023-03-22"},{"lineNumber":4,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":5,"author":{"gitId":"jeffrey4512"},"content":"public class Event extends Task {","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"jeffrey4512"},"content":"    protected String taskType;","lastModifiedDate":"2023-02-03"},{"lineNumber":7,"author":{"gitId":"jeffrey4512"},"content":"    protected String from;","lastModifiedDate":"2023-02-03"},{"lineNumber":8,"author":{"gitId":"jeffrey4512"},"content":"    protected String to;","lastModifiedDate":"2023-02-03"},{"lineNumber":9,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"jeffrey4512"},"content":"    public Event(String description, String taskType, String from, String to) {","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"jeffrey4512"},"content":"        super(description);","lastModifiedDate":"2023-02-03"},{"lineNumber":12,"author":{"gitId":"jeffrey4512"},"content":"        this.taskType \u003d taskType;","lastModifiedDate":"2023-02-03"},{"lineNumber":13,"author":{"gitId":"jeffrey4512"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-02-03"},{"lineNumber":14,"author":{"gitId":"jeffrey4512"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-02-03"},{"lineNumber":15,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":16,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":17,"author":{"gitId":"jeffrey4512"},"content":"    //Getter Methods","lastModifiedDate":"2023-02-03"},{"lineNumber":18,"author":{"gitId":"jeffrey4512"},"content":"    public String getTaskType() {","lastModifiedDate":"2023-02-03"},{"lineNumber":19,"author":{"gitId":"jeffrey4512"},"content":"        return taskType;","lastModifiedDate":"2023-02-03"},{"lineNumber":20,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":21,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"jeffrey4512"},"content":"    public String getFrom() {","lastModifiedDate":"2023-02-03"},{"lineNumber":23,"author":{"gitId":"jeffrey4512"},"content":"        return from;","lastModifiedDate":"2023-02-03"},{"lineNumber":24,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":25,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"jeffrey4512"},"content":"    public String getTo() {","lastModifiedDate":"2023-02-03"},{"lineNumber":27,"author":{"gitId":"jeffrey4512"},"content":"        return to;","lastModifiedDate":"2023-02-03"},{"lineNumber":28,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":29,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":30,"author":{"gitId":"jeffrey4512"},"content":"    public String toString() {","lastModifiedDate":"2023-02-03"},{"lineNumber":31,"author":{"gitId":"jeffrey4512"},"content":"        return super.toString() + \"(from: \" + from + \" to: \" + to + \")\";","lastModifiedDate":"2023-02-03"},{"lineNumber":32,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":33,"author":{"gitId":"jeffrey4512"},"content":"}","lastModifiedDate":"2023-02-03"}],"authorContributionMap":{"jeffrey4512":33}},{"path":"src/main/java/duke/task/Priority.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jeffrey4512"},"content":"package duke.task;","lastModifiedDate":"2023-03-22"},{"lineNumber":2,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":3,"author":{"gitId":"jeffrey4512"},"content":"public enum Priority {","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"jeffrey4512"},"content":"    LOW,MEDIUM,HIGH","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"jeffrey4512"},"content":"}","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"jeffrey4512":5}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jeffrey4512"},"content":"package duke.task;","lastModifiedDate":"2023-03-22"},{"lineNumber":2,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":3,"author":{"gitId":"jeffrey4512"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-03-22"},{"lineNumber":4,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":5,"author":{"gitId":"jeffrey4512"},"content":"public class Task {","lastModifiedDate":"2023-01-27"},{"lineNumber":6,"author":{"gitId":"jeffrey4512"},"content":"    protected String description;","lastModifiedDate":"2023-01-27"},{"lineNumber":7,"author":{"gitId":"jeffrey4512"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-01-27"},{"lineNumber":8,"author":{"gitId":"jeffrey4512"},"content":"    protected Priority priority;","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-01-27"},{"lineNumber":10,"author":{"gitId":"jeffrey4512"},"content":"    public Task(String description) {","lastModifiedDate":"2023-01-27"},{"lineNumber":11,"author":{"gitId":"jeffrey4512"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-01-27"},{"lineNumber":12,"author":{"gitId":"jeffrey4512"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-01-27"},{"lineNumber":13,"author":{"gitId":"jeffrey4512"},"content":"        this.priority \u003d null;","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":15,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":16,"author":{"gitId":"jeffrey4512"},"content":"    //Getters method","lastModifiedDate":"2023-03-14"},{"lineNumber":17,"author":{"gitId":"jeffrey4512"},"content":"    public String getStatus() {","lastModifiedDate":"2023-03-09"},{"lineNumber":18,"author":{"gitId":"jeffrey4512"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2023-01-27"},{"lineNumber":19,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-01-27"},{"lineNumber":20,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"jeffrey4512"},"content":"    public String getTaskType() {","lastModifiedDate":"2023-02-03"},{"lineNumber":22,"author":{"gitId":"jeffrey4512"},"content":"        return \" \";","lastModifiedDate":"2023-02-03"},{"lineNumber":23,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":24,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"jeffrey4512"},"content":"    public String getDescription() {","lastModifiedDate":"2023-03-10"},{"lineNumber":26,"author":{"gitId":"jeffrey4512"},"content":"        return description;","lastModifiedDate":"2023-03-10"},{"lineNumber":27,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":28,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":29,"author":{"gitId":"jeffrey4512"},"content":"    /**","lastModifiedDate":"2023-03-16"},{"lineNumber":30,"author":{"gitId":"jeffrey4512"},"content":"     * Retrieves the priority of a task as a string.","lastModifiedDate":"2023-03-16"},{"lineNumber":31,"author":{"gitId":"jeffrey4512"},"content":"     *","lastModifiedDate":"2023-03-16"},{"lineNumber":32,"author":{"gitId":"jeffrey4512"},"content":"     * @return a string of the priority of the task.","lastModifiedDate":"2023-03-16"},{"lineNumber":33,"author":{"gitId":"jeffrey4512"},"content":"     */","lastModifiedDate":"2023-03-16"},{"lineNumber":34,"author":{"gitId":"jeffrey4512"},"content":"    public String getPriority() {","lastModifiedDate":"2023-03-14"},{"lineNumber":35,"author":{"gitId":"jeffrey4512"},"content":"        if (priority \u003d\u003d null) {","lastModifiedDate":"2023-03-22"},{"lineNumber":36,"author":{"gitId":"jeffrey4512"},"content":"            return \" \";","lastModifiedDate":"2023-03-14"},{"lineNumber":37,"author":{"gitId":"jeffrey4512"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":38,"author":{"gitId":"jeffrey4512"},"content":"        switch (priority) {","lastModifiedDate":"2023-03-22"},{"lineNumber":39,"author":{"gitId":"jeffrey4512"},"content":"            case LOW:","lastModifiedDate":"2023-03-14"},{"lineNumber":40,"author":{"gitId":"jeffrey4512"},"content":"                return \"L\";","lastModifiedDate":"2023-03-14"},{"lineNumber":41,"author":{"gitId":"jeffrey4512"},"content":"            case MEDIUM:","lastModifiedDate":"2023-03-14"},{"lineNumber":42,"author":{"gitId":"jeffrey4512"},"content":"                return \"M\";","lastModifiedDate":"2023-03-14"},{"lineNumber":43,"author":{"gitId":"jeffrey4512"},"content":"            case HIGH:","lastModifiedDate":"2023-03-14"},{"lineNumber":44,"author":{"gitId":"jeffrey4512"},"content":"                return \"H\";","lastModifiedDate":"2023-03-14"},{"lineNumber":45,"author":{"gitId":"jeffrey4512"},"content":"            default:","lastModifiedDate":"2023-03-14"},{"lineNumber":46,"author":{"gitId":"jeffrey4512"},"content":"                return \" \";","lastModifiedDate":"2023-03-14"},{"lineNumber":47,"author":{"gitId":"jeffrey4512"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":48,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":49,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":50,"author":{"gitId":"jeffrey4512"},"content":"    //Setters method","lastModifiedDate":"2023-03-16"},{"lineNumber":51,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":52,"author":{"gitId":"jeffrey4512"},"content":"    /**","lastModifiedDate":"2023-03-16"},{"lineNumber":53,"author":{"gitId":"jeffrey4512"},"content":"     * Sets the priority of a task based on the given string input for both Mark method and storage load method.","lastModifiedDate":"2023-03-16"},{"lineNumber":54,"author":{"gitId":"jeffrey4512"},"content":"     *","lastModifiedDate":"2023-03-16"},{"lineNumber":55,"author":{"gitId":"jeffrey4512"},"content":"     * @param p a string representing the priority of the task.","lastModifiedDate":"2023-03-16"},{"lineNumber":56,"author":{"gitId":"jeffrey4512"},"content":"     * @throws DukeException if the input string does not match \"HIGH\", \"H\", \"MEDIUM\", \"M\", \"LOW\", \"L\".","lastModifiedDate":"2023-03-16"},{"lineNumber":57,"author":{"gitId":"jeffrey4512"},"content":"     */","lastModifiedDate":"2023-03-16"},{"lineNumber":58,"author":{"gitId":"jeffrey4512"},"content":"    public void setPriority(String p) throws DukeException {","lastModifiedDate":"2023-03-15"},{"lineNumber":59,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":60,"author":{"gitId":"jeffrey4512"},"content":"        assert p !\u003d null : \"priority is null!\";","lastModifiedDate":"2023-03-31"},{"lineNumber":61,"author":{"gitId":"jeffrey4512"},"content":"        ","lastModifiedDate":"2023-03-31"},{"lineNumber":62,"author":{"gitId":"jeffrey4512"},"content":"        switch (p) {","lastModifiedDate":"2023-03-15"},{"lineNumber":63,"author":{"gitId":"jeffrey4512"},"content":"            case \"HIGH\":","lastModifiedDate":"2023-03-15"},{"lineNumber":64,"author":{"gitId":"jeffrey4512"},"content":"            case \"H\":","lastModifiedDate":"2023-03-15"},{"lineNumber":65,"author":{"gitId":"jeffrey4512"},"content":"                priority \u003d Priority.HIGH;","lastModifiedDate":"2023-03-15"},{"lineNumber":66,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":67,"author":{"gitId":"jeffrey4512"},"content":"                break;","lastModifiedDate":"2023-03-15"},{"lineNumber":68,"author":{"gitId":"jeffrey4512"},"content":"            case \"MEDIUM\":","lastModifiedDate":"2023-03-15"},{"lineNumber":69,"author":{"gitId":"jeffrey4512"},"content":"            case \"M\":","lastModifiedDate":"2023-03-15"},{"lineNumber":70,"author":{"gitId":"jeffrey4512"},"content":"                priority \u003d Priority.MEDIUM;","lastModifiedDate":"2023-03-15"},{"lineNumber":71,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":72,"author":{"gitId":"jeffrey4512"},"content":"                break;","lastModifiedDate":"2023-03-15"},{"lineNumber":73,"author":{"gitId":"jeffrey4512"},"content":"            case \"LOW\":","lastModifiedDate":"2023-03-15"},{"lineNumber":74,"author":{"gitId":"jeffrey4512"},"content":"            case \"L\":","lastModifiedDate":"2023-03-15"},{"lineNumber":75,"author":{"gitId":"jeffrey4512"},"content":"                priority \u003d Priority.LOW;","lastModifiedDate":"2023-03-15"},{"lineNumber":76,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":77,"author":{"gitId":"jeffrey4512"},"content":"                break;","lastModifiedDate":"2023-03-15"},{"lineNumber":78,"author":{"gitId":"jeffrey4512"},"content":"            case \" \":","lastModifiedDate":"2023-03-15"},{"lineNumber":79,"author":{"gitId":"jeffrey4512"},"content":"            case \"\":","lastModifiedDate":"2023-03-15"},{"lineNumber":80,"author":{"gitId":"jeffrey4512"},"content":"                priority \u003d null;","lastModifiedDate":"2023-03-15"},{"lineNumber":81,"author":{"gitId":"jeffrey4512"},"content":"                break;","lastModifiedDate":"2023-03-15"},{"lineNumber":82,"author":{"gitId":"jeffrey4512"},"content":"            default:","lastModifiedDate":"2023-03-15"},{"lineNumber":83,"author":{"gitId":"jeffrey4512"},"content":"                throw new DukeException(\"OOPS!!! Please use either HIGH,MEDIUM,LOW when setting priority\");","lastModifiedDate":"2023-03-31"},{"lineNumber":84,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":85,"author":{"gitId":"jeffrey4512"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":86,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":87,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":88,"author":{"gitId":"jeffrey4512"},"content":"    public void setStatusAsMarked() {","lastModifiedDate":"2023-03-16"},{"lineNumber":89,"author":{"gitId":"jeffrey4512"},"content":"        isDone \u003d true;","lastModifiedDate":"2023-03-16"},{"lineNumber":90,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":91,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":92,"author":{"gitId":"jeffrey4512"},"content":"    public void setStatusAsUnmarked() {","lastModifiedDate":"2023-03-16"},{"lineNumber":93,"author":{"gitId":"jeffrey4512"},"content":"        isDone \u003d false;","lastModifiedDate":"2023-03-16"},{"lineNumber":94,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":95,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":96,"author":{"gitId":"jeffrey4512"},"content":"    public String toString() {","lastModifiedDate":"2023-03-14"},{"lineNumber":97,"author":{"gitId":"jeffrey4512"},"content":"        return String.format(\"[\" + this.getTaskType() + \"]\" + \"[\" + this.getStatus() + \"]\" + \"[\" + this.getPriority() + \"] \" + description);","lastModifiedDate":"2023-03-14"},{"lineNumber":98,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":99,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":100,"author":{"gitId":"jeffrey4512"},"content":"}","lastModifiedDate":"2023-01-27"}],"authorContributionMap":{"jeffrey4512":100}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jeffrey4512"},"content":"package duke.task;","lastModifiedDate":"2023-03-22"},{"lineNumber":2,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":3,"author":{"gitId":"jeffrey4512"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-03-22"},{"lineNumber":4,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":5,"author":{"gitId":"jeffrey4512"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"jeffrey4512"},"content":"import java.util.List;","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"jeffrey4512"},"content":"public class TaskList {","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"jeffrey4512"},"content":"    private List\u003cTask\u003e tasks;","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"jeffrey4512"},"content":"    public TaskList(List\u003cTask\u003e task) {","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"jeffrey4512"},"content":"        this.tasks \u003d task;","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":14,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"jeffrey4512"},"content":"    public TaskList() {","lastModifiedDate":"2023-03-09"},{"lineNumber":16,"author":{"gitId":"jeffrey4512"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-09"},{"lineNumber":17,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":18,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"jeffrey4512"},"content":"    /**","lastModifiedDate":"2023-03-16"},{"lineNumber":20,"author":{"gitId":"jeffrey4512"},"content":"     * Add a task into the current list of tasks.","lastModifiedDate":"2023-03-16"},{"lineNumber":21,"author":{"gitId":"jeffrey4512"},"content":"     *","lastModifiedDate":"2023-03-16"},{"lineNumber":22,"author":{"gitId":"jeffrey4512"},"content":"     * @param tasks a task class that stores the description, task type, priority of the task to a list of tasks.","lastModifiedDate":"2023-03-16"},{"lineNumber":23,"author":{"gitId":"jeffrey4512"},"content":"     */","lastModifiedDate":"2023-03-16"},{"lineNumber":24,"author":{"gitId":"jeffrey4512"},"content":"    public void addTask(Task tasks) {","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"jeffrey4512"},"content":"        this.tasks.add(tasks);","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"jeffrey4512"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-03-10"},{"lineNumber":27,"author":{"gitId":"jeffrey4512"},"content":"        System.out.println(this.tasks.get(this.tasks.size() - 1));","lastModifiedDate":"2023-03-10"},{"lineNumber":28,"author":{"gitId":"jeffrey4512"},"content":"        System.out.println(\"Now you have \" + this.tasks.size() + \" tasks in the list.\");","lastModifiedDate":"2023-03-10"},{"lineNumber":29,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":30,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":31,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":32,"author":{"gitId":"jeffrey4512"},"content":"    /**","lastModifiedDate":"2023-03-16"},{"lineNumber":33,"author":{"gitId":"jeffrey4512"},"content":"     * Retrieves all task in the list.","lastModifiedDate":"2023-03-16"},{"lineNumber":34,"author":{"gitId":"jeffrey4512"},"content":"     */","lastModifiedDate":"2023-03-16"},{"lineNumber":35,"author":{"gitId":"jeffrey4512"},"content":"    public void listTasks() {","lastModifiedDate":"2023-03-09"},{"lineNumber":36,"author":{"gitId":"jeffrey4512"},"content":"        System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2023-03-10"},{"lineNumber":37,"author":{"gitId":"jeffrey4512"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-03-09"},{"lineNumber":38,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":39,"author":{"gitId":"jeffrey4512"},"content":"            System.out.println((i + 1) + \". \" + tasks.get(i));","lastModifiedDate":"2023-03-09"},{"lineNumber":40,"author":{"gitId":"jeffrey4512"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":41,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":42,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":43,"author":{"gitId":"jeffrey4512"},"content":"    /**","lastModifiedDate":"2023-03-16"},{"lineNumber":44,"author":{"gitId":"jeffrey4512"},"content":"     * Retrieves a list of task that matches the user input keyword.","lastModifiedDate":"2023-03-16"},{"lineNumber":45,"author":{"gitId":"jeffrey4512"},"content":"     *","lastModifiedDate":"2023-03-16"},{"lineNumber":46,"author":{"gitId":"jeffrey4512"},"content":"     * @param userInput a string representing the user input to be processed.","lastModifiedDate":"2023-03-16"},{"lineNumber":47,"author":{"gitId":"jeffrey4512"},"content":"     */","lastModifiedDate":"2023-03-16"},{"lineNumber":48,"author":{"gitId":"jeffrey4512"},"content":"    public void listFindTasks(String userInput) {","lastModifiedDate":"2023-03-15"},{"lineNumber":49,"author":{"gitId":"jeffrey4512"},"content":"        userInput \u003d userInput.replace(\"find\", \"\").trim();","lastModifiedDate":"2023-03-15"},{"lineNumber":50,"author":{"gitId":"jeffrey4512"},"content":"        System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2023-03-15"},{"lineNumber":51,"author":{"gitId":"jeffrey4512"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-03-15"},{"lineNumber":52,"author":{"gitId":"jeffrey4512"},"content":"            if (tasks.get(i).getDescription().contains(userInput)) {","lastModifiedDate":"2023-03-15"},{"lineNumber":53,"author":{"gitId":"jeffrey4512"},"content":"                System.out.println((i + 1) + \". \" + tasks.get(i));","lastModifiedDate":"2023-03-15"},{"lineNumber":54,"author":{"gitId":"jeffrey4512"},"content":"            }","lastModifiedDate":"2023-03-15"},{"lineNumber":55,"author":{"gitId":"jeffrey4512"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":56,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":57,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":58,"author":{"gitId":"jeffrey4512"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":59,"author":{"gitId":"jeffrey4512"},"content":"     * Updates the task list based on user input.","lastModifiedDate":"2023-03-15"},{"lineNumber":60,"author":{"gitId":"jeffrey4512"},"content":"     * Takes in a string userInput, splits it into separate elements, and check based on the first element of the split string.","lastModifiedDate":"2023-03-15"},{"lineNumber":61,"author":{"gitId":"jeffrey4512"},"content":"     * If the first element is \"mark\", marks a task as completed and/or updates the priority of the task.","lastModifiedDate":"2023-03-15"},{"lineNumber":62,"author":{"gitId":"jeffrey4512"},"content":"     * If the first element is \"unmark\", unmarks a task as completed.","lastModifiedDate":"2023-03-15"},{"lineNumber":63,"author":{"gitId":"jeffrey4512"},"content":"     * If the first element is \"delete\", deletes a task from the task list.","lastModifiedDate":"2023-03-15"},{"lineNumber":64,"author":{"gitId":"jeffrey4512"},"content":"     *","lastModifiedDate":"2023-03-16"},{"lineNumber":65,"author":{"gitId":"jeffrey4512"},"content":"     * @param userInput a string representing the user input to be processed.","lastModifiedDate":"2023-03-15"},{"lineNumber":66,"author":{"gitId":"jeffrey4512"},"content":"     * @throws DukeException if the input is invalid.","lastModifiedDate":"2023-03-15"},{"lineNumber":67,"author":{"gitId":"jeffrey4512"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":68,"author":{"gitId":"jeffrey4512"},"content":"    public void updateTask(String userInput) throws DukeException {","lastModifiedDate":"2023-03-22"},{"lineNumber":69,"author":{"gitId":"jeffrey4512"},"content":"        int itemNumber;","lastModifiedDate":"2023-03-22"},{"lineNumber":70,"author":{"gitId":"jeffrey4512"},"content":"        String[] stringSplit;","lastModifiedDate":"2023-03-10"},{"lineNumber":71,"author":{"gitId":"jeffrey4512"},"content":"        try {","lastModifiedDate":"2023-03-10"},{"lineNumber":72,"author":{"gitId":"jeffrey4512"},"content":"            stringSplit \u003d userInput.split(\" \");","lastModifiedDate":"2023-03-10"},{"lineNumber":73,"author":{"gitId":"jeffrey4512"},"content":"            int input_value \u003d Integer.parseInt(stringSplit[1]);","lastModifiedDate":"2023-03-10"},{"lineNumber":74,"author":{"gitId":"jeffrey4512"},"content":"            itemNumber \u003d input_value - 1;","lastModifiedDate":"2023-03-22"},{"lineNumber":75,"author":{"gitId":"jeffrey4512"},"content":"            String status \u003d stringSplit[0];","lastModifiedDate":"2023-03-10"},{"lineNumber":76,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":77,"author":{"gitId":"jeffrey4512"},"content":"            switch (status) {","lastModifiedDate":"2023-03-10"},{"lineNumber":78,"author":{"gitId":"jeffrey4512"},"content":"                case \"mark\":","lastModifiedDate":"2023-03-10"},{"lineNumber":79,"author":{"gitId":"jeffrey4512"},"content":"                    if (stringSplit.length \u003d\u003d 2) { //E.g. Mark 1","lastModifiedDate":"2023-03-16"},{"lineNumber":80,"author":{"gitId":"jeffrey4512"},"content":"                        tasks.get(itemNumber).setStatusAsMarked();","lastModifiedDate":"2023-03-22"},{"lineNumber":81,"author":{"gitId":"jeffrey4512"},"content":"                        System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-03-16"},{"lineNumber":82,"author":{"gitId":"jeffrey4512"},"content":"                        System.out.println(tasks.get(itemNumber));","lastModifiedDate":"2023-03-22"},{"lineNumber":83,"author":{"gitId":"jeffrey4512"},"content":"                    } else if (stringSplit.length \u003d\u003d 4) { //E.g. Mark 1 as HIGH","lastModifiedDate":"2023-03-16"},{"lineNumber":84,"author":{"gitId":"jeffrey4512"},"content":"                        String priority \u003d stringSplit[3];","lastModifiedDate":"2023-03-14"},{"lineNumber":85,"author":{"gitId":"jeffrey4512"},"content":"                        tasks.get(itemNumber).setPriority(priority);","lastModifiedDate":"2023-03-22"},{"lineNumber":86,"author":{"gitId":"jeffrey4512"},"content":"                        System.out.println(\"OK, Priority set as \" + priority);","lastModifiedDate":"2023-03-22"},{"lineNumber":87,"author":{"gitId":"jeffrey4512"},"content":"                        System.out.println(tasks.get(itemNumber));","lastModifiedDate":"2023-03-22"},{"lineNumber":88,"author":{"gitId":"jeffrey4512"},"content":"                    }","lastModifiedDate":"2023-03-14"},{"lineNumber":89,"author":{"gitId":"jeffrey4512"},"content":"                    break;","lastModifiedDate":"2023-03-10"},{"lineNumber":90,"author":{"gitId":"jeffrey4512"},"content":"                case \"unmark\":","lastModifiedDate":"2023-03-10"},{"lineNumber":91,"author":{"gitId":"jeffrey4512"},"content":"                    tasks.get(itemNumber).setStatusAsUnmarked();","lastModifiedDate":"2023-03-22"},{"lineNumber":92,"author":{"gitId":"jeffrey4512"},"content":"                    System.out.println(\"OK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2023-03-16"},{"lineNumber":93,"author":{"gitId":"jeffrey4512"},"content":"                    System.out.println(tasks.get(itemNumber));","lastModifiedDate":"2023-03-22"},{"lineNumber":94,"author":{"gitId":"jeffrey4512"},"content":"                    break;","lastModifiedDate":"2023-03-10"},{"lineNumber":95,"author":{"gitId":"jeffrey4512"},"content":"                case \"delete\":","lastModifiedDate":"2023-03-10"},{"lineNumber":96,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":97,"author":{"gitId":"jeffrey4512"},"content":"                    //Check if item number exist or not.","lastModifiedDate":"2023-03-22"},{"lineNumber":98,"author":{"gitId":"jeffrey4512"},"content":"                    try{","lastModifiedDate":"2023-03-22"},{"lineNumber":99,"author":{"gitId":"jeffrey4512"},"content":"                        tasks.get(itemNumber);","lastModifiedDate":"2023-03-22"},{"lineNumber":100,"author":{"gitId":"jeffrey4512"},"content":"                    }catch (IndexOutOfBoundsException e){","lastModifiedDate":"2023-03-22"},{"lineNumber":101,"author":{"gitId":"jeffrey4512"},"content":"                        throw new DukeException(\"OOPS!!! Task number not found, please try again.\");","lastModifiedDate":"2023-03-31"},{"lineNumber":102,"author":{"gitId":"jeffrey4512"},"content":"                    }","lastModifiedDate":"2023-03-22"},{"lineNumber":103,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":104,"author":{"gitId":"jeffrey4512"},"content":"                    System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2023-03-10"},{"lineNumber":105,"author":{"gitId":"jeffrey4512"},"content":"                    System.out.println(tasks.get(itemNumber));","lastModifiedDate":"2023-03-22"},{"lineNumber":106,"author":{"gitId":"jeffrey4512"},"content":"                    tasks.remove(itemNumber);","lastModifiedDate":"2023-03-22"},{"lineNumber":107,"author":{"gitId":"jeffrey4512"},"content":"                    System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");","lastModifiedDate":"2023-03-22"},{"lineNumber":108,"author":{"gitId":"jeffrey4512"},"content":"                    break;","lastModifiedDate":"2023-03-10"},{"lineNumber":109,"author":{"gitId":"jeffrey4512"},"content":"                default:","lastModifiedDate":"2023-03-10"},{"lineNumber":110,"author":{"gitId":"jeffrey4512"},"content":"                    throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-03-31"},{"lineNumber":111,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":112,"author":{"gitId":"jeffrey4512"},"content":"            }","lastModifiedDate":"2023-03-10"},{"lineNumber":113,"author":{"gitId":"jeffrey4512"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-03-10"},{"lineNumber":114,"author":{"gitId":"jeffrey4512"},"content":"            throw new DukeException(\"OOPS!!! Task number not found, please try again.\");","lastModifiedDate":"2023-03-31"},{"lineNumber":115,"author":{"gitId":"jeffrey4512"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-03-10"},{"lineNumber":116,"author":{"gitId":"jeffrey4512"},"content":"            System.out.println(\"OOPS!!! Please enter only numbers.\");","lastModifiedDate":"2023-03-31"},{"lineNumber":117,"author":{"gitId":"jeffrey4512"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-03-10"},{"lineNumber":118,"author":{"gitId":"jeffrey4512"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-03-14"},{"lineNumber":119,"author":{"gitId":"jeffrey4512"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":120,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":121,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":122,"author":{"gitId":"jeffrey4512"},"content":"    //Getters method","lastModifiedDate":"2023-03-15"},{"lineNumber":123,"author":{"gitId":"jeffrey4512"},"content":"    public Integer getTaskSize() {","lastModifiedDate":"2023-03-14"},{"lineNumber":124,"author":{"gitId":"jeffrey4512"},"content":"        return tasks.size();","lastModifiedDate":"2023-03-14"},{"lineNumber":125,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":126,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":127,"author":{"gitId":"jeffrey4512"},"content":"    public Task getTask(Integer taskNum) {","lastModifiedDate":"2023-03-14"},{"lineNumber":128,"author":{"gitId":"jeffrey4512"},"content":"        return tasks.get(taskNum);","lastModifiedDate":"2023-03-14"},{"lineNumber":129,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":130,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":131,"author":{"gitId":"jeffrey4512"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":132,"author":{"gitId":"jeffrey4512"},"content":"     * Returns a string containing details of a task with the specified task number.","lastModifiedDate":"2023-03-15"},{"lineNumber":133,"author":{"gitId":"jeffrey4512"},"content":"     *","lastModifiedDate":"2023-03-16"},{"lineNumber":134,"author":{"gitId":"jeffrey4512"},"content":"     * @param taskNum the task number of the task to retrieve details for.","lastModifiedDate":"2023-03-15"},{"lineNumber":135,"author":{"gitId":"jeffrey4512"},"content":"     * @return a string containing details of the specified task.","lastModifiedDate":"2023-03-15"},{"lineNumber":136,"author":{"gitId":"jeffrey4512"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":137,"author":{"gitId":"jeffrey4512"},"content":"    public String getTaskDetails(Integer taskNum) {","lastModifiedDate":"2023-03-14"},{"lineNumber":138,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":139,"author":{"gitId":"jeffrey4512"},"content":"        if (tasks.get(taskNum) instanceof Deadline) {","lastModifiedDate":"2023-03-10"},{"lineNumber":140,"author":{"gitId":"jeffrey4512"},"content":"            Deadline deadlineTask \u003d (Deadline) tasks.get(taskNum);","lastModifiedDate":"2023-03-10"},{"lineNumber":141,"author":{"gitId":"jeffrey4512"},"content":"            return \" | \" + deadlineTask.getBy();","lastModifiedDate":"2023-03-10"},{"lineNumber":142,"author":{"gitId":"jeffrey4512"},"content":"        } else if (tasks.get(taskNum) instanceof Event) {","lastModifiedDate":"2023-03-10"},{"lineNumber":143,"author":{"gitId":"jeffrey4512"},"content":"            Event eventTask \u003d (Event) tasks.get(taskNum);","lastModifiedDate":"2023-03-10"},{"lineNumber":144,"author":{"gitId":"jeffrey4512"},"content":"            return \" | \" + eventTask.getFrom() + \" | \" + eventTask.getTo();","lastModifiedDate":"2023-03-10"},{"lineNumber":145,"author":{"gitId":"jeffrey4512"},"content":"        } else {","lastModifiedDate":"2023-03-10"},{"lineNumber":146,"author":{"gitId":"jeffrey4512"},"content":"            return \"\";","lastModifiedDate":"2023-03-10"},{"lineNumber":147,"author":{"gitId":"jeffrey4512"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":148,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":149,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":150,"author":{"gitId":"jeffrey4512"},"content":"}","lastModifiedDate":"2023-03-09"}],"authorContributionMap":{"jeffrey4512":150}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jeffrey4512"},"content":"package duke.task;","lastModifiedDate":"2023-03-22"},{"lineNumber":2,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":3,"author":{"gitId":"jeffrey4512"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-02-03"},{"lineNumber":4,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":5,"author":{"gitId":"jeffrey4512"},"content":"    protected String taskType;","lastModifiedDate":"2023-02-03"},{"lineNumber":6,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"jeffrey4512"},"content":"    public ToDo(String description, String taskType) {","lastModifiedDate":"2023-02-03"},{"lineNumber":8,"author":{"gitId":"jeffrey4512"},"content":"        super(description);","lastModifiedDate":"2023-02-03"},{"lineNumber":9,"author":{"gitId":"jeffrey4512"},"content":"        this.taskType \u003d taskType;","lastModifiedDate":"2023-02-03"},{"lineNumber":10,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":11,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-02-03"},{"lineNumber":12,"author":{"gitId":"jeffrey4512"},"content":"    //Getter Methods","lastModifiedDate":"2023-02-03"},{"lineNumber":13,"author":{"gitId":"jeffrey4512"},"content":"    public String getTaskType() {","lastModifiedDate":"2023-02-03"},{"lineNumber":14,"author":{"gitId":"jeffrey4512"},"content":"        return taskType;","lastModifiedDate":"2023-02-03"},{"lineNumber":15,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-02-03"},{"lineNumber":16,"author":{"gitId":"jeffrey4512"},"content":"}","lastModifiedDate":"2023-02-03"}],"authorContributionMap":{"jeffrey4512":16}},{"path":"src/main/java/duke/util/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jeffrey4512"},"content":"package duke.util;","lastModifiedDate":"2023-03-22"},{"lineNumber":2,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":3,"author":{"gitId":"jeffrey4512"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-03-22"},{"lineNumber":4,"author":{"gitId":"jeffrey4512"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-03-22"},{"lineNumber":5,"author":{"gitId":"jeffrey4512"},"content":"import duke.task.Event;","lastModifiedDate":"2023-03-22"},{"lineNumber":6,"author":{"gitId":"jeffrey4512"},"content":"import duke.task.Task;","lastModifiedDate":"2023-03-22"},{"lineNumber":7,"author":{"gitId":"jeffrey4512"},"content":"import duke.task.ToDo;","lastModifiedDate":"2023-03-22"},{"lineNumber":8,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":9,"author":{"gitId":"jeffrey4512"},"content":"import java.text.DateFormat;","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"jeffrey4512"},"content":"import java.text.ParseException;","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"jeffrey4512"},"content":"import java.text.SimpleDateFormat;","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"jeffrey4512"},"content":"import java.util.Date;","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"jeffrey4512"},"content":"public class Parser {","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"jeffrey4512"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"jeffrey4512"},"content":"     * This method formats the user input based on the given status of the task.","lastModifiedDate":"2023-03-14"},{"lineNumber":17,"author":{"gitId":"jeffrey4512"},"content":"     *","lastModifiedDate":"2023-03-14"},{"lineNumber":18,"author":{"gitId":"jeffrey4512"},"content":"     * @param userInput A string representing the user input.","lastModifiedDate":"2023-03-14"},{"lineNumber":19,"author":{"gitId":"jeffrey4512"},"content":"     * @param status    A string representing the status of the task (\"todo\", \"deadline\" or \"event\").","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"jeffrey4512"},"content":"     * @return A string array containing the formatted user input.","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"jeffrey4512"},"content":"     * @throws DukeException If the input is invalid, an exception will be thrown with an appropriate error message.","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"jeffrey4512"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"jeffrey4512"},"content":"    public static String[] formatString(String userInput, String status) throws DukeException {","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"jeffrey4512"},"content":"        String formatString;","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"jeffrey4512"},"content":"        String[] stringSplit \u003d new String[3];","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"jeffrey4512"},"content":"        switch (status) {","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"jeffrey4512"},"content":"            case \"todo\":","lastModifiedDate":"2023-03-14"},{"lineNumber":28,"author":{"gitId":"jeffrey4512"},"content":"                stringSplit[0] \u003d userInput.replace(\"todo\", \"\").trim();","lastModifiedDate":"2023-03-14"},{"lineNumber":29,"author":{"gitId":"jeffrey4512"},"content":"                if (stringSplit[0].equals(\"\")) {","lastModifiedDate":"2023-03-14"},{"lineNumber":30,"author":{"gitId":"jeffrey4512"},"content":"                    throw new DukeException(\"OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2023-03-31"},{"lineNumber":31,"author":{"gitId":"jeffrey4512"},"content":"                }","lastModifiedDate":"2023-03-14"},{"lineNumber":32,"author":{"gitId":"jeffrey4512"},"content":"                break;","lastModifiedDate":"2023-03-14"},{"lineNumber":33,"author":{"gitId":"jeffrey4512"},"content":"            case \"deadline\":","lastModifiedDate":"2023-03-14"},{"lineNumber":34,"author":{"gitId":"jeffrey4512"},"content":"                formatString \u003d userInput.replace(\"deadline\", \"\").trim();","lastModifiedDate":"2023-03-14"},{"lineNumber":35,"author":{"gitId":"jeffrey4512"},"content":"                String[] formatDeadlineSplit \u003d formatString.split(\"/by\");","lastModifiedDate":"2023-03-14"},{"lineNumber":36,"author":{"gitId":"jeffrey4512"},"content":"                formatDeadlineSplit[0] \u003d formatDeadlineSplit[0].trim();","lastModifiedDate":"2023-03-14"},{"lineNumber":37,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":38,"author":{"gitId":"jeffrey4512"},"content":"                if (formatDeadlineSplit.length \u003c 2) {","lastModifiedDate":"2023-03-14"},{"lineNumber":39,"author":{"gitId":"jeffrey4512"},"content":"                    throw new DukeException(\"OOPS!!! Deadline is missing /by details, please try again\");","lastModifiedDate":"2023-03-31"},{"lineNumber":40,"author":{"gitId":"jeffrey4512"},"content":"                } else if (formatDeadlineSplit.length \u003e 2) {","lastModifiedDate":"2023-03-14"},{"lineNumber":41,"author":{"gitId":"jeffrey4512"},"content":"                    throw new DukeException(\"OOPS!!! Deadline has too many parameters, please try again\");","lastModifiedDate":"2023-03-31"},{"lineNumber":42,"author":{"gitId":"jeffrey4512"},"content":"                } else {","lastModifiedDate":"2023-03-14"},{"lineNumber":43,"author":{"gitId":"jeffrey4512"},"content":"                    formatDeadlineSplit[1] \u003d formatDeadlineSplit[1].replace(\"by\", \"\").trim();","lastModifiedDate":"2023-03-14"},{"lineNumber":44,"author":{"gitId":"jeffrey4512"},"content":"                    return formatDeadlineSplit;","lastModifiedDate":"2023-03-14"},{"lineNumber":45,"author":{"gitId":"jeffrey4512"},"content":"                }","lastModifiedDate":"2023-03-14"},{"lineNumber":46,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":47,"author":{"gitId":"jeffrey4512"},"content":"            case \"event\":","lastModifiedDate":"2023-03-14"},{"lineNumber":48,"author":{"gitId":"jeffrey4512"},"content":"                formatString \u003d userInput.replace(\"event\", \"\").trim();","lastModifiedDate":"2023-03-14"},{"lineNumber":49,"author":{"gitId":"jeffrey4512"},"content":"                String[] formatEventSplit \u003d formatString.split(\"/from | /to\");","lastModifiedDate":"2023-03-14"},{"lineNumber":50,"author":{"gitId":"jeffrey4512"},"content":"                if (!userInput.matches(\".*from.*to.*\")){","lastModifiedDate":"2023-03-22"},{"lineNumber":51,"author":{"gitId":"jeffrey4512"},"content":"                    throw new DukeException(\"OOPS!!! Please make sure the sequence is correct /from /to, please try again.\");","lastModifiedDate":"2023-03-31"},{"lineNumber":52,"author":{"gitId":"jeffrey4512"},"content":"                }","lastModifiedDate":"2023-03-22"},{"lineNumber":53,"author":{"gitId":"jeffrey4512"},"content":"                if (formatEventSplit.length \u003c 3) {","lastModifiedDate":"2023-03-14"},{"lineNumber":54,"author":{"gitId":"jeffrey4512"},"content":"                    throw new DukeException(\"OOPS!!! Event is missing either from or to, please try again.\");","lastModifiedDate":"2023-03-31"},{"lineNumber":55,"author":{"gitId":"jeffrey4512"},"content":"                } else if (formatEventSplit.length \u003e 3) {","lastModifiedDate":"2023-03-14"},{"lineNumber":56,"author":{"gitId":"jeffrey4512"},"content":"                    throw new DukeException(\"OOPS!!! Event has too many parameters, please try again.\");","lastModifiedDate":"2023-03-31"},{"lineNumber":57,"author":{"gitId":"jeffrey4512"},"content":"                } else {","lastModifiedDate":"2023-03-14"},{"lineNumber":58,"author":{"gitId":"jeffrey4512"},"content":"                    formatEventSplit[0] \u003d formatEventSplit[0].trim();","lastModifiedDate":"2023-03-14"},{"lineNumber":59,"author":{"gitId":"jeffrey4512"},"content":"                    formatEventSplit[1] \u003d formatEventSplit[1].trim();","lastModifiedDate":"2023-03-14"},{"lineNumber":60,"author":{"gitId":"jeffrey4512"},"content":"                    formatEventSplit[2] \u003d formatEventSplit[2].trim();","lastModifiedDate":"2023-03-14"},{"lineNumber":61,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":62,"author":{"gitId":"jeffrey4512"},"content":"                    return formatEventSplit;","lastModifiedDate":"2023-03-14"},{"lineNumber":63,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":64,"author":{"gitId":"jeffrey4512"},"content":"                }","lastModifiedDate":"2023-03-14"},{"lineNumber":65,"author":{"gitId":"jeffrey4512"},"content":"            default:","lastModifiedDate":"2023-03-14"},{"lineNumber":66,"author":{"gitId":"jeffrey4512"},"content":"                break;","lastModifiedDate":"2023-03-14"},{"lineNumber":67,"author":{"gitId":"jeffrey4512"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":68,"author":{"gitId":"jeffrey4512"},"content":"        return stringSplit;","lastModifiedDate":"2023-03-14"},{"lineNumber":69,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":70,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":71,"author":{"gitId":"jeffrey4512"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":72,"author":{"gitId":"jeffrey4512"},"content":"     * This 8 command method check if the user input starts with the list of commands","lastModifiedDate":"2023-03-16"},{"lineNumber":73,"author":{"gitId":"jeffrey4512"},"content":"     *","lastModifiedDate":"2023-03-14"},{"lineNumber":74,"author":{"gitId":"jeffrey4512"},"content":"     * @param userInput A string representing the user input.","lastModifiedDate":"2023-03-14"},{"lineNumber":75,"author":{"gitId":"jeffrey4512"},"content":"     * @return A boolean value indicating whether the user input is a command or not.","lastModifiedDate":"2023-03-14"},{"lineNumber":76,"author":{"gitId":"jeffrey4512"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":77,"author":{"gitId":"jeffrey4512"},"content":"    public boolean isListCommand(String userInput) {","lastModifiedDate":"2023-03-09"},{"lineNumber":78,"author":{"gitId":"jeffrey4512"},"content":"        return userInput.equals(\"list\");","lastModifiedDate":"2023-03-09"},{"lineNumber":79,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":80,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":81,"author":{"gitId":"jeffrey4512"},"content":"    public boolean isDeleteCommand(String userInput) {","lastModifiedDate":"2023-03-09"},{"lineNumber":82,"author":{"gitId":"jeffrey4512"},"content":"        return userInput.startsWith(\"delete\");","lastModifiedDate":"2023-03-09"},{"lineNumber":83,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":84,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":85,"author":{"gitId":"jeffrey4512"},"content":"    public boolean isMarkCommand(String userInput) {","lastModifiedDate":"2023-03-09"},{"lineNumber":86,"author":{"gitId":"jeffrey4512"},"content":"        return userInput.startsWith(\"mark\");","lastModifiedDate":"2023-03-09"},{"lineNumber":87,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":88,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":89,"author":{"gitId":"jeffrey4512"},"content":"    public boolean isUnmarkCommand(String userInput) {","lastModifiedDate":"2023-03-09"},{"lineNumber":90,"author":{"gitId":"jeffrey4512"},"content":"        return userInput.startsWith(\"unmark\");","lastModifiedDate":"2023-03-09"},{"lineNumber":91,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":92,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":93,"author":{"gitId":"jeffrey4512"},"content":"    public boolean isToDoCommand(String userInput) {","lastModifiedDate":"2023-03-09"},{"lineNumber":94,"author":{"gitId":"jeffrey4512"},"content":"        return userInput.startsWith(\"todo\");","lastModifiedDate":"2023-03-09"},{"lineNumber":95,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":96,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":97,"author":{"gitId":"jeffrey4512"},"content":"    public boolean isDeadlineCommand(String userInput) {","lastModifiedDate":"2023-03-09"},{"lineNumber":98,"author":{"gitId":"jeffrey4512"},"content":"        return userInput.startsWith(\"deadline\");","lastModifiedDate":"2023-03-09"},{"lineNumber":99,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":100,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":101,"author":{"gitId":"jeffrey4512"},"content":"    public boolean isEventCommand(String userInput) {","lastModifiedDate":"2023-03-09"},{"lineNumber":102,"author":{"gitId":"jeffrey4512"},"content":"        return userInput.startsWith(\"event\");","lastModifiedDate":"2023-03-09"},{"lineNumber":103,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":104,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":105,"author":{"gitId":"jeffrey4512"},"content":"    public boolean isFindCommand(String userInput) {","lastModifiedDate":"2023-03-15"},{"lineNumber":106,"author":{"gitId":"jeffrey4512"},"content":"        return userInput.startsWith(\"find\");","lastModifiedDate":"2023-03-15"},{"lineNumber":107,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":108,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":109,"author":{"gitId":"jeffrey4512"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":110,"author":{"gitId":"jeffrey4512"},"content":"     * The createToDo method creates a To Do task based on the user input.","lastModifiedDate":"2023-03-14"},{"lineNumber":111,"author":{"gitId":"jeffrey4512"},"content":"     * It extracts the description of the task from the user input and creates a new To Do task with that description.","lastModifiedDate":"2023-03-14"},{"lineNumber":112,"author":{"gitId":"jeffrey4512"},"content":"     *","lastModifiedDate":"2023-03-14"},{"lineNumber":113,"author":{"gitId":"jeffrey4512"},"content":"     * @param userInput the user input to be parsed.","lastModifiedDate":"2023-03-14"},{"lineNumber":114,"author":{"gitId":"jeffrey4512"},"content":"     * @return the new To Do task that was created.","lastModifiedDate":"2023-03-14"},{"lineNumber":115,"author":{"gitId":"jeffrey4512"},"content":"     * @throws DukeException if the description of the To Do task is empty.","lastModifiedDate":"2023-03-14"},{"lineNumber":116,"author":{"gitId":"jeffrey4512"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":117,"author":{"gitId":"jeffrey4512"},"content":"    public Task createToDo(String userInput) throws DukeException {","lastModifiedDate":"2023-03-09"},{"lineNumber":118,"author":{"gitId":"jeffrey4512"},"content":"        String[] stringSplit \u003d new String[1];","lastModifiedDate":"2023-03-09"},{"lineNumber":119,"author":{"gitId":"jeffrey4512"},"content":"        stringSplit[0] \u003d userInput.replace(\"todo\", \"\").trim();","lastModifiedDate":"2023-03-09"},{"lineNumber":120,"author":{"gitId":"jeffrey4512"},"content":"        if (stringSplit[0].equals(\"\")) {","lastModifiedDate":"2023-03-09"},{"lineNumber":121,"author":{"gitId":"jeffrey4512"},"content":"            throw new DukeException(\"OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2023-03-31"},{"lineNumber":122,"author":{"gitId":"jeffrey4512"},"content":"        } else {","lastModifiedDate":"2023-03-09"},{"lineNumber":123,"author":{"gitId":"jeffrey4512"},"content":"            return new ToDo(stringSplit[0], \"T\");","lastModifiedDate":"2023-03-09"},{"lineNumber":124,"author":{"gitId":"jeffrey4512"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":125,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":126,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":127,"author":{"gitId":"jeffrey4512"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":128,"author":{"gitId":"jeffrey4512"},"content":"     * The createDeadline method creates a duke.task.Deadline task based on the user input.","lastModifiedDate":"2023-03-22"},{"lineNumber":129,"author":{"gitId":"jeffrey4512"},"content":"     *","lastModifiedDate":"2023-03-14"},{"lineNumber":130,"author":{"gitId":"jeffrey4512"},"content":"     * @param userInput the user input to be parsed.","lastModifiedDate":"2023-03-14"},{"lineNumber":131,"author":{"gitId":"jeffrey4512"},"content":"     * @return the new duke.task.Deadline task that was created.","lastModifiedDate":"2023-03-22"},{"lineNumber":132,"author":{"gitId":"jeffrey4512"},"content":"     * @throws DukeException if the description of the duke.task.Deadline task is empty.","lastModifiedDate":"2023-03-22"},{"lineNumber":133,"author":{"gitId":"jeffrey4512"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":134,"author":{"gitId":"jeffrey4512"},"content":"    public Task createDeadline(String userInput) throws DukeException {","lastModifiedDate":"2023-03-09"},{"lineNumber":135,"author":{"gitId":"jeffrey4512"},"content":"        String[] formattedString \u003d formatString(userInput, \"deadline\");","lastModifiedDate":"2023-03-14"},{"lineNumber":136,"author":{"gitId":"jeffrey4512"},"content":"        String description \u003d formattedString[0];","lastModifiedDate":"2023-03-14"},{"lineNumber":137,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":138,"author":{"gitId":"jeffrey4512"},"content":"        String by \u003d convertToDateTime(formattedString[1]);","lastModifiedDate":"2023-03-14"},{"lineNumber":139,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":140,"author":{"gitId":"jeffrey4512"},"content":"        return new Deadline(description, \"D\", by);","lastModifiedDate":"2023-03-09"},{"lineNumber":141,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":142,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":143,"author":{"gitId":"jeffrey4512"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":144,"author":{"gitId":"jeffrey4512"},"content":"     * The createEvent method creates a duke.task.Event task based on the user input.","lastModifiedDate":"2023-03-22"},{"lineNumber":145,"author":{"gitId":"jeffrey4512"},"content":"     *","lastModifiedDate":"2023-03-14"},{"lineNumber":146,"author":{"gitId":"jeffrey4512"},"content":"     * @param userInput the user input to be parsed.","lastModifiedDate":"2023-03-14"},{"lineNumber":147,"author":{"gitId":"jeffrey4512"},"content":"     * @return the new duke.task.Event task that was created.","lastModifiedDate":"2023-03-22"},{"lineNumber":148,"author":{"gitId":"jeffrey4512"},"content":"     * @throws DukeException if the description of the duke.task.Event task is empty.","lastModifiedDate":"2023-03-22"},{"lineNumber":149,"author":{"gitId":"jeffrey4512"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":150,"author":{"gitId":"jeffrey4512"},"content":"    public Task createEvent(String userInput) throws DukeException {","lastModifiedDate":"2023-03-09"},{"lineNumber":151,"author":{"gitId":"jeffrey4512"},"content":"        String[] formattedString \u003d formatString(userInput, \"event\");","lastModifiedDate":"2023-03-14"},{"lineNumber":152,"author":{"gitId":"jeffrey4512"},"content":"        String description \u003d formattedString[0];","lastModifiedDate":"2023-03-14"},{"lineNumber":153,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":154,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":155,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":156,"author":{"gitId":"jeffrey4512"},"content":"        String from \u003d convertToDateTime(formattedString[1]);","lastModifiedDate":"2023-03-14"},{"lineNumber":157,"author":{"gitId":"jeffrey4512"},"content":"        String to \u003d convertToDateTime(formattedString[2]);","lastModifiedDate":"2023-03-14"},{"lineNumber":158,"author":{"gitId":"jeffrey4512"},"content":"        boolean isDateTimeCorrect \u003d compareDateTime(from,to);","lastModifiedDate":"2023-03-31"},{"lineNumber":159,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":160,"author":{"gitId":"jeffrey4512"},"content":"        if (!isDateTimeCorrect){","lastModifiedDate":"2023-03-31"},{"lineNumber":161,"author":{"gitId":"jeffrey4512"},"content":"            throw new DukeException(\"OOPS!!! Invalid DateTime, \u0027From\u0027 date/time cannot be after \u0027To\u0027 date/time. Please try again!\");","lastModifiedDate":"2023-03-31"},{"lineNumber":162,"author":{"gitId":"jeffrey4512"},"content":"        }else{","lastModifiedDate":"2023-03-31"},{"lineNumber":163,"author":{"gitId":"jeffrey4512"},"content":"            return new Event(description, \"E\", from, to);","lastModifiedDate":"2023-03-09"},{"lineNumber":164,"author":{"gitId":"jeffrey4512"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":165,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-03-31"},{"lineNumber":166,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":167,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":168,"author":{"gitId":"jeffrey4512"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":169,"author":{"gitId":"jeffrey4512"},"content":"     * This method converts a date string in the format \"d/M/yyyy HHmm\" to a more readable format of \"dd MMM yyyy haa\".","lastModifiedDate":"2023-03-14"},{"lineNumber":170,"author":{"gitId":"jeffrey4512"},"content":"     *","lastModifiedDate":"2023-03-14"},{"lineNumber":171,"author":{"gitId":"jeffrey4512"},"content":"     * @param datetime A string representing a date and time in the format \"d/M/yyyy HHmm\". e.g.(2/12/2023 2000)","lastModifiedDate":"2023-03-14"},{"lineNumber":172,"author":{"gitId":"jeffrey4512"},"content":"     * @return A string representing the converted date and time in the format \"dd MMM yyyy haa\". e.g.(02 Dec 2023 8PM)","lastModifiedDate":"2023-03-14"},{"lineNumber":173,"author":{"gitId":"jeffrey4512"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":174,"author":{"gitId":"jeffrey4512"},"content":"    public String convertToDateTime(String datetime) throws DukeException {","lastModifiedDate":"2023-03-14"},{"lineNumber":175,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":176,"author":{"gitId":"jeffrey4512"},"content":"        DateFormat df \u003d new SimpleDateFormat(\"d/M/yyyy HHmm\");","lastModifiedDate":"2023-03-14"},{"lineNumber":177,"author":{"gitId":"jeffrey4512"},"content":"        DateFormat newDateFormat \u003d new SimpleDateFormat(\"dd MMM yyyy haa\");","lastModifiedDate":"2023-03-27"},{"lineNumber":178,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":179,"author":{"gitId":"jeffrey4512"},"content":"        String outputString;","lastModifiedDate":"2023-03-27"},{"lineNumber":180,"author":{"gitId":"jeffrey4512"},"content":"        Date date;","lastModifiedDate":"2023-03-14"},{"lineNumber":181,"author":{"gitId":"jeffrey4512"},"content":"        try {","lastModifiedDate":"2023-03-14"},{"lineNumber":182,"author":{"gitId":"jeffrey4512"},"content":"            date \u003d df.parse(datetime);","lastModifiedDate":"2023-03-14"},{"lineNumber":183,"author":{"gitId":"jeffrey4512"},"content":"            outputString \u003d newDateFormat.format(date);","lastModifiedDate":"2023-03-27"},{"lineNumber":184,"author":{"gitId":"jeffrey4512"},"content":"        } catch (ParseException e) {","lastModifiedDate":"2023-03-14"},{"lineNumber":185,"author":{"gitId":"jeffrey4512"},"content":"            throw new DukeException(\"OOPS!!! Invalid DateTime format, Please follow this format: d/M/yyyy HHmm\");","lastModifiedDate":"2023-03-31"},{"lineNumber":186,"author":{"gitId":"jeffrey4512"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":187,"author":{"gitId":"jeffrey4512"},"content":"        return outputString;","lastModifiedDate":"2023-03-27"},{"lineNumber":188,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":189,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":190,"author":{"gitId":"jeffrey4512"},"content":"    public boolean compareDateTime(String from, String to) throws DukeException {","lastModifiedDate":"2023-03-31"},{"lineNumber":191,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":192,"author":{"gitId":"jeffrey4512"},"content":"        DateFormat df \u003d new SimpleDateFormat(\"dd MMM yyyy haa\");","lastModifiedDate":"2023-03-31"},{"lineNumber":193,"author":{"gitId":"jeffrey4512"},"content":"        Date dateFrom;","lastModifiedDate":"2023-03-31"},{"lineNumber":194,"author":{"gitId":"jeffrey4512"},"content":"        Date dateTo;","lastModifiedDate":"2023-03-31"},{"lineNumber":195,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":196,"author":{"gitId":"jeffrey4512"},"content":"        try{","lastModifiedDate":"2023-03-31"},{"lineNumber":197,"author":{"gitId":"jeffrey4512"},"content":"            dateFrom \u003d  df.parse(from);","lastModifiedDate":"2023-03-31"},{"lineNumber":198,"author":{"gitId":"jeffrey4512"},"content":"            dateTo \u003d df.parse(to);","lastModifiedDate":"2023-03-31"},{"lineNumber":199,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":200,"author":{"gitId":"jeffrey4512"},"content":"        }catch (ParseException e) {","lastModifiedDate":"2023-03-31"},{"lineNumber":201,"author":{"gitId":"jeffrey4512"},"content":"            throw new DukeException(\"OOPS!!! Invalid DateTime format, Please follow this format: d/M/yyyy HHmm\");","lastModifiedDate":"2023-03-31"},{"lineNumber":202,"author":{"gitId":"jeffrey4512"},"content":"        }","lastModifiedDate":"2023-03-31"},{"lineNumber":203,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":204,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":205,"author":{"gitId":"jeffrey4512"},"content":"        return dateFrom.before(dateTo);","lastModifiedDate":"2023-03-31"},{"lineNumber":206,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-03-31"},{"lineNumber":207,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":208,"author":{"gitId":"jeffrey4512"},"content":"}","lastModifiedDate":"2023-03-09"}],"authorContributionMap":{"jeffrey4512":208}},{"path":"src/main/java/duke/util/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jeffrey4512"},"content":"package duke.util;","lastModifiedDate":"2023-03-22"},{"lineNumber":2,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":3,"author":{"gitId":"jeffrey4512"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"jeffrey4512"},"content":"public class Ui {","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"jeffrey4512"},"content":"    public void showWelcome() {","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"jeffrey4512"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2023-03-14"},{"lineNumber":8,"author":{"gitId":"jeffrey4512"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"jeffrey4512"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"jeffrey4512"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"jeffrey4512"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"jeffrey4512"},"content":"        System.out.println(logo);","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"jeffrey4512"},"content":"        System.out.println(\"Hello, I\u0027m Duke. What can i do for you?\");","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":17,"author":{"gitId":"jeffrey4512"},"content":"    public void showLine() {","lastModifiedDate":"2023-03-14"},{"lineNumber":18,"author":{"gitId":"jeffrey4512"},"content":"        System.out.println(\"----------------------------------------------\");","lastModifiedDate":"2023-03-14"},{"lineNumber":19,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"jeffrey4512"},"content":"    public void showLoadingError() {","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"jeffrey4512"},"content":"        System.out.println(\"OOPS!!! Error loading save file, please check if the file is in the correct path\");","lastModifiedDate":"2023-03-31"},{"lineNumber":23,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"jeffrey4512"},"content":"    public String readCommand() {","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"jeffrey4512"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"jeffrey4512"},"content":"        return sc.nextLine();","lastModifiedDate":"2023-03-14"},{"lineNumber":28,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":29,"author":{"gitId":"jeffrey4512"},"content":"}","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"jeffrey4512":29}},{"path":"src/test/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jeffrey4512"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-03-22"},{"lineNumber":2,"author":{"gitId":"jeffrey4512"},"content":"import duke.task.Task;","lastModifiedDate":"2023-03-22"},{"lineNumber":3,"author":{"gitId":"jeffrey4512"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-03-22"},{"lineNumber":4,"author":{"gitId":"jeffrey4512"},"content":"import duke.util.Parser;","lastModifiedDate":"2023-03-22"},{"lineNumber":5,"author":{"gitId":"jeffrey4512"},"content":"import duke.util.Ui;","lastModifiedDate":"2023-03-22"},{"lineNumber":6,"author":{"gitId":"jeffrey4512"},"content":"import org.junit.Test;","lastModifiedDate":"2023-03-15"},{"lineNumber":7,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":8,"author":{"gitId":"jeffrey4512"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-15"},{"lineNumber":9,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":10,"author":{"gitId":"jeffrey4512"},"content":"public class DukeTest {","lastModifiedDate":"2023-03-15"},{"lineNumber":11,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":12,"author":{"gitId":"jeffrey4512"},"content":"    @Test","lastModifiedDate":"2023-03-15"},{"lineNumber":13,"author":{"gitId":"jeffrey4512"},"content":"    public void run() {","lastModifiedDate":"2023-03-15"},{"lineNumber":14,"author":{"gitId":"jeffrey4512"},"content":"//[D][ ][ ] return book(by: 02 Dec 2019 6PM)","lastModifiedDate":"2023-03-15"},{"lineNumber":15,"author":{"gitId":"jeffrey4512"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2023-03-15"},{"lineNumber":16,"author":{"gitId":"jeffrey4512"},"content":"        String userInput \u003d \"deadline return book /by 2/12/2019 1800\";","lastModifiedDate":"2023-03-15"},{"lineNumber":17,"author":{"gitId":"jeffrey4512"},"content":"        Task t;","lastModifiedDate":"2023-03-15"},{"lineNumber":18,"author":{"gitId":"jeffrey4512"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-03-15"},{"lineNumber":19,"author":{"gitId":"jeffrey4512"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2023-03-15"},{"lineNumber":20,"author":{"gitId":"jeffrey4512"},"content":"        try {","lastModifiedDate":"2023-03-15"},{"lineNumber":21,"author":{"gitId":"jeffrey4512"},"content":"            //Exit the chatbot.","lastModifiedDate":"2023-03-15"},{"lineNumber":22,"author":{"gitId":"jeffrey4512"},"content":"            if (userInput.equals(\"bye\")) {","lastModifiedDate":"2023-03-15"},{"lineNumber":23,"author":{"gitId":"jeffrey4512"},"content":"                System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-03-15"},{"lineNumber":24,"author":{"gitId":"jeffrey4512"},"content":"            } else if (parser.isListCommand(userInput)) {","lastModifiedDate":"2023-03-15"},{"lineNumber":25,"author":{"gitId":"jeffrey4512"},"content":"                //List out all the elements stored.","lastModifiedDate":"2023-03-15"},{"lineNumber":26,"author":{"gitId":"jeffrey4512"},"content":"                tasks.listTasks();","lastModifiedDate":"2023-03-15"},{"lineNumber":27,"author":{"gitId":"jeffrey4512"},"content":"            } else if (parser.isDeleteCommand(userInput)) {","lastModifiedDate":"2023-03-15"},{"lineNumber":28,"author":{"gitId":"jeffrey4512"},"content":"                //Deletes a task.","lastModifiedDate":"2023-03-15"},{"lineNumber":29,"author":{"gitId":"jeffrey4512"},"content":"                tasks.updateTask(userInput);","lastModifiedDate":"2023-03-15"},{"lineNumber":30,"author":{"gitId":"jeffrey4512"},"content":"            } else if (parser.isMarkCommand(userInput)) {","lastModifiedDate":"2023-03-15"},{"lineNumber":31,"author":{"gitId":"jeffrey4512"},"content":"                //Marks a task as done.","lastModifiedDate":"2023-03-15"},{"lineNumber":32,"author":{"gitId":"jeffrey4512"},"content":"                tasks.updateTask(userInput);","lastModifiedDate":"2023-03-15"},{"lineNumber":33,"author":{"gitId":"jeffrey4512"},"content":"            } else if (parser.isUnmarkCommand(userInput)) {","lastModifiedDate":"2023-03-15"},{"lineNumber":34,"author":{"gitId":"jeffrey4512"},"content":"                //unmarks a task as not done.","lastModifiedDate":"2023-03-15"},{"lineNumber":35,"author":{"gitId":"jeffrey4512"},"content":"                tasks.updateTask(userInput);","lastModifiedDate":"2023-03-15"},{"lineNumber":36,"author":{"gitId":"jeffrey4512"},"content":"            } else if (parser.isToDoCommand(userInput)) {","lastModifiedDate":"2023-03-15"},{"lineNumber":37,"author":{"gitId":"jeffrey4512"},"content":"                //Create to-do task","lastModifiedDate":"2023-03-15"},{"lineNumber":38,"author":{"gitId":"jeffrey4512"},"content":"                t \u003d parser.createToDo(userInput);","lastModifiedDate":"2023-03-15"},{"lineNumber":39,"author":{"gitId":"jeffrey4512"},"content":"                tasks.addTask(t);","lastModifiedDate":"2023-03-15"},{"lineNumber":40,"author":{"gitId":"jeffrey4512"},"content":"            } else if (parser.isDeadlineCommand(userInput)) {","lastModifiedDate":"2023-03-15"},{"lineNumber":41,"author":{"gitId":"jeffrey4512"},"content":"                //Create duke.task.Deadline task","lastModifiedDate":"2023-03-22"},{"lineNumber":42,"author":{"gitId":"jeffrey4512"},"content":"                t \u003d parser.createDeadline(userInput);","lastModifiedDate":"2023-03-15"},{"lineNumber":43,"author":{"gitId":"jeffrey4512"},"content":"                tasks.addTask(t);","lastModifiedDate":"2023-03-15"},{"lineNumber":44,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":45,"author":{"gitId":"jeffrey4512"},"content":"            } else if (parser.isEventCommand(userInput)) {","lastModifiedDate":"2023-03-15"},{"lineNumber":46,"author":{"gitId":"jeffrey4512"},"content":"                //Create event task","lastModifiedDate":"2023-03-15"},{"lineNumber":47,"author":{"gitId":"jeffrey4512"},"content":"                t \u003d parser.createEvent(userInput);","lastModifiedDate":"2023-03-15"},{"lineNumber":48,"author":{"gitId":"jeffrey4512"},"content":"                tasks.addTask(t);","lastModifiedDate":"2023-03-15"},{"lineNumber":49,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":50,"author":{"gitId":"jeffrey4512"},"content":"            } else {","lastModifiedDate":"2023-03-15"},{"lineNumber":51,"author":{"gitId":"jeffrey4512"},"content":"                throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-03-15"},{"lineNumber":52,"author":{"gitId":"jeffrey4512"},"content":"            }","lastModifiedDate":"2023-03-15"},{"lineNumber":53,"author":{"gitId":"jeffrey4512"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-03-15"},{"lineNumber":54,"author":{"gitId":"jeffrey4512"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-03-15"},{"lineNumber":55,"author":{"gitId":"jeffrey4512"},"content":"        } finally {","lastModifiedDate":"2023-03-15"},{"lineNumber":56,"author":{"gitId":"jeffrey4512"},"content":"            ui.showLine();","lastModifiedDate":"2023-03-15"},{"lineNumber":57,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":58,"author":{"gitId":"jeffrey4512"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":59,"author":{"gitId":"jeffrey4512"},"content":"        assertEquals(\"[D][ ][ ] return book(by: 02 Dec 2019 6PM)\", tasks.getTask(0).toString());","lastModifiedDate":"2023-03-15"},{"lineNumber":60,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":61,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":62,"author":{"gitId":"jeffrey4512"},"content":"}","lastModifiedDate":"2023-03-15"}],"authorContributionMap":{"jeffrey4512":62}},{"path":"src/test/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jeffrey4512"},"content":"import duke.task.Task;","lastModifiedDate":"2023-03-22"},{"lineNumber":2,"author":{"gitId":"jeffrey4512"},"content":"import duke.task.ToDo;","lastModifiedDate":"2023-03-22"},{"lineNumber":3,"author":{"gitId":"jeffrey4512"},"content":"import org.junit.Test;","lastModifiedDate":"2023-03-15"},{"lineNumber":4,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":5,"author":{"gitId":"jeffrey4512"},"content":"import static org.junit.Assert.*;","lastModifiedDate":"2023-03-15"},{"lineNumber":6,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":7,"author":{"gitId":"jeffrey4512"},"content":"public class ToDoTest {","lastModifiedDate":"2023-03-15"},{"lineNumber":8,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":9,"author":{"gitId":"jeffrey4512"},"content":"    @Test","lastModifiedDate":"2023-03-15"},{"lineNumber":10,"author":{"gitId":"jeffrey4512"},"content":"    public void getTaskType() {","lastModifiedDate":"2023-03-15"},{"lineNumber":11,"author":{"gitId":"jeffrey4512"},"content":"        String TaskType \u003d\"T\";","lastModifiedDate":"2023-03-15"},{"lineNumber":12,"author":{"gitId":"jeffrey4512"},"content":"        Task Task \u003d new ToDo(\"Bring Phone\", TaskType);","lastModifiedDate":"2023-03-15"},{"lineNumber":13,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":14,"author":{"gitId":"jeffrey4512"},"content":"        assertEquals(\"Bring Phone\",Task.getDescription());","lastModifiedDate":"2023-03-15"},{"lineNumber":15,"author":{"gitId":"jeffrey4512"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":16,"author":{"gitId":"jeffrey4512"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":17,"author":{"gitId":"jeffrey4512"},"content":"}","lastModifiedDate":"2023-03-15"}],"authorContributionMap":{"jeffrey4512":17}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"jeffrey4512"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-03-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"jeffrey4512":1,"-":20}}]
