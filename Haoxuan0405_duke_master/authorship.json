[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Haoxuan0405"},"content":"# duke project template","lastModifiedDate":"2023-04-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"Haoxuan0405"},"content":"3. After that, locate the `src/main/java/duke.java` file, right-click it, and choose `Run duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-04-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Haoxuan0405":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"Haoxuan0405"},"content":"    implementation \u0027org.junit.jupiter:junit-jupiter:5.7.0\u0027","lastModifiedDate":"2023-03-28"},{"lineNumber":13,"author":{"gitId":"Haoxuan0405"},"content":"    implementation \u0027org.testng:testng:7.1.0\u0027","lastModifiedDate":"2023-03-28"},{"lineNumber":14,"author":{"gitId":"Haoxuan0405"},"content":"    implementation \u0027org.testng:testng:7.1.0\u0027","lastModifiedDate":"2023-03-28"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"Haoxuan0405"},"content":"    mainClassName \u003d \"duke.Duke\"","lastModifiedDate":"2023-04-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"Haoxuan0405"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2023-04-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Haoxuan0405":5,"-":40}},{"path":"src/main/java/ExecuteCommand/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haoxuan0405"},"content":"package executecommand;","lastModifiedDate":"2023-04-07"},{"lineNumber":2,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":3,"author":{"gitId":"Haoxuan0405"},"content":"import storage.Storage;","lastModifiedDate":"2023-04-23"},{"lineNumber":4,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-04-23"},{"lineNumber":5,"author":{"gitId":"Haoxuan0405"},"content":"public abstract class Command{","lastModifiedDate":"2023-03-19"},{"lineNumber":6,"author":{"gitId":"Haoxuan0405"},"content":"    protected String inputCommand;","lastModifiedDate":"2023-04-23"},{"lineNumber":7,"author":{"gitId":"Haoxuan0405"},"content":"    public static final Storage storage \u003d Storage.getStorage();","lastModifiedDate":"2023-04-23"},{"lineNumber":8,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-04-23"},{"lineNumber":9,"author":{"gitId":"Haoxuan0405"},"content":"    protected Command(String inputCommand) {","lastModifiedDate":"2023-04-23"},{"lineNumber":10,"author":{"gitId":"Haoxuan0405"},"content":"        this.inputCommand \u003d inputCommand;","lastModifiedDate":"2023-04-23"},{"lineNumber":11,"author":{"gitId":"Haoxuan0405"},"content":"    }","lastModifiedDate":"2023-04-23"},{"lineNumber":12,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-04-23"},{"lineNumber":13,"author":{"gitId":"Haoxuan0405"},"content":"    public abstract void execute();","lastModifiedDate":"2023-03-19"},{"lineNumber":14,"author":{"gitId":"Haoxuan0405"},"content":"}","lastModifiedDate":"2023-03-19"}],"authorContributionMap":{"Haoxuan0405":14}},{"path":"src/main/java/ExecuteCommand/ScheduleCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haoxuan0405"},"content":"package executecommand;","lastModifiedDate":"2023-04-07"},{"lineNumber":2,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-04-01"},{"lineNumber":3,"author":{"gitId":"Haoxuan0405"},"content":"import exception.DukeException;","lastModifiedDate":"2023-04-01"},{"lineNumber":4,"author":{"gitId":"Haoxuan0405"},"content":"import parser.Parser;","lastModifiedDate":"2023-04-01"},{"lineNumber":5,"author":{"gitId":"Haoxuan0405"},"content":"import storage.Storage;","lastModifiedDate":"2023-04-01"},{"lineNumber":6,"author":{"gitId":"Haoxuan0405"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-04-01"},{"lineNumber":7,"author":{"gitId":"Haoxuan0405"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-04-01"},{"lineNumber":8,"author":{"gitId":"Haoxuan0405"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-04-01"},{"lineNumber":9,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-04-01"},{"lineNumber":10,"author":{"gitId":"Haoxuan0405"},"content":"public class ScheduleCommand extends Command{","lastModifiedDate":"2023-04-01"},{"lineNumber":11,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-04-01"},{"lineNumber":12,"author":{"gitId":"Haoxuan0405"},"content":"    public ScheduleCommand(String inputCommand) {","lastModifiedDate":"2023-04-01"},{"lineNumber":13,"author":{"gitId":"Haoxuan0405"},"content":"        super(inputCommand);","lastModifiedDate":"2023-04-23"},{"lineNumber":14,"author":{"gitId":"Haoxuan0405"},"content":"    }","lastModifiedDate":"2023-04-01"},{"lineNumber":15,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-04-01"},{"lineNumber":16,"author":{"gitId":"Haoxuan0405"},"content":"    public void execute()throws DukeException {","lastModifiedDate":"2023-04-01"},{"lineNumber":17,"author":{"gitId":"Haoxuan0405"},"content":"        inputCommandStorage(inputCommand, storage);","lastModifiedDate":"2023-04-01"},{"lineNumber":18,"author":{"gitId":"Haoxuan0405"},"content":"    }","lastModifiedDate":"2023-04-01"},{"lineNumber":19,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-04-01"},{"lineNumber":20,"author":{"gitId":"Haoxuan0405"},"content":"    static void inputCommandStorage(String inputCommand, Storage storage) throws DateTimeParseException {","lastModifiedDate":"2023-04-01"},{"lineNumber":21,"author":{"gitId":"Haoxuan0405"},"content":"        if(Parser.commandLength(inputCommand) \u003c 2){","lastModifiedDate":"2023-04-01"},{"lineNumber":22,"author":{"gitId":"Haoxuan0405"},"content":"            throw new DukeException(\"☹ OOPS!!! The date and time of schedule cannot be empty.\");","lastModifiedDate":"2023-04-01"},{"lineNumber":23,"author":{"gitId":"Haoxuan0405"},"content":"        }","lastModifiedDate":"2023-04-01"},{"lineNumber":24,"author":{"gitId":"Haoxuan0405"},"content":"        String restCommand;","lastModifiedDate":"2023-04-01"},{"lineNumber":25,"author":{"gitId":"Haoxuan0405"},"content":"        restCommand \u003d Parser.restCommand(inputCommand);","lastModifiedDate":"2023-04-01"},{"lineNumber":26,"author":{"gitId":"Haoxuan0405"},"content":"        String[] scheduleDetails \u003d Parser.getSchedule(restCommand);","lastModifiedDate":"2023-04-07"},{"lineNumber":27,"author":{"gitId":"Haoxuan0405"},"content":"        try{","lastModifiedDate":"2023-04-01"},{"lineNumber":28,"author":{"gitId":"Haoxuan0405"},"content":"            LocalDateTime scheduleDate \u003d LocalDateTime.parse(scheduleDetails[0].trim(), DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));","lastModifiedDate":"2023-04-07"},{"lineNumber":29,"author":{"gitId":"Haoxuan0405"},"content":"            storage.scheduleView(scheduleDate);","lastModifiedDate":"2023-04-01"},{"lineNumber":30,"author":{"gitId":"Haoxuan0405"},"content":"        }catch (DateTimeParseException  e){","lastModifiedDate":"2023-04-01"},{"lineNumber":31,"author":{"gitId":"Haoxuan0405"},"content":"            throw new DukeException(\"☹ OOPS!!! Please key in the correct pattern!(schedule \\\"yyyy-MM-dd HH:mm\\\")\");","lastModifiedDate":"2023-04-01"},{"lineNumber":32,"author":{"gitId":"Haoxuan0405"},"content":"        }","lastModifiedDate":"2023-04-01"},{"lineNumber":33,"author":{"gitId":"Haoxuan0405"},"content":"    }","lastModifiedDate":"2023-04-01"},{"lineNumber":34,"author":{"gitId":"Haoxuan0405"},"content":"}","lastModifiedDate":"2023-04-01"}],"authorContributionMap":{"Haoxuan0405":34}},{"path":"src/main/java/Parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haoxuan0405"},"content":"package parser;","lastModifiedDate":"2023-04-01"},{"lineNumber":2,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":3,"author":{"gitId":"Haoxuan0405"},"content":"import enumeration.enumConstant;","lastModifiedDate":"2023-04-07"},{"lineNumber":4,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":5,"author":{"gitId":"Haoxuan0405"},"content":"import java.util.*;","lastModifiedDate":"2023-04-07"},{"lineNumber":6,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":7,"author":{"gitId":"Haoxuan0405"},"content":"import exception.DukeException;","lastModifiedDate":"2023-04-01"},{"lineNumber":8,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":9,"author":{"gitId":"Haoxuan0405"},"content":"public class Parser {","lastModifiedDate":"2023-03-19"},{"lineNumber":10,"author":{"gitId":"Haoxuan0405"},"content":"    private static final HashMap\u003cString, enumConstant\u003e getConstantMap \u003d getNewMap();","lastModifiedDate":"2023-04-01"},{"lineNumber":11,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":12,"author":{"gitId":"Haoxuan0405"},"content":"    public static enumConstant getCommandConstant(String inputCommand){","lastModifiedDate":"2023-04-01"},{"lineNumber":13,"author":{"gitId":"Haoxuan0405"},"content":"        String key \u003d keyCommand(inputCommand);","lastModifiedDate":"2023-03-19"},{"lineNumber":14,"author":{"gitId":"Haoxuan0405"},"content":"        return getConstantMap.getOrDefault(key, enumConstant.UNKNOWN);","lastModifiedDate":"2023-04-01"},{"lineNumber":15,"author":{"gitId":"Haoxuan0405"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":16,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":17,"author":{"gitId":"Haoxuan0405"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":18,"author":{"gitId":"Haoxuan0405"},"content":"     * Saves keyword and its enum in map","lastModifiedDate":"2023-04-01"},{"lineNumber":19,"author":{"gitId":"Haoxuan0405"},"content":"     *","lastModifiedDate":"2023-04-01"},{"lineNumber":20,"author":{"gitId":"Haoxuan0405"},"content":"     * @return hashmap","lastModifiedDate":"2023-03-28"},{"lineNumber":21,"author":{"gitId":"Haoxuan0405"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":22,"author":{"gitId":"Haoxuan0405"},"content":"    public static HashMap\u003cString, enumConstant\u003e getNewMap() {","lastModifiedDate":"2023-04-01"},{"lineNumber":23,"author":{"gitId":"Haoxuan0405"},"content":"        HashMap\u003cString, enumConstant\u003e newMap\u003d new HashMap\u003c\u003e();","lastModifiedDate":"2023-04-01"},{"lineNumber":24,"author":{"gitId":"Haoxuan0405"},"content":"        newMap.put(\"bye\", enumConstant.BYE);","lastModifiedDate":"2023-04-01"},{"lineNumber":25,"author":{"gitId":"Haoxuan0405"},"content":"        newMap.put(\"list\", enumConstant.LIST);","lastModifiedDate":"2023-04-01"},{"lineNumber":26,"author":{"gitId":"Haoxuan0405"},"content":"        newMap.put(\"mark\", enumConstant.MARK);","lastModifiedDate":"2023-04-01"},{"lineNumber":27,"author":{"gitId":"Haoxuan0405"},"content":"        newMap.put(\"unmark\", enumConstant.UNMARK);","lastModifiedDate":"2023-04-01"},{"lineNumber":28,"author":{"gitId":"Haoxuan0405"},"content":"        newMap.put(\"delete\", enumConstant.DELETE);","lastModifiedDate":"2023-04-01"},{"lineNumber":29,"author":{"gitId":"Haoxuan0405"},"content":"        newMap.put(\"todo\", enumConstant.TODO);","lastModifiedDate":"2023-04-01"},{"lineNumber":30,"author":{"gitId":"Haoxuan0405"},"content":"        newMap.put(\"deadline\", enumConstant.DEADLINE);","lastModifiedDate":"2023-04-01"},{"lineNumber":31,"author":{"gitId":"Haoxuan0405"},"content":"        newMap.put(\"event\", enumConstant.EVENT);","lastModifiedDate":"2023-04-01"},{"lineNumber":32,"author":{"gitId":"Haoxuan0405"},"content":"        newMap.put(\"save\", enumConstant.SAVE);","lastModifiedDate":"2023-04-01"},{"lineNumber":33,"author":{"gitId":"Haoxuan0405"},"content":"        newMap.put(\"find\", enumConstant.FIND);","lastModifiedDate":"2023-04-01"},{"lineNumber":34,"author":{"gitId":"Haoxuan0405"},"content":"        newMap.put(\"schedule\",enumConstant.SCHEDULE);","lastModifiedDate":"2023-04-01"},{"lineNumber":35,"author":{"gitId":"Haoxuan0405"},"content":"        return newMap;","lastModifiedDate":"2023-03-19"},{"lineNumber":36,"author":{"gitId":"Haoxuan0405"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":37,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":38,"author":{"gitId":"Haoxuan0405"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":39,"author":{"gitId":"Haoxuan0405"},"content":"     * Based on the input command keyed by user, we will find first keyword.","lastModifiedDate":"2023-04-23"},{"lineNumber":40,"author":{"gitId":"Haoxuan0405"},"content":"     *","lastModifiedDate":"2023-04-23"},{"lineNumber":41,"author":{"gitId":"Haoxuan0405"},"content":"     * @param inputCommand command keyed by user","lastModifiedDate":"2023-04-01"},{"lineNumber":42,"author":{"gitId":"Haoxuan0405"},"content":"     * @return first keyword","lastModifiedDate":"2023-04-23"},{"lineNumber":43,"author":{"gitId":"Haoxuan0405"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":44,"author":{"gitId":"Haoxuan0405"},"content":"    public static String keyCommand(String inputCommand){","lastModifiedDate":"2023-03-19"},{"lineNumber":45,"author":{"gitId":"Haoxuan0405"},"content":"        return inputCommand.split(\" \",2)[0].trim();","lastModifiedDate":"2023-03-19"},{"lineNumber":46,"author":{"gitId":"Haoxuan0405"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":47,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":48,"author":{"gitId":"Haoxuan0405"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":49,"author":{"gitId":"Haoxuan0405"},"content":"     * Based on the input command keyed by user, we will find another half command.","lastModifiedDate":"2023-04-23"},{"lineNumber":50,"author":{"gitId":"Haoxuan0405"},"content":"     *","lastModifiedDate":"2023-04-23"},{"lineNumber":51,"author":{"gitId":"Haoxuan0405"},"content":"     * @param inputCommand command keyed by user","lastModifiedDate":"2023-04-01"},{"lineNumber":52,"author":{"gitId":"Haoxuan0405"},"content":"     * @return another command split by space from input command","lastModifiedDate":"2023-03-28"},{"lineNumber":53,"author":{"gitId":"Haoxuan0405"},"content":"     * @throws DukeException","lastModifiedDate":"2023-03-28"},{"lineNumber":54,"author":{"gitId":"Haoxuan0405"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":55,"author":{"gitId":"Haoxuan0405"},"content":"    public static String restCommand(String inputCommand)throws DukeException {","lastModifiedDate":"2023-03-24"},{"lineNumber":56,"author":{"gitId":"Haoxuan0405"},"content":"        String restCommand;","lastModifiedDate":"2023-03-24"},{"lineNumber":57,"author":{"gitId":"Haoxuan0405"},"content":"        restCommand \u003d inputCommand.split(\" \",2)[1].trim();","lastModifiedDate":"2023-03-24"},{"lineNumber":58,"author":{"gitId":"Haoxuan0405"},"content":"        if(restCommand.equals(\"\")){","lastModifiedDate":"2023-04-07"},{"lineNumber":59,"author":{"gitId":"Haoxuan0405"},"content":"            throw new DukeException(\"The command after first word cannot be empty.\");","lastModifiedDate":"2023-04-07"},{"lineNumber":60,"author":{"gitId":"Haoxuan0405"},"content":"        }","lastModifiedDate":"2023-03-24"},{"lineNumber":61,"author":{"gitId":"Haoxuan0405"},"content":"        return restCommand;","lastModifiedDate":"2023-03-24"},{"lineNumber":62,"author":{"gitId":"Haoxuan0405"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":63,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":64,"author":{"gitId":"Haoxuan0405"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":65,"author":{"gitId":"Haoxuan0405"},"content":"     * @param restCommand add rest command in string array spilt by \"/by\"","lastModifiedDate":"2023-03-28"},{"lineNumber":66,"author":{"gitId":"Haoxuan0405"},"content":"     * @return string array","lastModifiedDate":"2023-03-28"},{"lineNumber":67,"author":{"gitId":"Haoxuan0405"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":68,"author":{"gitId":"Haoxuan0405"},"content":"    public static String[] getDeadline(String restCommand){","lastModifiedDate":"2023-03-28"},{"lineNumber":69,"author":{"gitId":"Haoxuan0405"},"content":"        return Arrays.stream(restCommand.split(\"/by\", 2))","lastModifiedDate":"2023-04-07"},{"lineNumber":70,"author":{"gitId":"Haoxuan0405"},"content":"                .map(String::trim).toArray(o -\u003e new String[2]);","lastModifiedDate":"2023-04-07"},{"lineNumber":71,"author":{"gitId":"Haoxuan0405"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":72,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":73,"author":{"gitId":"Haoxuan0405"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":74,"author":{"gitId":"Haoxuan0405"},"content":"     * @param restCommand add rest command in string array spilt by \"/from\" and \"/to\"","lastModifiedDate":"2023-03-28"},{"lineNumber":75,"author":{"gitId":"Haoxuan0405"},"content":"     * @return string array","lastModifiedDate":"2023-03-28"},{"lineNumber":76,"author":{"gitId":"Haoxuan0405"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":77,"author":{"gitId":"Haoxuan0405"},"content":"    public static String[] getEvent(String restCommand){","lastModifiedDate":"2023-03-28"},{"lineNumber":78,"author":{"gitId":"Haoxuan0405"},"content":"        String[] arrayEvent;","lastModifiedDate":"2023-03-24"},{"lineNumber":79,"author":{"gitId":"Haoxuan0405"},"content":"        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-24"},{"lineNumber":80,"author":{"gitId":"Haoxuan0405"},"content":"        String beforeFrom \u003d restCommand.split(\"/from\", 2)[0].trim();","lastModifiedDate":"2023-03-28"},{"lineNumber":81,"author":{"gitId":"Haoxuan0405"},"content":"        list.add(beforeFrom);","lastModifiedDate":"2023-03-28"},{"lineNumber":82,"author":{"gitId":"Haoxuan0405"},"content":"        String afterFrom \u003d restCommand.split(\"/from\", 2)[1].trim();","lastModifiedDate":"2023-03-28"},{"lineNumber":83,"author":{"gitId":"Haoxuan0405"},"content":"        for (String s : afterFrom.split(\"/to\", 2)) {","lastModifiedDate":"2023-03-28"},{"lineNumber":84,"author":{"gitId":"Haoxuan0405"},"content":"            String trim \u003d s.trim();","lastModifiedDate":"2023-03-24"},{"lineNumber":85,"author":{"gitId":"Haoxuan0405"},"content":"            list.add(trim);","lastModifiedDate":"2023-03-24"},{"lineNumber":86,"author":{"gitId":"Haoxuan0405"},"content":"        }","lastModifiedDate":"2023-03-24"},{"lineNumber":87,"author":{"gitId":"Haoxuan0405"},"content":"        arrayEvent \u003d list.toArray(new String[3]);","lastModifiedDate":"2023-03-28"},{"lineNumber":88,"author":{"gitId":"Haoxuan0405"},"content":"        return arrayEvent;","lastModifiedDate":"2023-03-24"},{"lineNumber":89,"author":{"gitId":"Haoxuan0405"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":90,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":91,"author":{"gitId":"Haoxuan0405"},"content":"    public static String[] getSchedule(String restCommand){","lastModifiedDate":"2023-04-07"},{"lineNumber":92,"author":{"gitId":"Haoxuan0405"},"content":"        String[] arraySchedule;","lastModifiedDate":"2023-04-07"},{"lineNumber":93,"author":{"gitId":"Haoxuan0405"},"content":"        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-04-07"},{"lineNumber":94,"author":{"gitId":"Haoxuan0405"},"content":"        String trim \u003d restCommand.trim();","lastModifiedDate":"2023-04-07"},{"lineNumber":95,"author":{"gitId":"Haoxuan0405"},"content":"        list.add(trim);","lastModifiedDate":"2023-04-07"},{"lineNumber":96,"author":{"gitId":"Haoxuan0405"},"content":"        arraySchedule \u003d list.toArray(new String[1]);","lastModifiedDate":"2023-04-07"},{"lineNumber":97,"author":{"gitId":"Haoxuan0405"},"content":"        return arraySchedule;","lastModifiedDate":"2023-04-07"},{"lineNumber":98,"author":{"gitId":"Haoxuan0405"},"content":"    }","lastModifiedDate":"2023-04-07"},{"lineNumber":99,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":100,"author":{"gitId":"Haoxuan0405"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":101,"author":{"gitId":"Haoxuan0405"},"content":"     * @param inputCommand split by space","lastModifiedDate":"2023-03-28"},{"lineNumber":102,"author":{"gitId":"Haoxuan0405"},"content":"     * @return command length","lastModifiedDate":"2023-03-28"},{"lineNumber":103,"author":{"gitId":"Haoxuan0405"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":104,"author":{"gitId":"Haoxuan0405"},"content":"    public static int commandLength(String inputCommand){","lastModifiedDate":"2023-03-19"},{"lineNumber":105,"author":{"gitId":"Haoxuan0405"},"content":"        return inputCommand.split(\" \",2).length;","lastModifiedDate":"2023-03-19"},{"lineNumber":106,"author":{"gitId":"Haoxuan0405"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":107,"author":{"gitId":"Haoxuan0405"},"content":"}","lastModifiedDate":"2023-03-19"}],"authorContributionMap":{"Haoxuan0405":107}},{"path":"src/main/java/Storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haoxuan0405"},"content":"package storage;","lastModifiedDate":"2023-04-01"},{"lineNumber":2,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":3,"author":{"gitId":"Haoxuan0405"},"content":"import exception.DukeException;","lastModifiedDate":"2023-04-01"},{"lineNumber":4,"author":{"gitId":"Haoxuan0405"},"content":"import ui.*;","lastModifiedDate":"2023-04-01"},{"lineNumber":5,"author":{"gitId":"Haoxuan0405"},"content":"import taskslist.*;","lastModifiedDate":"2023-04-01"},{"lineNumber":6,"author":{"gitId":"Haoxuan0405"},"content":"import java.io.File;","lastModifiedDate":"2023-03-19"},{"lineNumber":7,"author":{"gitId":"Haoxuan0405"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-03-19"},{"lineNumber":8,"author":{"gitId":"Haoxuan0405"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-03-19"},{"lineNumber":9,"author":{"gitId":"Haoxuan0405"},"content":"import java.io.IOException;","lastModifiedDate":"2023-03-19"},{"lineNumber":10,"author":{"gitId":"Haoxuan0405"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-03-19"},{"lineNumber":11,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":12,"author":{"gitId":"Haoxuan0405"},"content":"public class Storage extends TasksList {","lastModifiedDate":"2023-03-19"},{"lineNumber":13,"author":{"gitId":"Haoxuan0405"},"content":"    private final String filePath;","lastModifiedDate":"2023-03-19"},{"lineNumber":14,"author":{"gitId":"Haoxuan0405"},"content":"    private static final Storage storage \u003d new Storage();","lastModifiedDate":"2023-03-19"},{"lineNumber":15,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":16,"author":{"gitId":"Haoxuan0405"},"content":"    /* make Storage constructor , initialise filepath and create new file */","lastModifiedDate":"2023-04-07"},{"lineNumber":17,"author":{"gitId":"Haoxuan0405"},"content":"    public Storage() {","lastModifiedDate":"2023-03-19"},{"lineNumber":18,"author":{"gitId":"Haoxuan0405"},"content":"        String dir \u003d System.getProperty(\"user.dir\");","lastModifiedDate":"2023-03-19"},{"lineNumber":19,"author":{"gitId":"Haoxuan0405"},"content":"        java.nio.file.Path path \u003d java.nio.file.Paths.get(dir, \"data\", \"duke.txt\");","lastModifiedDate":"2023-03-19"},{"lineNumber":20,"author":{"gitId":"Haoxuan0405"},"content":"        this.filePath \u003d path.toString();","lastModifiedDate":"2023-03-19"},{"lineNumber":21,"author":{"gitId":"Haoxuan0405"},"content":"        fileCreate();","lastModifiedDate":"2023-03-19"},{"lineNumber":22,"author":{"gitId":"Haoxuan0405"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":23,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":24,"author":{"gitId":"Haoxuan0405"},"content":"    /**","lastModifiedDate":"2023-03-24"},{"lineNumber":25,"author":{"gitId":"Haoxuan0405"},"content":"     * @return instance storage","lastModifiedDate":"2023-03-24"},{"lineNumber":26,"author":{"gitId":"Haoxuan0405"},"content":"     */","lastModifiedDate":"2023-03-24"},{"lineNumber":27,"author":{"gitId":"Haoxuan0405"},"content":"    public static Storage getStorage() {","lastModifiedDate":"2023-03-24"},{"lineNumber":28,"author":{"gitId":"Haoxuan0405"},"content":"        return storage;","lastModifiedDate":"2023-03-24"},{"lineNumber":29,"author":{"gitId":"Haoxuan0405"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":30,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":31,"author":{"gitId":"Haoxuan0405"},"content":"    /**","lastModifiedDate":"2023-03-24"},{"lineNumber":32,"author":{"gitId":"Haoxuan0405"},"content":"     * Creates file and see whether file create successful or not.","lastModifiedDate":"2023-04-01"},{"lineNumber":33,"author":{"gitId":"Haoxuan0405"},"content":"     *","lastModifiedDate":"2023-03-24"},{"lineNumber":34,"author":{"gitId":"Haoxuan0405"},"content":"     * IOException in RuntimeException","lastModifiedDate":"2023-03-24"},{"lineNumber":35,"author":{"gitId":"Haoxuan0405"},"content":"     */","lastModifiedDate":"2023-03-24"},{"lineNumber":36,"author":{"gitId":"Haoxuan0405"},"content":"    public void fileCreate() {","lastModifiedDate":"2023-03-19"},{"lineNumber":37,"author":{"gitId":"Haoxuan0405"},"content":"        try {","lastModifiedDate":"2023-03-19"},{"lineNumber":38,"author":{"gitId":"Haoxuan0405"},"content":"            File file \u003d new File(this.filePath);","lastModifiedDate":"2023-03-19"},{"lineNumber":39,"author":{"gitId":"Haoxuan0405"},"content":"            boolean isCreateNewFile \u003d file.createNewFile();","lastModifiedDate":"2023-04-01"},{"lineNumber":40,"author":{"gitId":"Haoxuan0405"},"content":"            if (isCreateNewFile) {","lastModifiedDate":"2023-04-01"},{"lineNumber":41,"author":{"gitId":"Haoxuan0405"},"content":"                System.out.println(\"New File created,file path: \" + file.getAbsolutePath());","lastModifiedDate":"2023-04-23"},{"lineNumber":42,"author":{"gitId":"Haoxuan0405"},"content":"            }else{","lastModifiedDate":"2023-03-19"},{"lineNumber":43,"author":{"gitId":"Haoxuan0405"},"content":"                System.out.println(\"File already exist,file path: \" + file.getAbsolutePath());","lastModifiedDate":"2023-03-24"},{"lineNumber":44,"author":{"gitId":"Haoxuan0405"},"content":"            }","lastModifiedDate":"2023-03-19"},{"lineNumber":45,"author":{"gitId":"Haoxuan0405"},"content":"            Ui.showLine();","lastModifiedDate":"2023-04-07"},{"lineNumber":46,"author":{"gitId":"Haoxuan0405"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-03-19"},{"lineNumber":47,"author":{"gitId":"Haoxuan0405"},"content":"            throw new DukeException(\"☹ OOPS!!! An error for file create occurred.\");","lastModifiedDate":"2023-03-19"},{"lineNumber":48,"author":{"gitId":"Haoxuan0405"},"content":"        }","lastModifiedDate":"2023-03-19"},{"lineNumber":49,"author":{"gitId":"Haoxuan0405"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":50,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":51,"author":{"gitId":"Haoxuan0405"},"content":"    /**","lastModifiedDate":"2023-03-19"},{"lineNumber":52,"author":{"gitId":"Haoxuan0405"},"content":"     * Writes all Tasks to disk file","lastModifiedDate":"2023-04-01"},{"lineNumber":53,"author":{"gitId":"Haoxuan0405"},"content":"     *","lastModifiedDate":"2023-03-19"},{"lineNumber":54,"author":{"gitId":"Haoxuan0405"},"content":"     * @param textToAdd each line of tasks","lastModifiedDate":"2023-03-19"},{"lineNumber":55,"author":{"gitId":"Haoxuan0405"},"content":"     *","lastModifiedDate":"2023-03-24"},{"lineNumber":56,"author":{"gitId":"Haoxuan0405"},"content":"     * IOException in RuntimeException","lastModifiedDate":"2023-03-24"},{"lineNumber":57,"author":{"gitId":"Haoxuan0405"},"content":"     */","lastModifiedDate":"2023-03-19"},{"lineNumber":58,"author":{"gitId":"Haoxuan0405"},"content":"    public void writeToFile(String textToAdd) throws DukeException {","lastModifiedDate":"2023-03-19"},{"lineNumber":59,"author":{"gitId":"Haoxuan0405"},"content":"        try {","lastModifiedDate":"2023-03-19"},{"lineNumber":60,"author":{"gitId":"Haoxuan0405"},"content":"            FileWriter fw \u003d new FileWriter(this.filePath);","lastModifiedDate":"2023-03-19"},{"lineNumber":61,"author":{"gitId":"Haoxuan0405"},"content":"            fw.write(textToAdd);","lastModifiedDate":"2023-03-19"},{"lineNumber":62,"author":{"gitId":"Haoxuan0405"},"content":"            fw.close();","lastModifiedDate":"2023-03-19"},{"lineNumber":63,"author":{"gitId":"Haoxuan0405"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-03-19"},{"lineNumber":64,"author":{"gitId":"Haoxuan0405"},"content":"            throw new DukeException(\"File write get problem!\");","lastModifiedDate":"2023-03-19"},{"lineNumber":65,"author":{"gitId":"Haoxuan0405"},"content":"        }","lastModifiedDate":"2023-03-19"},{"lineNumber":66,"author":{"gitId":"Haoxuan0405"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":67,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":68,"author":{"gitId":"Haoxuan0405"},"content":"    /**","lastModifiedDate":"2023-03-19"},{"lineNumber":69,"author":{"gitId":"Haoxuan0405"},"content":"     * Read Tasks follow one line by one line from disk file","lastModifiedDate":"2023-04-07"},{"lineNumber":70,"author":{"gitId":"Haoxuan0405"},"content":"     *","lastModifiedDate":"2023-03-19"},{"lineNumber":71,"author":{"gitId":"Haoxuan0405"},"content":"     * FileNotFoundException in RuntimeException","lastModifiedDate":"2023-03-24"},{"lineNumber":72,"author":{"gitId":"Haoxuan0405"},"content":"     */","lastModifiedDate":"2023-03-19"},{"lineNumber":73,"author":{"gitId":"Haoxuan0405"},"content":"    public void readFile() {","lastModifiedDate":"2023-03-19"},{"lineNumber":74,"author":{"gitId":"Haoxuan0405"},"content":"        try {","lastModifiedDate":"2023-03-19"},{"lineNumber":75,"author":{"gitId":"Haoxuan0405"},"content":"            File file \u003d new File(this.filePath);","lastModifiedDate":"2023-03-19"},{"lineNumber":76,"author":{"gitId":"Haoxuan0405"},"content":"            Scanner s \u003d new Scanner(file);","lastModifiedDate":"2023-03-19"},{"lineNumber":77,"author":{"gitId":"Haoxuan0405"},"content":"            while (s.hasNextLine()) {","lastModifiedDate":"2023-03-19"},{"lineNumber":78,"author":{"gitId":"Haoxuan0405"},"content":"                storage.loadTask(taskByLine(s.nextLine()));","lastModifiedDate":"2023-03-19"},{"lineNumber":79,"author":{"gitId":"Haoxuan0405"},"content":"            }","lastModifiedDate":"2023-03-19"},{"lineNumber":80,"author":{"gitId":"Haoxuan0405"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-03-19"},{"lineNumber":81,"author":{"gitId":"Haoxuan0405"},"content":"            throw new DukeException(\"File read get problem!\");","lastModifiedDate":"2023-03-19"},{"lineNumber":82,"author":{"gitId":"Haoxuan0405"},"content":"        }","lastModifiedDate":"2023-03-19"},{"lineNumber":83,"author":{"gitId":"Haoxuan0405"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":84,"author":{"gitId":"Haoxuan0405"},"content":"}","lastModifiedDate":"2023-03-19"}],"authorContributionMap":{"Haoxuan0405":84}},{"path":"src/main/java/TasksList/TasksList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haoxuan0405"},"content":"package taskslist;","lastModifiedDate":"2023-04-01"},{"lineNumber":2,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":3,"author":{"gitId":"Haoxuan0405"},"content":"import task.*;","lastModifiedDate":"2023-04-01"},{"lineNumber":4,"author":{"gitId":"Haoxuan0405"},"content":"import ui.Ui;","lastModifiedDate":"2023-04-01"},{"lineNumber":5,"author":{"gitId":"Haoxuan0405"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-03-24"},{"lineNumber":6,"author":{"gitId":"Haoxuan0405"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-03-24"},{"lineNumber":7,"author":{"gitId":"Haoxuan0405"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-19"},{"lineNumber":8,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":9,"author":{"gitId":"Haoxuan0405"},"content":"public class TasksList {","lastModifiedDate":"2023-03-19"},{"lineNumber":10,"author":{"gitId":"Haoxuan0405"},"content":"    public static ArrayList\u003cTask\u003e tasksList;","lastModifiedDate":"2023-04-07"},{"lineNumber":11,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":12,"author":{"gitId":"Haoxuan0405"},"content":"    public TasksList(){","lastModifiedDate":"2023-03-19"},{"lineNumber":13,"author":{"gitId":"Haoxuan0405"},"content":"        this.tasksList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-19"},{"lineNumber":14,"author":{"gitId":"Haoxuan0405"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":15,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":16,"author":{"gitId":"Haoxuan0405"},"content":"    /**","lastModifiedDate":"2023-03-19"},{"lineNumber":17,"author":{"gitId":"Haoxuan0405"},"content":"     * Adds all tasks from user input into tasksList","lastModifiedDate":"2023-04-01"},{"lineNumber":18,"author":{"gitId":"Haoxuan0405"},"content":"     *","lastModifiedDate":"2023-04-07"},{"lineNumber":19,"author":{"gitId":"Haoxuan0405"},"content":"     * @param task a Task object","lastModifiedDate":"2023-03-19"},{"lineNumber":20,"author":{"gitId":"Haoxuan0405"},"content":"     */","lastModifiedDate":"2023-03-19"},{"lineNumber":21,"author":{"gitId":"Haoxuan0405"},"content":"    public void taskAdd(Task task){","lastModifiedDate":"2023-03-19"},{"lineNumber":22,"author":{"gitId":"Haoxuan0405"},"content":"        String space \u003d \" \";","lastModifiedDate":"2023-04-07"},{"lineNumber":23,"author":{"gitId":"Haoxuan0405"},"content":"        int taskNum \u003d 0;","lastModifiedDate":"2023-04-07"},{"lineNumber":24,"author":{"gitId":"Haoxuan0405"},"content":"        for (Task tasks : tasksList) {","lastModifiedDate":"2023-04-07"},{"lineNumber":25,"author":{"gitId":"Haoxuan0405"},"content":"            if(task.getDescription().equals(tasks.getDescription())){","lastModifiedDate":"2023-04-07"},{"lineNumber":26,"author":{"gitId":"Haoxuan0405"},"content":"                taskNum++;","lastModifiedDate":"2023-04-07"},{"lineNumber":27,"author":{"gitId":"Haoxuan0405"},"content":"                System.out.println(space + \"The task being added clashes with another task in the list.\");","lastModifiedDate":"2023-04-07"},{"lineNumber":28,"author":{"gitId":"Haoxuan0405"},"content":"                Ui.showLine();","lastModifiedDate":"2023-04-23"},{"lineNumber":29,"author":{"gitId":"Haoxuan0405"},"content":"                break;","lastModifiedDate":"2023-04-07"},{"lineNumber":30,"author":{"gitId":"Haoxuan0405"},"content":"            }","lastModifiedDate":"2023-04-07"},{"lineNumber":31,"author":{"gitId":"Haoxuan0405"},"content":"        }","lastModifiedDate":"2023-04-07"},{"lineNumber":32,"author":{"gitId":"Haoxuan0405"},"content":"        if(taskNum \u003d\u003d 0){","lastModifiedDate":"2023-04-07"},{"lineNumber":33,"author":{"gitId":"Haoxuan0405"},"content":"            tasksList.add(task);","lastModifiedDate":"2023-03-19"},{"lineNumber":34,"author":{"gitId":"Haoxuan0405"},"content":"            Ui.Echo(\"Got it. I\u0027ve added this task: \\n  \" + task +","lastModifiedDate":"2023-03-19"},{"lineNumber":35,"author":{"gitId":"Haoxuan0405"},"content":"                    \"\\n Now you have \" + tasksList.size() + \" tasks in the list.\");","lastModifiedDate":"2023-03-19"},{"lineNumber":36,"author":{"gitId":"Haoxuan0405"},"content":"        }","lastModifiedDate":"2023-03-19"},{"lineNumber":37,"author":{"gitId":"Haoxuan0405"},"content":"    }","lastModifiedDate":"2023-04-07"},{"lineNumber":38,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":39,"author":{"gitId":"Haoxuan0405"},"content":"    /**","lastModifiedDate":"2023-04-07"},{"lineNumber":40,"author":{"gitId":"Haoxuan0405"},"content":"     * Loads all tasks from disk file and add into tasksList","lastModifiedDate":"2023-04-07"},{"lineNumber":41,"author":{"gitId":"Haoxuan0405"},"content":"     *","lastModifiedDate":"2023-04-07"},{"lineNumber":42,"author":{"gitId":"Haoxuan0405"},"content":"     * @param task a Task object","lastModifiedDate":"2023-04-07"},{"lineNumber":43,"author":{"gitId":"Haoxuan0405"},"content":"     */","lastModifiedDate":"2023-04-07"},{"lineNumber":44,"author":{"gitId":"Haoxuan0405"},"content":"    public void loadTask(Task task){","lastModifiedDate":"2023-04-07"},{"lineNumber":45,"author":{"gitId":"Haoxuan0405"},"content":"        tasksList.add(task);","lastModifiedDate":"2023-04-07"},{"lineNumber":46,"author":{"gitId":"Haoxuan0405"},"content":"    }","lastModifiedDate":"2023-04-07"},{"lineNumber":47,"author":{"gitId":"Haoxuan0405"},"content":"    /**","lastModifiedDate":"2023-03-19"},{"lineNumber":48,"author":{"gitId":"Haoxuan0405"},"content":"     * Marks task from taskList","lastModifiedDate":"2023-04-01"},{"lineNumber":49,"author":{"gitId":"Haoxuan0405"},"content":"     * @param index , mark a specified task number","lastModifiedDate":"2023-03-24"},{"lineNumber":50,"author":{"gitId":"Haoxuan0405"},"content":"     */","lastModifiedDate":"2023-03-19"},{"lineNumber":51,"author":{"gitId":"Haoxuan0405"},"content":"    public void mark(int index){","lastModifiedDate":"2023-03-19"},{"lineNumber":52,"author":{"gitId":"Haoxuan0405"},"content":"        Task task \u003d tasksList.get(index);","lastModifiedDate":"2023-03-19"},{"lineNumber":53,"author":{"gitId":"Haoxuan0405"},"content":"        task.Mark();","lastModifiedDate":"2023-03-19"},{"lineNumber":54,"author":{"gitId":"Haoxuan0405"},"content":"        Ui.Echo(\"Nice! I\u0027ve marked this task as done:\\n  \" + task);","lastModifiedDate":"2023-03-19"},{"lineNumber":55,"author":{"gitId":"Haoxuan0405"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":56,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":57,"author":{"gitId":"Haoxuan0405"},"content":"    /**","lastModifiedDate":"2023-03-24"},{"lineNumber":58,"author":{"gitId":"Haoxuan0405"},"content":"     * unMarks task from taskList","lastModifiedDate":"2023-04-01"},{"lineNumber":59,"author":{"gitId":"Haoxuan0405"},"content":"     * @param index , unmark a specified task number","lastModifiedDate":"2023-03-24"},{"lineNumber":60,"author":{"gitId":"Haoxuan0405"},"content":"     */","lastModifiedDate":"2023-03-24"},{"lineNumber":61,"author":{"gitId":"Haoxuan0405"},"content":"    public void unmark(int index){","lastModifiedDate":"2023-03-19"},{"lineNumber":62,"author":{"gitId":"Haoxuan0405"},"content":"        Task task \u003d tasksList.get(index);","lastModifiedDate":"2023-03-19"},{"lineNumber":63,"author":{"gitId":"Haoxuan0405"},"content":"        task.unMark();","lastModifiedDate":"2023-03-19"},{"lineNumber":64,"author":{"gitId":"Haoxuan0405"},"content":"        Ui.Echo(\"OK, I\u0027ve marked this task as not done yet:\\n  \" + task);","lastModifiedDate":"2023-03-19"},{"lineNumber":65,"author":{"gitId":"Haoxuan0405"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":66,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":67,"author":{"gitId":"Haoxuan0405"},"content":"    /**","lastModifiedDate":"2023-03-24"},{"lineNumber":68,"author":{"gitId":"Haoxuan0405"},"content":"     * Deletes task from taskList","lastModifiedDate":"2023-04-01"},{"lineNumber":69,"author":{"gitId":"Haoxuan0405"},"content":"     * @param index , delete a specified task number","lastModifiedDate":"2023-03-24"},{"lineNumber":70,"author":{"gitId":"Haoxuan0405"},"content":"     */","lastModifiedDate":"2023-03-24"},{"lineNumber":71,"author":{"gitId":"Haoxuan0405"},"content":"    public void deleteTask(int index){","lastModifiedDate":"2023-03-19"},{"lineNumber":72,"author":{"gitId":"Haoxuan0405"},"content":"        Task task \u003d tasksList.get(index);","lastModifiedDate":"2023-03-19"},{"lineNumber":73,"author":{"gitId":"Haoxuan0405"},"content":"        tasksList.remove(index);","lastModifiedDate":"2023-03-19"},{"lineNumber":74,"author":{"gitId":"Haoxuan0405"},"content":"        Ui.Echo(\"Noted. I\u0027ve removed this task:\\n  \" + task +","lastModifiedDate":"2023-03-19"},{"lineNumber":75,"author":{"gitId":"Haoxuan0405"},"content":"                \"\\n Now you have \" + tasksList.size() + \" tasks in the list.\");","lastModifiedDate":"2023-03-19"},{"lineNumber":76,"author":{"gitId":"Haoxuan0405"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":77,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":78,"author":{"gitId":"Haoxuan0405"},"content":"    /**","lastModifiedDate":"2023-03-24"},{"lineNumber":79,"author":{"gitId":"Haoxuan0405"},"content":"     * All tasks in the tasks list have been keyed in by user","lastModifiedDate":"2023-04-07"},{"lineNumber":80,"author":{"gitId":"Haoxuan0405"},"content":"     * Saved in disk file.","lastModifiedDate":"2023-04-07"},{"lineNumber":81,"author":{"gitId":"Haoxuan0405"},"content":"     *","lastModifiedDate":"2023-04-07"},{"lineNumber":82,"author":{"gitId":"Haoxuan0405"},"content":"     * @return String, as a parameter to writeToFile method","lastModifiedDate":"2023-03-24"},{"lineNumber":83,"author":{"gitId":"Haoxuan0405"},"content":"     */","lastModifiedDate":"2023-03-24"},{"lineNumber":84,"author":{"gitId":"Haoxuan0405"},"content":"    public String tasksAddInFile(){","lastModifiedDate":"2023-03-19"},{"lineNumber":85,"author":{"gitId":"Haoxuan0405"},"content":"        StringBuilder content \u003d new StringBuilder();","lastModifiedDate":"2023-03-19"},{"lineNumber":86,"author":{"gitId":"Haoxuan0405"},"content":"        for(Task tasks : tasksList){","lastModifiedDate":"2023-03-24"},{"lineNumber":87,"author":{"gitId":"Haoxuan0405"},"content":"            content.append(tasks.contentToFile());","lastModifiedDate":"2023-03-24"},{"lineNumber":88,"author":{"gitId":"Haoxuan0405"},"content":"        }","lastModifiedDate":"2023-03-19"},{"lineNumber":89,"author":{"gitId":"Haoxuan0405"},"content":"        return content.toString();","lastModifiedDate":"2023-03-19"},{"lineNumber":90,"author":{"gitId":"Haoxuan0405"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":91,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":92,"author":{"gitId":"Haoxuan0405"},"content":"    /**","lastModifiedDate":"2023-03-19"},{"lineNumber":93,"author":{"gitId":"Haoxuan0405"},"content":"     * Parses and read all tasks(String) from disk file to Task object","lastModifiedDate":"2023-04-07"},{"lineNumber":94,"author":{"gitId":"Haoxuan0405"},"content":"     *","lastModifiedDate":"2023-03-19"},{"lineNumber":95,"author":{"gitId":"Haoxuan0405"},"content":"     * @param nextLine each line of tasks saved in disk file","lastModifiedDate":"2023-03-24"},{"lineNumber":96,"author":{"gitId":"Haoxuan0405"},"content":"     * @return a Task object","lastModifiedDate":"2023-03-19"},{"lineNumber":97,"author":{"gitId":"Haoxuan0405"},"content":"     */","lastModifiedDate":"2023-03-19"},{"lineNumber":98,"author":{"gitId":"Haoxuan0405"},"content":"    public static Task taskByLine(String nextLine) {","lastModifiedDate":"2023-03-19"},{"lineNumber":99,"author":{"gitId":"Haoxuan0405"},"content":"        String[] body \u003d nextLine.split(\" \\\\| \");","lastModifiedDate":"2023-03-19"},{"lineNumber":100,"author":{"gitId":"Haoxuan0405"},"content":"        Task task \u003d null;","lastModifiedDate":"2023-03-19"},{"lineNumber":101,"author":{"gitId":"Haoxuan0405"},"content":"        switch (body[0]) {","lastModifiedDate":"2023-03-19"},{"lineNumber":102,"author":{"gitId":"Haoxuan0405"},"content":"            case \"T\":","lastModifiedDate":"2023-03-19"},{"lineNumber":103,"author":{"gitId":"Haoxuan0405"},"content":"                task \u003d new Todo(body[2]);","lastModifiedDate":"2023-03-19"},{"lineNumber":104,"author":{"gitId":"Haoxuan0405"},"content":"                if (body[1].equals(\"1\")) {","lastModifiedDate":"2023-03-19"},{"lineNumber":105,"author":{"gitId":"Haoxuan0405"},"content":"                    task.Mark();","lastModifiedDate":"2023-03-19"},{"lineNumber":106,"author":{"gitId":"Haoxuan0405"},"content":"                }","lastModifiedDate":"2023-03-19"},{"lineNumber":107,"author":{"gitId":"Haoxuan0405"},"content":"                break;","lastModifiedDate":"2023-03-19"},{"lineNumber":108,"author":{"gitId":"Haoxuan0405"},"content":"            case \"D\":","lastModifiedDate":"2023-03-19"},{"lineNumber":109,"author":{"gitId":"Haoxuan0405"},"content":"                task \u003d new Deadline(body[2],","lastModifiedDate":"2023-03-24"},{"lineNumber":110,"author":{"gitId":"Haoxuan0405"},"content":"                        LocalDateTime.parse(body[3].replace(\"T\",\" \"),","lastModifiedDate":"2023-04-23"},{"lineNumber":111,"author":{"gitId":"Haoxuan0405"},"content":"                                DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")));","lastModifiedDate":"2023-04-23"},{"lineNumber":112,"author":{"gitId":"Haoxuan0405"},"content":"                if (body[1].equals(\"1\")) {","lastModifiedDate":"2023-03-19"},{"lineNumber":113,"author":{"gitId":"Haoxuan0405"},"content":"                    task.Mark();","lastModifiedDate":"2023-03-19"},{"lineNumber":114,"author":{"gitId":"Haoxuan0405"},"content":"                }","lastModifiedDate":"2023-03-19"},{"lineNumber":115,"author":{"gitId":"Haoxuan0405"},"content":"                break;","lastModifiedDate":"2023-03-19"},{"lineNumber":116,"author":{"gitId":"Haoxuan0405"},"content":"            case \"E\":","lastModifiedDate":"2023-03-19"},{"lineNumber":117,"author":{"gitId":"Haoxuan0405"},"content":"                task \u003d new Event(body[2],","lastModifiedDate":"2023-03-24"},{"lineNumber":118,"author":{"gitId":"Haoxuan0405"},"content":"                        LocalDateTime.parse(body[3].replace(\"T\",\" \"),","lastModifiedDate":"2023-04-23"},{"lineNumber":119,"author":{"gitId":"Haoxuan0405"},"content":"                                DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")),","lastModifiedDate":"2023-04-23"},{"lineNumber":120,"author":{"gitId":"Haoxuan0405"},"content":"                        LocalDateTime.parse(body[4].replace(\"T\",\" \"),","lastModifiedDate":"2023-04-23"},{"lineNumber":121,"author":{"gitId":"Haoxuan0405"},"content":"                                DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")));","lastModifiedDate":"2023-04-23"},{"lineNumber":122,"author":{"gitId":"Haoxuan0405"},"content":"                if (body[1].equals(\"1\")) {","lastModifiedDate":"2023-03-19"},{"lineNumber":123,"author":{"gitId":"Haoxuan0405"},"content":"                    task.Mark();","lastModifiedDate":"2023-03-19"},{"lineNumber":124,"author":{"gitId":"Haoxuan0405"},"content":"                }","lastModifiedDate":"2023-03-19"},{"lineNumber":125,"author":{"gitId":"Haoxuan0405"},"content":"                break;","lastModifiedDate":"2023-03-19"},{"lineNumber":126,"author":{"gitId":"Haoxuan0405"},"content":"        }","lastModifiedDate":"2023-03-19"},{"lineNumber":127,"author":{"gitId":"Haoxuan0405"},"content":"        return task;","lastModifiedDate":"2023-03-19"},{"lineNumber":128,"author":{"gitId":"Haoxuan0405"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":129,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":130,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":131,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":132,"author":{"gitId":"Haoxuan0405"},"content":"    public void findTask(String restCommand){","lastModifiedDate":"2023-04-01"},{"lineNumber":133,"author":{"gitId":"Haoxuan0405"},"content":"        String space \u003d \" \";","lastModifiedDate":"2023-04-01"},{"lineNumber":134,"author":{"gitId":"Haoxuan0405"},"content":"        Ui.showLine();","lastModifiedDate":"2023-04-01"},{"lineNumber":135,"author":{"gitId":"Haoxuan0405"},"content":"        System.out.println(space + \"Here are the matching tasks in your list:\");","lastModifiedDate":"2023-04-01"},{"lineNumber":136,"author":{"gitId":"Haoxuan0405"},"content":"        int taskNum \u003d 0;","lastModifiedDate":"2023-04-01"},{"lineNumber":137,"author":{"gitId":"Haoxuan0405"},"content":"        for (Task tasks : tasksList) {","lastModifiedDate":"2023-04-01"},{"lineNumber":138,"author":{"gitId":"Haoxuan0405"},"content":"            if(tasks.getDescription().contains(restCommand)){","lastModifiedDate":"2023-04-01"},{"lineNumber":139,"author":{"gitId":"Haoxuan0405"},"content":"                taskNum++;","lastModifiedDate":"2023-04-01"},{"lineNumber":140,"author":{"gitId":"Haoxuan0405"},"content":"                System.out.println(space + taskNum + \".\" + tasks);","lastModifiedDate":"2023-04-01"},{"lineNumber":141,"author":{"gitId":"Haoxuan0405"},"content":"            }","lastModifiedDate":"2023-04-01"},{"lineNumber":142,"author":{"gitId":"Haoxuan0405"},"content":"        }","lastModifiedDate":"2023-04-01"},{"lineNumber":143,"author":{"gitId":"Haoxuan0405"},"content":"        if(taskNum \u003d\u003d 0){","lastModifiedDate":"2023-04-01"},{"lineNumber":144,"author":{"gitId":"Haoxuan0405"},"content":"            System.out.println(space + \"No tasks found in the tasks list!\");","lastModifiedDate":"2023-04-07"},{"lineNumber":145,"author":{"gitId":"Haoxuan0405"},"content":"        }","lastModifiedDate":"2023-04-01"},{"lineNumber":146,"author":{"gitId":"Haoxuan0405"},"content":"        Ui.showLine();","lastModifiedDate":"2023-04-01"},{"lineNumber":147,"author":{"gitId":"Haoxuan0405"},"content":"    }","lastModifiedDate":"2023-04-01"},{"lineNumber":148,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-04-01"},{"lineNumber":149,"author":{"gitId":"Haoxuan0405"},"content":"    public void scheduleView(LocalDateTime scheduleDate){","lastModifiedDate":"2023-04-01"},{"lineNumber":150,"author":{"gitId":"Haoxuan0405"},"content":"        String space \u003d \" \";","lastModifiedDate":"2023-04-01"},{"lineNumber":151,"author":{"gitId":"Haoxuan0405"},"content":"        Ui.showLine();","lastModifiedDate":"2023-04-01"},{"lineNumber":152,"author":{"gitId":"Haoxuan0405"},"content":"        int taskNum \u003d 0;","lastModifiedDate":"2023-04-01"},{"lineNumber":153,"author":{"gitId":"Haoxuan0405"},"content":"        for (Task tasks : tasksList) {","lastModifiedDate":"2023-04-01"},{"lineNumber":154,"author":{"gitId":"Haoxuan0405"},"content":"            if(scheduleDate.equals(tasks.getStartData()) || scheduleDate.equals(tasks.getEndData())){","lastModifiedDate":"2023-04-01"},{"lineNumber":155,"author":{"gitId":"Haoxuan0405"},"content":"                taskNum++;","lastModifiedDate":"2023-04-01"},{"lineNumber":156,"author":{"gitId":"Haoxuan0405"},"content":"                System.out.println(space + taskNum + \".\" + tasks);","lastModifiedDate":"2023-04-01"},{"lineNumber":157,"author":{"gitId":"Haoxuan0405"},"content":"            }","lastModifiedDate":"2023-04-01"},{"lineNumber":158,"author":{"gitId":"Haoxuan0405"},"content":"        }","lastModifiedDate":"2023-04-01"},{"lineNumber":159,"author":{"gitId":"Haoxuan0405"},"content":"        if(taskNum \u003d\u003d 0){","lastModifiedDate":"2023-04-01"},{"lineNumber":160,"author":{"gitId":"Haoxuan0405"},"content":"            System.out.println(space + \"No tasks found in the form of a schedule!\");","lastModifiedDate":"2023-04-01"},{"lineNumber":161,"author":{"gitId":"Haoxuan0405"},"content":"        }","lastModifiedDate":"2023-04-01"},{"lineNumber":162,"author":{"gitId":"Haoxuan0405"},"content":"        Ui.showLine();","lastModifiedDate":"2023-04-01"},{"lineNumber":163,"author":{"gitId":"Haoxuan0405"},"content":"    }","lastModifiedDate":"2023-04-01"},{"lineNumber":164,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-04-01"},{"lineNumber":165,"author":{"gitId":"Haoxuan0405"},"content":"    /**","lastModifiedDate":"2023-03-24"},{"lineNumber":166,"author":{"gitId":"Haoxuan0405"},"content":"     * Prints and show all tasks in the list to User","lastModifiedDate":"2023-04-01"},{"lineNumber":167,"author":{"gitId":"Haoxuan0405"},"content":"     */","lastModifiedDate":"2023-03-24"},{"lineNumber":168,"author":{"gitId":"Haoxuan0405"},"content":"    public static void showToUser() {","lastModifiedDate":"2023-04-07"},{"lineNumber":169,"author":{"gitId":"Haoxuan0405"},"content":"        String space \u003d \" \";","lastModifiedDate":"2023-03-24"},{"lineNumber":170,"author":{"gitId":"Haoxuan0405"},"content":"        Ui.showLine();","lastModifiedDate":"2023-03-24"},{"lineNumber":171,"author":{"gitId":"Haoxuan0405"},"content":"        System.out.println(space + \"Here are the tasks in your list:\");","lastModifiedDate":"2023-03-24"},{"lineNumber":172,"author":{"gitId":"Haoxuan0405"},"content":"        int taskNum \u003d 0;","lastModifiedDate":"2023-03-24"},{"lineNumber":173,"author":{"gitId":"Haoxuan0405"},"content":"        for (Task tasks : tasksList) {","lastModifiedDate":"2023-03-24"},{"lineNumber":174,"author":{"gitId":"Haoxuan0405"},"content":"            taskNum++;","lastModifiedDate":"2023-03-24"},{"lineNumber":175,"author":{"gitId":"Haoxuan0405"},"content":"            System.out.println(space + taskNum + \".\" + tasks);","lastModifiedDate":"2023-04-07"},{"lineNumber":176,"author":{"gitId":"Haoxuan0405"},"content":"        }","lastModifiedDate":"2023-03-24"},{"lineNumber":177,"author":{"gitId":"Haoxuan0405"},"content":"        Ui.showLine();","lastModifiedDate":"2023-03-24"},{"lineNumber":178,"author":{"gitId":"Haoxuan0405"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":179,"author":{"gitId":"Haoxuan0405"},"content":"}","lastModifiedDate":"2023-03-19"},{"lineNumber":180,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-03-19"}],"authorContributionMap":{"Haoxuan0405":180}},{"path":"src/main/java/Ui/UI.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haoxuan0405"},"content":"package ui;","lastModifiedDate":"2023-04-01"},{"lineNumber":2,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-04-01"},{"lineNumber":3,"author":{"gitId":"Haoxuan0405"},"content":"import java.util.HashSet;","lastModifiedDate":"2023-04-07"},{"lineNumber":4,"author":{"gitId":"Haoxuan0405"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-04-01"},{"lineNumber":5,"author":{"gitId":"Haoxuan0405"},"content":"import java.util.Set;","lastModifiedDate":"2023-04-07"},{"lineNumber":6,"author":{"gitId":"Haoxuan0405"},"content":"import exception.DukeException;","lastModifiedDate":"2023-04-01"},{"lineNumber":7,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":8,"author":{"gitId":"Haoxuan0405"},"content":"public class Ui {","lastModifiedDate":"2023-04-01"},{"lineNumber":9,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":10,"author":{"gitId":"Haoxuan0405"},"content":"    public static void showWelcome(){","lastModifiedDate":"2023-04-01"},{"lineNumber":11,"author":{"gitId":"Haoxuan0405"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2023-04-01"},{"lineNumber":12,"author":{"gitId":"Haoxuan0405"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2023-04-01"},{"lineNumber":13,"author":{"gitId":"Haoxuan0405"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2023-04-01"},{"lineNumber":14,"author":{"gitId":"Haoxuan0405"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2023-04-01"},{"lineNumber":15,"author":{"gitId":"Haoxuan0405"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2023-04-01"},{"lineNumber":16,"author":{"gitId":"Haoxuan0405"},"content":"        System.out.println(\"Hello from\\n\" + logo);","lastModifiedDate":"2023-04-01"},{"lineNumber":17,"author":{"gitId":"Haoxuan0405"},"content":"        String space \u003d \" \";","lastModifiedDate":"2023-04-01"},{"lineNumber":18,"author":{"gitId":"Haoxuan0405"},"content":"        Ui.showLine();","lastModifiedDate":"2023-04-01"},{"lineNumber":19,"author":{"gitId":"Haoxuan0405"},"content":"        System.out.println(space + \"Hello! I\u0027m Duke\\n\" + space +\"What can I do for you?\");","lastModifiedDate":"2023-04-01"},{"lineNumber":20,"author":{"gitId":"Haoxuan0405"},"content":"        Ui.showLine();","lastModifiedDate":"2023-04-01"},{"lineNumber":21,"author":{"gitId":"Haoxuan0405"},"content":"    }","lastModifiedDate":"2023-04-01"},{"lineNumber":22,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-04-01"},{"lineNumber":23,"author":{"gitId":"Haoxuan0405"},"content":"    /**","lastModifiedDate":"2023-04-07"},{"lineNumber":24,"author":{"gitId":"Haoxuan0405"},"content":"     * Show to the user about Duke menu","lastModifiedDate":"2023-04-07"},{"lineNumber":25,"author":{"gitId":"Haoxuan0405"},"content":"     */","lastModifiedDate":"2023-04-07"},{"lineNumber":26,"author":{"gitId":"Haoxuan0405"},"content":"    public static void showUserMenu(){","lastModifiedDate":"2023-04-07"},{"lineNumber":27,"author":{"gitId":"Haoxuan0405"},"content":"        printMenu();","lastModifiedDate":"2023-04-23"},{"lineNumber":28,"author":{"gitId":"Haoxuan0405"},"content":"    }","lastModifiedDate":"2023-04-23"},{"lineNumber":29,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-04-23"},{"lineNumber":30,"author":{"gitId":"Haoxuan0405"},"content":"    private static void printMenu() {","lastModifiedDate":"2023-04-23"},{"lineNumber":31,"author":{"gitId":"Haoxuan0405"},"content":"        Set\u003cString\u003e hashSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-04-07"},{"lineNumber":32,"author":{"gitId":"Haoxuan0405"},"content":"        String space \u003d \" \";","lastModifiedDate":"2023-04-07"},{"lineNumber":33,"author":{"gitId":"Haoxuan0405"},"content":"        System.out.println(\"Please key in command followed as below:\");","lastModifiedDate":"2023-04-07"},{"lineNumber":34,"author":{"gitId":"Haoxuan0405"},"content":"        String LIST_ALL_TASKS \u003d \"-List all existing tasks, enter list\\n\";","lastModifiedDate":"2023-04-07"},{"lineNumber":35,"author":{"gitId":"Haoxuan0405"},"content":"        String TODO_TASK \u003d \"-Add a todo task, enter todo XXX\\n\";","lastModifiedDate":"2023-04-07"},{"lineNumber":36,"author":{"gitId":"Haoxuan0405"},"content":"        String DEADLINE_TASK \u003d \"-Add a deadline task, enter deadline XXX /by \\\"yyyy-MM-dd HH:mm\\\"\\n\";","lastModifiedDate":"2023-04-07"},{"lineNumber":37,"author":{"gitId":"Haoxuan0405"},"content":"        String EVENT_TASK \u003d \"-Add a event task, enter event XXX /from \\\"yyyy-MM-dd HH:mm\\\" /to \\\"yyyy-MM-dd HH:mm\\\"\\n\";","lastModifiedDate":"2023-04-07"},{"lineNumber":38,"author":{"gitId":"Haoxuan0405"},"content":"        String MARK_TASK \u003d \"-Mark task, enter mark [task index]\\n\";","lastModifiedDate":"2023-04-07"},{"lineNumber":39,"author":{"gitId":"Haoxuan0405"},"content":"        String UNMARK_TASK \u003d \"-Unmark task, enter unmark [task index]\\n\";","lastModifiedDate":"2023-04-07"},{"lineNumber":40,"author":{"gitId":"Haoxuan0405"},"content":"        String DELETE_TASK \u003d \"-Delete task, enter delete [task index]\\n\";","lastModifiedDate":"2023-04-07"},{"lineNumber":41,"author":{"gitId":"Haoxuan0405"},"content":"        String FIND_TASK \u003d \"-Find task, enter find XXX\\n\";","lastModifiedDate":"2023-04-07"},{"lineNumber":42,"author":{"gitId":"Haoxuan0405"},"content":"        String SCHEDULE_TASK \u003d \"-View the schedule for a specific date, enter schedule \\\"yyyy-MM-dd HH:mm\\\"\\n\";","lastModifiedDate":"2023-04-07"},{"lineNumber":43,"author":{"gitId":"Haoxuan0405"},"content":"        String SAVE_TASK \u003d \"-Save task, enter save\\n\";","lastModifiedDate":"2023-04-07"},{"lineNumber":44,"author":{"gitId":"Haoxuan0405"},"content":"        String EXIT \u003d \"-To exit Duke, enter bye\\n\";","lastModifiedDate":"2023-04-07"},{"lineNumber":45,"author":{"gitId":"Haoxuan0405"},"content":"        hashSet.add(LIST_ALL_TASKS);","lastModifiedDate":"2023-04-07"},{"lineNumber":46,"author":{"gitId":"Haoxuan0405"},"content":"        hashSet.add(TODO_TASK);","lastModifiedDate":"2023-04-07"},{"lineNumber":47,"author":{"gitId":"Haoxuan0405"},"content":"        hashSet.add(DEADLINE_TASK);","lastModifiedDate":"2023-04-07"},{"lineNumber":48,"author":{"gitId":"Haoxuan0405"},"content":"        hashSet.add(EVENT_TASK);","lastModifiedDate":"2023-04-07"},{"lineNumber":49,"author":{"gitId":"Haoxuan0405"},"content":"        hashSet.add(MARK_TASK);","lastModifiedDate":"2023-04-07"},{"lineNumber":50,"author":{"gitId":"Haoxuan0405"},"content":"        hashSet.add(UNMARK_TASK);","lastModifiedDate":"2023-04-07"},{"lineNumber":51,"author":{"gitId":"Haoxuan0405"},"content":"        hashSet.add(DELETE_TASK);","lastModifiedDate":"2023-04-07"},{"lineNumber":52,"author":{"gitId":"Haoxuan0405"},"content":"        hashSet.add(FIND_TASK);","lastModifiedDate":"2023-04-07"},{"lineNumber":53,"author":{"gitId":"Haoxuan0405"},"content":"        hashSet.add(SCHEDULE_TASK);","lastModifiedDate":"2023-04-07"},{"lineNumber":54,"author":{"gitId":"Haoxuan0405"},"content":"        hashSet.add(SAVE_TASK);","lastModifiedDate":"2023-04-07"},{"lineNumber":55,"author":{"gitId":"Haoxuan0405"},"content":"        hashSet.add(EXIT);","lastModifiedDate":"2023-04-07"},{"lineNumber":56,"author":{"gitId":"Haoxuan0405"},"content":"        for(String s: hashSet){","lastModifiedDate":"2023-04-07"},{"lineNumber":57,"author":{"gitId":"Haoxuan0405"},"content":"            System.out.print(space + s);","lastModifiedDate":"2023-04-07"},{"lineNumber":58,"author":{"gitId":"Haoxuan0405"},"content":"        }","lastModifiedDate":"2023-04-07"},{"lineNumber":59,"author":{"gitId":"Haoxuan0405"},"content":"        System.out.println();","lastModifiedDate":"2023-04-07"},{"lineNumber":60,"author":{"gitId":"Haoxuan0405"},"content":"    }","lastModifiedDate":"2023-04-07"},{"lineNumber":61,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":62,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-04-23"},{"lineNumber":63,"author":{"gitId":"Haoxuan0405"},"content":"    /**","lastModifiedDate":"2023-04-01"},{"lineNumber":64,"author":{"gitId":"Haoxuan0405"},"content":"     * User key in full command","lastModifiedDate":"2023-04-01"},{"lineNumber":65,"author":{"gitId":"Haoxuan0405"},"content":"     *","lastModifiedDate":"2023-04-01"},{"lineNumber":66,"author":{"gitId":"Haoxuan0405"},"content":"     * @return full command","lastModifiedDate":"2023-04-01"},{"lineNumber":67,"author":{"gitId":"Haoxuan0405"},"content":"     */","lastModifiedDate":"2023-04-01"},{"lineNumber":68,"author":{"gitId":"Haoxuan0405"},"content":"    public static String getUserCommand() {","lastModifiedDate":"2023-04-01"},{"lineNumber":69,"author":{"gitId":"Haoxuan0405"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-04-01"},{"lineNumber":70,"author":{"gitId":"Haoxuan0405"},"content":"        return scanner.nextLine();","lastModifiedDate":"2023-04-01"},{"lineNumber":71,"author":{"gitId":"Haoxuan0405"},"content":"    }","lastModifiedDate":"2023-04-01"},{"lineNumber":72,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-04-01"},{"lineNumber":73,"author":{"gitId":"Haoxuan0405"},"content":"    public static void showLine(){","lastModifiedDate":"2023-04-01"},{"lineNumber":74,"author":{"gitId":"Haoxuan0405"},"content":"        System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2023-04-01"},{"lineNumber":75,"author":{"gitId":"Haoxuan0405"},"content":"    }","lastModifiedDate":"2023-04-01"},{"lineNumber":76,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-04-01"},{"lineNumber":77,"author":{"gitId":"Haoxuan0405"},"content":"    /**","lastModifiedDate":"2023-04-01"},{"lineNumber":78,"author":{"gitId":"Haoxuan0405"},"content":"     * If user just want to show one sentence, can use this echo method","lastModifiedDate":"2023-04-01"},{"lineNumber":79,"author":{"gitId":"Haoxuan0405"},"content":"     *","lastModifiedDate":"2023-04-01"},{"lineNumber":80,"author":{"gitId":"Haoxuan0405"},"content":"     * @param s string for print","lastModifiedDate":"2023-04-01"},{"lineNumber":81,"author":{"gitId":"Haoxuan0405"},"content":"     */","lastModifiedDate":"2023-04-01"},{"lineNumber":82,"author":{"gitId":"Haoxuan0405"},"content":"    public static void Echo(String s) {","lastModifiedDate":"2023-04-01"},{"lineNumber":83,"author":{"gitId":"Haoxuan0405"},"content":"        String space \u003d \" \";","lastModifiedDate":"2023-04-01"},{"lineNumber":84,"author":{"gitId":"Haoxuan0405"},"content":"        Ui.showLine();","lastModifiedDate":"2023-04-01"},{"lineNumber":85,"author":{"gitId":"Haoxuan0405"},"content":"        System.out.println(space + s);","lastModifiedDate":"2023-04-01"},{"lineNumber":86,"author":{"gitId":"Haoxuan0405"},"content":"        Ui.showLine();","lastModifiedDate":"2023-04-01"},{"lineNumber":87,"author":{"gitId":"Haoxuan0405"},"content":"    }","lastModifiedDate":"2023-04-01"},{"lineNumber":88,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-04-01"},{"lineNumber":89,"author":{"gitId":"Haoxuan0405"},"content":"    /**","lastModifiedDate":"2023-04-01"},{"lineNumber":90,"author":{"gitId":"Haoxuan0405"},"content":"     * @param e print the exception message","lastModifiedDate":"2023-04-01"},{"lineNumber":91,"author":{"gitId":"Haoxuan0405"},"content":"     */","lastModifiedDate":"2023-04-01"},{"lineNumber":92,"author":{"gitId":"Haoxuan0405"},"content":"    public static void showError(DukeException e){","lastModifiedDate":"2023-04-01"},{"lineNumber":93,"author":{"gitId":"Haoxuan0405"},"content":"        Ui.Echo(e.getMessage());","lastModifiedDate":"2023-04-01"},{"lineNumber":94,"author":{"gitId":"Haoxuan0405"},"content":"    }","lastModifiedDate":"2023-04-01"},{"lineNumber":95,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-04-01"},{"lineNumber":96,"author":{"gitId":"Haoxuan0405"},"content":"}","lastModifiedDate":"2023-04-01"}],"authorContributionMap":{"Haoxuan0405":96}},{"path":"src/test/java/ListCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Haoxuan0405"},"content":"import executecommand.Command;","lastModifiedDate":"2023-04-23"},{"lineNumber":2,"author":{"gitId":"Haoxuan0405"},"content":"import executecommand.ListCommand;","lastModifiedDate":"2023-04-23"},{"lineNumber":3,"author":{"gitId":"Haoxuan0405"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2023-04-23"},{"lineNumber":4,"author":{"gitId":"Haoxuan0405"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-04-23"},{"lineNumber":5,"author":{"gitId":"Haoxuan0405"},"content":"import storage.Storage;","lastModifiedDate":"2023-04-23"},{"lineNumber":6,"author":{"gitId":"Haoxuan0405"},"content":"import task.Task;","lastModifiedDate":"2023-04-23"},{"lineNumber":7,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-04-23"},{"lineNumber":8,"author":{"gitId":"Haoxuan0405"},"content":"class ListCommandTest {","lastModifiedDate":"2023-04-23"},{"lineNumber":9,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-04-23"},{"lineNumber":10,"author":{"gitId":"Haoxuan0405"},"content":"    @Test","lastModifiedDate":"2023-04-23"},{"lineNumber":11,"author":{"gitId":"Haoxuan0405"},"content":"    void execute() {","lastModifiedDate":"2023-04-23"},{"lineNumber":12,"author":{"gitId":"Haoxuan0405"},"content":"        Task task1 \u003d new Task(\"todo borrow book\");","lastModifiedDate":"2023-04-23"},{"lineNumber":13,"author":{"gitId":"Haoxuan0405"},"content":"        Task task2 \u003d new Task(\"deadline return book /by Sunday\");","lastModifiedDate":"2023-04-23"},{"lineNumber":14,"author":{"gitId":"Haoxuan0405"},"content":"        Task task3 \u003d new Task(\"done 2\");","lastModifiedDate":"2023-04-23"},{"lineNumber":15,"author":{"gitId":"Haoxuan0405"},"content":"        Storage.getStorage().taskAdd(task1);","lastModifiedDate":"2023-04-23"},{"lineNumber":16,"author":{"gitId":"Haoxuan0405"},"content":"        Storage.getStorage().taskAdd(task2);","lastModifiedDate":"2023-04-23"},{"lineNumber":17,"author":{"gitId":"Haoxuan0405"},"content":"        Storage.getStorage().taskAdd(task3);","lastModifiedDate":"2023-04-23"},{"lineNumber":18,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-04-23"},{"lineNumber":19,"author":{"gitId":"Haoxuan0405"},"content":"        Command c \u003d new ListCommand(\"list\");","lastModifiedDate":"2023-04-23"},{"lineNumber":20,"author":{"gitId":"Haoxuan0405"},"content":"        c.execute();","lastModifiedDate":"2023-04-23"},{"lineNumber":21,"author":{"gitId":"Haoxuan0405"},"content":"        Task actual1 \u003d Storage.getStorage().tasksList.get(0);","lastModifiedDate":"2023-04-23"},{"lineNumber":22,"author":{"gitId":"Haoxuan0405"},"content":"        Task actual2 \u003d Storage.getStorage().tasksList.get(1);","lastModifiedDate":"2023-04-23"},{"lineNumber":23,"author":{"gitId":"Haoxuan0405"},"content":"        Task actual3 \u003d Storage.getStorage().tasksList.get(2);","lastModifiedDate":"2023-04-23"},{"lineNumber":24,"author":{"gitId":"Haoxuan0405"},"content":"","lastModifiedDate":"2023-04-23"},{"lineNumber":25,"author":{"gitId":"Haoxuan0405"},"content":"        Assertions.assertEquals(task1,actual1);","lastModifiedDate":"2023-04-23"},{"lineNumber":26,"author":{"gitId":"Haoxuan0405"},"content":"        Assertions.assertEquals(task2,actual2);","lastModifiedDate":"2023-04-23"},{"lineNumber":27,"author":{"gitId":"Haoxuan0405"},"content":"        Assertions.assertEquals(task3,actual3);","lastModifiedDate":"2023-04-23"},{"lineNumber":28,"author":{"gitId":"Haoxuan0405"},"content":"    }","lastModifiedDate":"2023-04-23"},{"lineNumber":29,"author":{"gitId":"Haoxuan0405"},"content":"}","lastModifiedDate":"2023-04-23"}],"authorContributionMap":{"Haoxuan0405":29}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"Haoxuan0405"},"content":"java -classpath ..\\bin duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-04-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Haoxuan0405":1,"-":20}}]
