[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"ixxeden"},"content":"# duke.Duke project template","lastModifiedDate":"2023-04-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"ixxeden"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-04-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":22,"ixxeden":2}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"ixxeden"},"content":"    mainClassName \u003d \"duke.Duke\"","lastModifiedDate":"2023-04-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"ixxeden"},"content":"    enableAssertions \u003d true;","lastModifiedDate":"2023-04-10"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":40,"ixxeden":2}},{"path":"data/saved.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ixxeden"},"content":"[T][ ] swim [Priority Medium]","lastModifiedDate":"2023-04-14"},{"lineNumber":2,"author":{"gitId":"ixxeden"},"content":"[T][ ] eat [Priority Medium]","lastModifiedDate":"2023-04-14"},{"lineNumber":3,"author":{"gitId":"ixxeden"},"content":"[D][X] report /by 2023-04-16 23:59 [Priority Medium]","lastModifiedDate":"2023-04-14"}],"authorContributionMap":{"ixxeden":3}},{"path":"src/main/java/duke/Command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ixxeden"},"content":"package duke.Command;","lastModifiedDate":"2023-04-07"},{"lineNumber":2,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":3,"author":{"gitId":"ixxeden"},"content":"import duke.Exception.DukeException;","lastModifiedDate":"2023-04-11"},{"lineNumber":4,"author":{"gitId":"ixxeden"},"content":"import duke.Parser.Parser;","lastModifiedDate":"2023-04-08"},{"lineNumber":5,"author":{"gitId":"ixxeden"},"content":"import duke.Storage.Storage;","lastModifiedDate":"2023-04-08"},{"lineNumber":6,"author":{"gitId":"ixxeden"},"content":"import duke.TaskList.TaskList;","lastModifiedDate":"2023-04-08"},{"lineNumber":7,"author":{"gitId":"ixxeden"},"content":"import duke.TasksType.Deadline;","lastModifiedDate":"2023-04-08"},{"lineNumber":8,"author":{"gitId":"ixxeden"},"content":"import duke.TasksType.Event;","lastModifiedDate":"2023-04-08"},{"lineNumber":9,"author":{"gitId":"ixxeden"},"content":"import duke.TasksType.Task;","lastModifiedDate":"2023-04-08"},{"lineNumber":10,"author":{"gitId":"ixxeden"},"content":"import duke.TasksType.Todo;","lastModifiedDate":"2023-04-08"},{"lineNumber":11,"author":{"gitId":"ixxeden"},"content":"import duke.Ui.Ui;","lastModifiedDate":"2023-04-11"},{"lineNumber":12,"author":{"gitId":"ixxeden"},"content":"import duke.Utility.Util;","lastModifiedDate":"2023-04-08"},{"lineNumber":13,"author":{"gitId":"ixxeden"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-04-08"},{"lineNumber":14,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":15,"author":{"gitId":"ixxeden"},"content":"public class Command {","lastModifiedDate":"2023-04-07"},{"lineNumber":16,"author":{"gitId":"ixxeden"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":17,"author":{"gitId":"ixxeden"},"content":"     * Returns a Task used to store in the list of tasks","lastModifiedDate":"2023-04-14"},{"lineNumber":18,"author":{"gitId":"ixxeden"},"content":"     * Loads the previously saved file, with each line into the different task types","lastModifiedDate":"2023-04-14"},{"lineNumber":19,"author":{"gitId":"ixxeden"},"content":"     * Checks for the task type and returns a task element that is used to store in the ArrayList is the loadFile() method","lastModifiedDate":"2023-04-10"},{"lineNumber":20,"author":{"gitId":"ixxeden"},"content":"     * Checks if the string has an X to change the isDone member of the task to true","lastModifiedDate":"2023-04-10"},{"lineNumber":21,"author":{"gitId":"ixxeden"},"content":"     * Checks the priority level and change the priorityLevel of the task according","lastModifiedDate":"2023-04-10"},{"lineNumber":22,"author":{"gitId":"ixxeden"},"content":"     * @param line takes in a line of string input that was loaded from the existing file","lastModifiedDate":"2023-04-10"},{"lineNumber":23,"author":{"gitId":"ixxeden"},"content":"     * @return a task element with the correct task type, isDone and priorityLevel for subsequent storing to ArrayList in loadFile() method","lastModifiedDate":"2023-04-10"},{"lineNumber":24,"author":{"gitId":"ixxeden"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":25,"author":{"gitId":"ixxeden"},"content":"    public static Task executeLoad(String line) {","lastModifiedDate":"2023-04-08"},{"lineNumber":26,"author":{"gitId":"ixxeden"},"content":"        Task task;","lastModifiedDate":"2023-04-08"},{"lineNumber":27,"author":{"gitId":"ixxeden"},"content":"        if (line.contains(\"[T]\")) { //loads Todos","lastModifiedDate":"2023-04-08"},{"lineNumber":28,"author":{"gitId":"ixxeden"},"content":"            task \u003d new Todo(line.substring(7, line.indexOf(\"[Priority \")).trim());","lastModifiedDate":"2023-04-10"},{"lineNumber":29,"author":{"gitId":"ixxeden"},"content":"        }","lastModifiedDate":"2023-04-08"},{"lineNumber":30,"author":{"gitId":"ixxeden"},"content":"        else if (line.contains(\"[D]\")) { //loads Deadlines","lastModifiedDate":"2023-04-08"},{"lineNumber":31,"author":{"gitId":"ixxeden"},"content":"            String description \u003d line.substring(7, line.indexOf(\"[Priority \"));","lastModifiedDate":"2023-04-10"},{"lineNumber":32,"author":{"gitId":"ixxeden"},"content":"            String[] deadlineSplit \u003d description.split(\"/by\");","lastModifiedDate":"2023-04-08"},{"lineNumber":33,"author":{"gitId":"ixxeden"},"content":"            task \u003d new Deadline(deadlineSplit[0].trim(), Util.convertDateTime(deadlineSplit[1].trim()));","lastModifiedDate":"2023-04-10"},{"lineNumber":34,"author":{"gitId":"ixxeden"},"content":"        }","lastModifiedDate":"2023-04-08"},{"lineNumber":35,"author":{"gitId":"ixxeden"},"content":"        else {","lastModifiedDate":"2023-04-08"},{"lineNumber":36,"author":{"gitId":"ixxeden"},"content":"            String description \u003d line.substring(7, line.indexOf(\"[Priority \")); //loads Events","lastModifiedDate":"2023-04-10"},{"lineNumber":37,"author":{"gitId":"ixxeden"},"content":"            String[] eventSplit \u003d description.split(\"/from\");","lastModifiedDate":"2023-04-08"},{"lineNumber":38,"author":{"gitId":"ixxeden"},"content":"            String[] eventSplitAgain \u003d eventSplit[1].split(\"/to\");","lastModifiedDate":"2023-04-08"},{"lineNumber":39,"author":{"gitId":"ixxeden"},"content":"            task \u003d new Event(eventSplit[0].trim(), Util.convertDateTime(eventSplitAgain[0].trim()), Util.convertDateTime(eventSplitAgain[1].trim()));","lastModifiedDate":"2023-04-10"},{"lineNumber":40,"author":{"gitId":"ixxeden"},"content":"        }","lastModifiedDate":"2023-04-08"},{"lineNumber":41,"author":{"gitId":"ixxeden"},"content":"        if (line.contains(\"[X]\")) {","lastModifiedDate":"2023-04-08"},{"lineNumber":42,"author":{"gitId":"ixxeden"},"content":"            task.markAsDone();","lastModifiedDate":"2023-04-08"},{"lineNumber":43,"author":{"gitId":"ixxeden"},"content":"        }","lastModifiedDate":"2023-04-08"},{"lineNumber":44,"author":{"gitId":"ixxeden"},"content":"        if (line.contains(\"[Priority High\")) {","lastModifiedDate":"2023-04-10"},{"lineNumber":45,"author":{"gitId":"ixxeden"},"content":"            task.changePriority(Task.priorityLevel.High);","lastModifiedDate":"2023-04-10"},{"lineNumber":46,"author":{"gitId":"ixxeden"},"content":"        }","lastModifiedDate":"2023-04-10"},{"lineNumber":47,"author":{"gitId":"ixxeden"},"content":"        else if (line.contains(\"[Priority Low\")) {","lastModifiedDate":"2023-04-10"},{"lineNumber":48,"author":{"gitId":"ixxeden"},"content":"            task.changePriority(Task.priorityLevel.Low);","lastModifiedDate":"2023-04-10"},{"lineNumber":49,"author":{"gitId":"ixxeden"},"content":"        }","lastModifiedDate":"2023-04-10"},{"lineNumber":50,"author":{"gitId":"ixxeden"},"content":"        return task;","lastModifiedDate":"2023-04-08"},{"lineNumber":51,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-04-08"},{"lineNumber":52,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":53,"author":{"gitId":"ixxeden"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":54,"author":{"gitId":"ixxeden"},"content":"     * Tries to load a file, and runs the endless loop to scan for user inputs (commands)","lastModifiedDate":"2023-04-14"},{"lineNumber":55,"author":{"gitId":"ixxeden"},"content":"     * declares the boolean, scanner object, loader, task list","lastModifiedDate":"2023-04-10"},{"lineNumber":56,"author":{"gitId":"ixxeden"},"content":"     * calls for load file to try loading an existing file and store into the list","lastModifiedDate":"2023-04-10"},{"lineNumber":57,"author":{"gitId":"ixxeden"},"content":"     * starts loop and scans for user commands (question)","lastModifiedDate":"2023-04-10"},{"lineNumber":58,"author":{"gitId":"ixxeden"},"content":"     * validates the question by calling the Parser class method validateQuestion(), to see if input is valid","lastModifiedDate":"2023-04-10"},{"lineNumber":59,"author":{"gitId":"ixxeden"},"content":"     * checks if mark/unmark commands is valid by calling the checkMark() method in Util","lastModifiedDate":"2023-04-10"},{"lineNumber":60,"author":{"gitId":"ixxeden"},"content":"     * stores the tasks according to the user commands and according to the task type, by calling the TaskList class methods","lastModifiedDate":"2023-04-10"},{"lineNumber":61,"author":{"gitId":"ixxeden"},"content":"     * sort the ArrayList from priority level high to low, by calling the sortList() method in TaskList class","lastModifiedDate":"2023-04-10"},{"lineNumber":62,"author":{"gitId":"ixxeden"},"content":"     * saves the list into text file by calling the saveToFile() in Storage class","lastModifiedDate":"2023-04-10"},{"lineNumber":63,"author":{"gitId":"ixxeden"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":64,"author":{"gitId":"ixxeden"},"content":"    public static void execute() throws DukeException {","lastModifiedDate":"2023-04-11"},{"lineNumber":65,"author":{"gitId":"ixxeden"},"content":"        boolean isBye \u003d false;","lastModifiedDate":"2023-04-08"},{"lineNumber":66,"author":{"gitId":"ixxeden"},"content":"        Scanner Obj \u003d new Scanner(System.in);","lastModifiedDate":"2023-04-08"},{"lineNumber":67,"author":{"gitId":"ixxeden"},"content":"        Storage loader \u003d new Storage();","lastModifiedDate":"2023-04-08"},{"lineNumber":68,"author":{"gitId":"ixxeden"},"content":"        TaskList list \u003d new TaskList();","lastModifiedDate":"2023-04-08"},{"lineNumber":69,"author":{"gitId":"ixxeden"},"content":"        list.storeList(loader.loadFile());","lastModifiedDate":"2023-04-08"},{"lineNumber":70,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":71,"author":{"gitId":"ixxeden"},"content":"        while (!isBye) {","lastModifiedDate":"2023-04-08"},{"lineNumber":72,"author":{"gitId":"ixxeden"},"content":"            String question \u003d Obj.nextLine();","lastModifiedDate":"2023-04-08"},{"lineNumber":73,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":74,"author":{"gitId":"ixxeden"},"content":"            if (question.equalsIgnoreCase(\"bye\")) { //if the input is bye then end the program","lastModifiedDate":"2023-04-08"},{"lineNumber":75,"author":{"gitId":"ixxeden"},"content":"                isBye \u003d true;","lastModifiedDate":"2023-04-08"},{"lineNumber":76,"author":{"gitId":"ixxeden"},"content":"                System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-04-08"},{"lineNumber":77,"author":{"gitId":"ixxeden"},"content":"                continue;","lastModifiedDate":"2023-04-08"},{"lineNumber":78,"author":{"gitId":"ixxeden"},"content":"            }","lastModifiedDate":"2023-04-08"},{"lineNumber":79,"author":{"gitId":"ixxeden"},"content":"            //catch for help","lastModifiedDate":"2023-04-11"},{"lineNumber":80,"author":{"gitId":"ixxeden"},"content":"            if (question.equalsIgnoreCase(\"help\")) {","lastModifiedDate":"2023-04-11"},{"lineNumber":81,"author":{"gitId":"ixxeden"},"content":"                Ui.showCommands();","lastModifiedDate":"2023-04-11"},{"lineNumber":82,"author":{"gitId":"ixxeden"},"content":"                continue;","lastModifiedDate":"2023-04-11"},{"lineNumber":83,"author":{"gitId":"ixxeden"},"content":"            }","lastModifiedDate":"2023-04-11"},{"lineNumber":84,"author":{"gitId":"ixxeden"},"content":"            if (question.equalsIgnoreCase(\"list\")) { //loop to print out the items in list[]","lastModifiedDate":"2023-04-08"},{"lineNumber":85,"author":{"gitId":"ixxeden"},"content":"                list.listTask();","lastModifiedDate":"2023-04-08"},{"lineNumber":86,"author":{"gitId":"ixxeden"},"content":"                continue;","lastModifiedDate":"2023-04-08"},{"lineNumber":87,"author":{"gitId":"ixxeden"},"content":"            }","lastModifiedDate":"2023-04-08"},{"lineNumber":88,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":89,"author":{"gitId":"ixxeden"},"content":"            try {","lastModifiedDate":"2023-04-08"},{"lineNumber":90,"author":{"gitId":"ixxeden"},"content":"                Parser.validateQuestion(question.trim(), list.getList());","lastModifiedDate":"2023-04-11"},{"lineNumber":91,"author":{"gitId":"ixxeden"},"content":"            } catch (DukeException error) {","lastModifiedDate":"2023-04-08"},{"lineNumber":92,"author":{"gitId":"ixxeden"},"content":"                System.out.println(error);","lastModifiedDate":"2023-04-08"},{"lineNumber":93,"author":{"gitId":"ixxeden"},"content":"                continue;","lastModifiedDate":"2023-04-08"},{"lineNumber":94,"author":{"gitId":"ixxeden"},"content":"            }","lastModifiedDate":"2023-04-08"},{"lineNumber":95,"author":{"gitId":"ixxeden"},"content":"            if (question.contains(\"mark\")) {","lastModifiedDate":"2023-04-08"},{"lineNumber":96,"author":{"gitId":"ixxeden"},"content":"                if (Util.checkMark(question)) {","lastModifiedDate":"2023-04-08"},{"lineNumber":97,"author":{"gitId":"ixxeden"},"content":"                    String[] splitted \u003d question.split(\" \");","lastModifiedDate":"2023-04-08"},{"lineNumber":98,"author":{"gitId":"ixxeden"},"content":"                    int num \u003d Integer.parseInt(splitted[1]) - 1;","lastModifiedDate":"2023-04-08"},{"lineNumber":99,"author":{"gitId":"ixxeden"},"content":"                    if (question.contains(\"unmark\")) {","lastModifiedDate":"2023-04-08"},{"lineNumber":100,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":101,"author":{"gitId":"ixxeden"},"content":"                        list.getTask(num).markAsNotDone();","lastModifiedDate":"2023-04-08"},{"lineNumber":102,"author":{"gitId":"ixxeden"},"content":"                        System.out.println(\"Oops! Task \" + (num + 1) + \" is marked as not done.\");","lastModifiedDate":"2023-04-11"},{"lineNumber":103,"author":{"gitId":"ixxeden"},"content":"                        System.out.println(list.getTask(num));","lastModifiedDate":"2023-04-11"},{"lineNumber":104,"author":{"gitId":"ixxeden"},"content":"                        Ui.showLine();","lastModifiedDate":"2023-04-11"},{"lineNumber":105,"author":{"gitId":"ixxeden"},"content":"                        loader.saveToFile(list.getList());","lastModifiedDate":"2023-04-08"},{"lineNumber":106,"author":{"gitId":"ixxeden"},"content":"                        continue;","lastModifiedDate":"2023-04-08"},{"lineNumber":107,"author":{"gitId":"ixxeden"},"content":"                    } else {","lastModifiedDate":"2023-04-08"},{"lineNumber":108,"author":{"gitId":"ixxeden"},"content":"                        list.getTask(num).markAsDone();","lastModifiedDate":"2023-04-08"},{"lineNumber":109,"author":{"gitId":"ixxeden"},"content":"                        System.out.println(\"Well Done! Task \" + (num + 1) + \" is done.\");","lastModifiedDate":"2023-04-11"},{"lineNumber":110,"author":{"gitId":"ixxeden"},"content":"                        System.out.println(list.getTask(num));","lastModifiedDate":"2023-04-11"},{"lineNumber":111,"author":{"gitId":"ixxeden"},"content":"                        Ui.showLine();","lastModifiedDate":"2023-04-11"},{"lineNumber":112,"author":{"gitId":"ixxeden"},"content":"                        loader.saveToFile(list.getList());","lastModifiedDate":"2023-04-08"},{"lineNumber":113,"author":{"gitId":"ixxeden"},"content":"                        continue;","lastModifiedDate":"2023-04-08"},{"lineNumber":114,"author":{"gitId":"ixxeden"},"content":"                    }","lastModifiedDate":"2023-04-08"},{"lineNumber":115,"author":{"gitId":"ixxeden"},"content":"                }","lastModifiedDate":"2023-04-08"},{"lineNumber":116,"author":{"gitId":"ixxeden"},"content":"            }","lastModifiedDate":"2023-04-10"},{"lineNumber":117,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-11"},{"lineNumber":118,"author":{"gitId":"ixxeden"},"content":"            else {","lastModifiedDate":"2023-04-10"},{"lineNumber":119,"author":{"gitId":"ixxeden"},"content":"                String[] splitted \u003d question.split(\" \", 2);","lastModifiedDate":"2023-04-08"},{"lineNumber":120,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":121,"author":{"gitId":"ixxeden"},"content":"                //catch for \"to-do\"","lastModifiedDate":"2023-04-08"},{"lineNumber":122,"author":{"gitId":"ixxeden"},"content":"                if (splitted[0].equalsIgnoreCase(\"todo\")) {","lastModifiedDate":"2023-04-08"},{"lineNumber":123,"author":{"gitId":"ixxeden"},"content":"                    Todo td \u003d new Todo(splitted[1].trim());","lastModifiedDate":"2023-04-08"},{"lineNumber":124,"author":{"gitId":"ixxeden"},"content":"                    list.addTask(td);","lastModifiedDate":"2023-04-08"},{"lineNumber":125,"author":{"gitId":"ixxeden"},"content":"                }","lastModifiedDate":"2023-04-08"},{"lineNumber":126,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":127,"author":{"gitId":"ixxeden"},"content":"                //catch for \"deadline\"","lastModifiedDate":"2023-04-08"},{"lineNumber":128,"author":{"gitId":"ixxeden"},"content":"                else if (splitted[0].equalsIgnoreCase(\"deadline\")) {","lastModifiedDate":"2023-04-08"},{"lineNumber":129,"author":{"gitId":"ixxeden"},"content":"                    String[] deadlineSplit \u003d splitted[1].split(\"/by\");","lastModifiedDate":"2023-04-08"},{"lineNumber":130,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-11"},{"lineNumber":131,"author":{"gitId":"ixxeden"},"content":"                    if (Parser.isValidDateTime(deadlineSplit[1].trim())) { //validates the dateTime format from user input","lastModifiedDate":"2023-04-11"},{"lineNumber":132,"author":{"gitId":"ixxeden"},"content":"                        try { //validates the deadline dateTime","lastModifiedDate":"2023-04-11"},{"lineNumber":133,"author":{"gitId":"ixxeden"},"content":"                            Util.validateDateTime(Util.convertDateTime(deadlineSplit[1].trim()));","lastModifiedDate":"2023-04-11"},{"lineNumber":134,"author":{"gitId":"ixxeden"},"content":"                        } catch (DukeException dateError) {","lastModifiedDate":"2023-04-11"},{"lineNumber":135,"author":{"gitId":"ixxeden"},"content":"                            System.out.println(dateError);","lastModifiedDate":"2023-04-11"},{"lineNumber":136,"author":{"gitId":"ixxeden"},"content":"                            continue;","lastModifiedDate":"2023-04-11"},{"lineNumber":137,"author":{"gitId":"ixxeden"},"content":"                        }","lastModifiedDate":"2023-04-11"},{"lineNumber":138,"author":{"gitId":"ixxeden"},"content":"                        Deadline dl \u003d new Deadline(deadlineSplit[0].trim(), Util.convertDateTime(deadlineSplit[1].trim()));","lastModifiedDate":"2023-04-10"},{"lineNumber":139,"author":{"gitId":"ixxeden"},"content":"                        list.addTask(dl);","lastModifiedDate":"2023-04-08"},{"lineNumber":140,"author":{"gitId":"ixxeden"},"content":"                    }","lastModifiedDate":"2023-04-08"},{"lineNumber":141,"author":{"gitId":"ixxeden"},"content":"                    else {","lastModifiedDate":"2023-04-11"},{"lineNumber":142,"author":{"gitId":"ixxeden"},"content":"                        System.out.println(\"Invalid date and time format. Please use the format: yyyy-MM-dd HH:mm\");","lastModifiedDate":"2023-04-11"},{"lineNumber":143,"author":{"gitId":"ixxeden"},"content":"                        continue;","lastModifiedDate":"2023-04-11"},{"lineNumber":144,"author":{"gitId":"ixxeden"},"content":"                    }","lastModifiedDate":"2023-04-11"},{"lineNumber":145,"author":{"gitId":"ixxeden"},"content":"                }","lastModifiedDate":"2023-04-11"},{"lineNumber":146,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":147,"author":{"gitId":"ixxeden"},"content":"                //catch for \"event\"","lastModifiedDate":"2023-04-08"},{"lineNumber":148,"author":{"gitId":"ixxeden"},"content":"                else if (splitted[0].equalsIgnoreCase(\"event\")) {","lastModifiedDate":"2023-04-08"},{"lineNumber":149,"author":{"gitId":"ixxeden"},"content":"                    String[] eventSplit \u003d splitted[1].split(\"/from\");","lastModifiedDate":"2023-04-08"},{"lineNumber":150,"author":{"gitId":"ixxeden"},"content":"                    String[] eventSplitAgain \u003d eventSplit[1].split(\"/to\");","lastModifiedDate":"2023-04-08"},{"lineNumber":151,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-11"},{"lineNumber":152,"author":{"gitId":"ixxeden"},"content":"                    if (Parser.isValidDateTime(eventSplitAgain[0].trim()) \u0026\u0026 //validates the dateTime format","lastModifiedDate":"2023-04-11"},{"lineNumber":153,"author":{"gitId":"ixxeden"},"content":"                            Parser.isValidDateTime(eventSplitAgain[1].trim())) {","lastModifiedDate":"2023-04-11"},{"lineNumber":154,"author":{"gitId":"ixxeden"},"content":"                        try { //validates the start and end dateTimes","lastModifiedDate":"2023-04-11"},{"lineNumber":155,"author":{"gitId":"ixxeden"},"content":"                            Util.validateDateTime(Util.convertDateTime(eventSplitAgain[0].trim()));","lastModifiedDate":"2023-04-11"},{"lineNumber":156,"author":{"gitId":"ixxeden"},"content":"                            Util.validateDateTime(Util.convertDateTime(eventSplitAgain[1].trim()));","lastModifiedDate":"2023-04-11"},{"lineNumber":157,"author":{"gitId":"ixxeden"},"content":"                        } catch (DukeException dateError) {","lastModifiedDate":"2023-04-11"},{"lineNumber":158,"author":{"gitId":"ixxeden"},"content":"                            System.out.println(dateError);","lastModifiedDate":"2023-04-11"},{"lineNumber":159,"author":{"gitId":"ixxeden"},"content":"                            continue;","lastModifiedDate":"2023-04-11"},{"lineNumber":160,"author":{"gitId":"ixxeden"},"content":"                        }","lastModifiedDate":"2023-04-11"},{"lineNumber":161,"author":{"gitId":"ixxeden"},"content":"                        try { //validates the start dateTime should be before the end dateTime","lastModifiedDate":"2023-04-11"},{"lineNumber":162,"author":{"gitId":"ixxeden"},"content":"                            Util.validateEventDate(Util.convertDateTime(eventSplitAgain[0].trim()), Util.convertDateTime(eventSplitAgain[1].trim()));","lastModifiedDate":"2023-04-11"},{"lineNumber":163,"author":{"gitId":"ixxeden"},"content":"                        } catch (DukeException dateError) {","lastModifiedDate":"2023-04-11"},{"lineNumber":164,"author":{"gitId":"ixxeden"},"content":"                            System.out.println(dateError);","lastModifiedDate":"2023-04-11"},{"lineNumber":165,"author":{"gitId":"ixxeden"},"content":"                            continue;","lastModifiedDate":"2023-04-11"},{"lineNumber":166,"author":{"gitId":"ixxeden"},"content":"                        }","lastModifiedDate":"2023-04-11"},{"lineNumber":167,"author":{"gitId":"ixxeden"},"content":"                        Event ev \u003d new Event(eventSplit[0].trim(), Util.convertDateTime(eventSplitAgain[0].trim()), Util.convertDateTime(eventSplitAgain[1].trim()));","lastModifiedDate":"2023-04-10"},{"lineNumber":168,"author":{"gitId":"ixxeden"},"content":"                        list.addTask(ev);","lastModifiedDate":"2023-04-08"},{"lineNumber":169,"author":{"gitId":"ixxeden"},"content":"                    }","lastModifiedDate":"2023-04-08"},{"lineNumber":170,"author":{"gitId":"ixxeden"},"content":"                    else {","lastModifiedDate":"2023-04-11"},{"lineNumber":171,"author":{"gitId":"ixxeden"},"content":"                        System.out.println(\"Invalid date and time format. Please use the format: yyyy-MM-dd HH:mm\");","lastModifiedDate":"2023-04-11"},{"lineNumber":172,"author":{"gitId":"ixxeden"},"content":"                        continue;","lastModifiedDate":"2023-04-11"},{"lineNumber":173,"author":{"gitId":"ixxeden"},"content":"                    }","lastModifiedDate":"2023-04-11"},{"lineNumber":174,"author":{"gitId":"ixxeden"},"content":"                }","lastModifiedDate":"2023-04-11"},{"lineNumber":175,"author":{"gitId":"ixxeden"},"content":"                //catch for delete","lastModifiedDate":"2023-04-08"},{"lineNumber":176,"author":{"gitId":"ixxeden"},"content":"                else if (splitted[0].equalsIgnoreCase(\"delete\")) {","lastModifiedDate":"2023-04-08"},{"lineNumber":177,"author":{"gitId":"ixxeden"},"content":"                    list.deleteTask(Integer.parseInt(splitted[1]) - 1);","lastModifiedDate":"2023-04-08"},{"lineNumber":178,"author":{"gitId":"ixxeden"},"content":"                }","lastModifiedDate":"2023-04-10"},{"lineNumber":179,"author":{"gitId":"ixxeden"},"content":"                //catch for priority","lastModifiedDate":"2023-04-10"},{"lineNumber":180,"author":{"gitId":"ixxeden"},"content":"                else if (splitted[0].equalsIgnoreCase(\"priority\")) {","lastModifiedDate":"2023-04-10"},{"lineNumber":181,"author":{"gitId":"ixxeden"},"content":"                    String[] prioritySplit \u003d splitted[1].split(\" \");","lastModifiedDate":"2023-04-10"},{"lineNumber":182,"author":{"gitId":"ixxeden"},"content":"                    try { //validates index to change priority","lastModifiedDate":"2023-04-11"},{"lineNumber":183,"author":{"gitId":"ixxeden"},"content":"                        Parser.checkPriority(Integer.parseInt(prioritySplit[0]) - 1, list.getList());","lastModifiedDate":"2023-04-11"},{"lineNumber":184,"author":{"gitId":"ixxeden"},"content":"                    } catch (DukeException indexError) {","lastModifiedDate":"2023-04-11"},{"lineNumber":185,"author":{"gitId":"ixxeden"},"content":"                        System.out.println(indexError);","lastModifiedDate":"2023-04-11"},{"lineNumber":186,"author":{"gitId":"ixxeden"},"content":"                        continue;","lastModifiedDate":"2023-04-11"},{"lineNumber":187,"author":{"gitId":"ixxeden"},"content":"                    }","lastModifiedDate":"2023-04-11"},{"lineNumber":188,"author":{"gitId":"ixxeden"},"content":"                    list.setPriority(Integer.parseInt(prioritySplit[0]) - 1, Util.stringToLevel(prioritySplit[1]));","lastModifiedDate":"2023-04-10"},{"lineNumber":189,"author":{"gitId":"ixxeden"},"content":"                }","lastModifiedDate":"2023-04-10"},{"lineNumber":190,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-11"},{"lineNumber":191,"author":{"gitId":"ixxeden"},"content":"                //catch for find","lastModifiedDate":"2023-04-11"},{"lineNumber":192,"author":{"gitId":"ixxeden"},"content":"                else if (splitted[0].equalsIgnoreCase(\"find\")) {","lastModifiedDate":"2023-04-10"},{"lineNumber":193,"author":{"gitId":"ixxeden"},"content":"                    list.find(splitted[1]);","lastModifiedDate":"2023-04-10"},{"lineNumber":194,"author":{"gitId":"ixxeden"},"content":"                }","lastModifiedDate":"2023-04-10"},{"lineNumber":195,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-11"},{"lineNumber":196,"author":{"gitId":"ixxeden"},"content":"                else {","lastModifiedDate":"2023-04-10"},{"lineNumber":197,"author":{"gitId":"ixxeden"},"content":"                    System.out.println(\"Input not recognised\");","lastModifiedDate":"2023-04-11"},{"lineNumber":198,"author":{"gitId":"ixxeden"},"content":"                }","lastModifiedDate":"2023-04-08"},{"lineNumber":199,"author":{"gitId":"ixxeden"},"content":"            }","lastModifiedDate":"2023-04-08"},{"lineNumber":200,"author":{"gitId":"ixxeden"},"content":"            list.sortList(); //sorts the list of tasks according to the priority level","lastModifiedDate":"2023-04-11"},{"lineNumber":201,"author":{"gitId":"ixxeden"},"content":"            loader.saveToFile(list.getList()); //saves the list into data/saved.txt","lastModifiedDate":"2023-04-10"},{"lineNumber":202,"author":{"gitId":"ixxeden"},"content":"        }","lastModifiedDate":"2023-04-08"},{"lineNumber":203,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-04-08"},{"lineNumber":204,"author":{"gitId":"ixxeden"},"content":"}","lastModifiedDate":"2023-04-07"}],"authorContributionMap":{"ixxeden":204}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ixxeden"},"content":"package duke;","lastModifiedDate":"2023-04-07"},{"lineNumber":2,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":3,"author":{"gitId":"ixxeden"},"content":"import duke.Exception.DukeException;","lastModifiedDate":"2023-04-11"},{"lineNumber":4,"author":{"gitId":"ixxeden"},"content":"import duke.Ui.Ui;","lastModifiedDate":"2023-04-07"},{"lineNumber":5,"author":{"gitId":"ixxeden"},"content":"import duke.Command.Command;","lastModifiedDate":"2023-04-08"},{"lineNumber":6,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":7,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":8,"author":{"gitId":"ixxeden"},"content":"public class Duke {","lastModifiedDate":"2023-04-07"},{"lineNumber":9,"author":{"gitId":"ixxeden"},"content":"    private final Ui ui;","lastModifiedDate":"2023-04-08"},{"lineNumber":10,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":11,"author":{"gitId":"ixxeden"},"content":"    public Duke() {","lastModifiedDate":"2023-04-07"},{"lineNumber":12,"author":{"gitId":"ixxeden"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-04-07"},{"lineNumber":13,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-04-07"},{"lineNumber":14,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":15,"author":{"gitId":"ixxeden"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":16,"author":{"gitId":"ixxeden"},"content":"     * Calls the UI class to display welcome message","lastModifiedDate":"2023-04-14"},{"lineNumber":17,"author":{"gitId":"ixxeden"},"content":"     * Calls the execute() method in Command class to begin the program","lastModifiedDate":"2023-04-14"},{"lineNumber":18,"author":{"gitId":"ixxeden"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":19,"author":{"gitId":"ixxeden"},"content":"    public void run() throws DukeException {","lastModifiedDate":"2023-04-11"},{"lineNumber":20,"author":{"gitId":"ixxeden"},"content":"        ui.showWelcome();","lastModifiedDate":"2023-04-07"},{"lineNumber":21,"author":{"gitId":"ixxeden"},"content":"        Command.execute();","lastModifiedDate":"2023-04-08"},{"lineNumber":22,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-04-07"},{"lineNumber":23,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":24,"author":{"gitId":"ixxeden"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":25,"author":{"gitId":"ixxeden"},"content":"     * Calls the run() method","lastModifiedDate":"2023-04-14"},{"lineNumber":26,"author":{"gitId":"ixxeden"},"content":"     * @param args takes in array of arguments","lastModifiedDate":"2023-04-10"},{"lineNumber":27,"author":{"gitId":"ixxeden"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":28,"author":{"gitId":"ixxeden"},"content":"    public static void main(String[] args) throws DukeException {","lastModifiedDate":"2023-04-11"},{"lineNumber":29,"author":{"gitId":"ixxeden"},"content":"        new Duke().run();","lastModifiedDate":"2023-04-07"},{"lineNumber":30,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-04-07"},{"lineNumber":31,"author":{"gitId":"ixxeden"},"content":"}","lastModifiedDate":"2023-04-07"}],"authorContributionMap":{"ixxeden":31}},{"path":"src/main/java/duke/Exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ixxeden"},"content":"package duke.Exception;","lastModifiedDate":"2023-04-11"},{"lineNumber":2,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":3,"author":{"gitId":"ixxeden"},"content":"public class DukeException extends Exception","lastModifiedDate":"2023-04-02"},{"lineNumber":4,"author":{"gitId":"ixxeden"},"content":"{","lastModifiedDate":"2023-04-02"},{"lineNumber":5,"author":{"gitId":"ixxeden"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":6,"author":{"gitId":"ixxeden"},"content":"     * Specifying exception outputs","lastModifiedDate":"2023-04-14"},{"lineNumber":7,"author":{"gitId":"ixxeden"},"content":"     * @param errorQuestion takes in a string of error message defined in the Parser class validateQuestion() method","lastModifiedDate":"2023-04-10"},{"lineNumber":8,"author":{"gitId":"ixxeden"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":9,"author":{"gitId":"ixxeden"},"content":"    public DukeException(String errorQuestion) {","lastModifiedDate":"2023-04-11"},{"lineNumber":10,"author":{"gitId":"ixxeden"},"content":"        super(errorQuestion);","lastModifiedDate":"2023-03-21"},{"lineNumber":11,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":12,"author":{"gitId":"ixxeden"},"content":"}","lastModifiedDate":"2023-03-21"}],"authorContributionMap":{"ixxeden":12}},{"path":"src/main/java/duke/Parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ixxeden"},"content":"package duke.Parser;","lastModifiedDate":"2023-04-08"},{"lineNumber":2,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":3,"author":{"gitId":"ixxeden"},"content":"import duke.Exception.DukeException;","lastModifiedDate":"2023-04-11"},{"lineNumber":4,"author":{"gitId":"ixxeden"},"content":"import duke.TasksType.Task;","lastModifiedDate":"2023-04-11"},{"lineNumber":5,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-12"},{"lineNumber":6,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-12"},{"lineNumber":7,"author":{"gitId":"ixxeden"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-04-11"},{"lineNumber":8,"author":{"gitId":"ixxeden"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-04-11"},{"lineNumber":9,"author":{"gitId":"ixxeden"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-04-11"},{"lineNumber":10,"author":{"gitId":"ixxeden"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-04-07"},{"lineNumber":11,"author":{"gitId":"ixxeden"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2023-04-11"},{"lineNumber":12,"author":{"gitId":"ixxeden"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-04-11"},{"lineNumber":13,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":14,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":15,"author":{"gitId":"ixxeden"},"content":"public class Parser {","lastModifiedDate":"2023-04-07"},{"lineNumber":16,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-11"},{"lineNumber":17,"author":{"gitId":"ixxeden"},"content":"    private static final String DATE_TIME_FORMAT \u003d \"yyyy-MM-dd HH:mm\"; //for invalidDateTime()","lastModifiedDate":"2023-04-11"},{"lineNumber":18,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-11"},{"lineNumber":19,"author":{"gitId":"ixxeden"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":20,"author":{"gitId":"ixxeden"},"content":"     * Throws exceptions if input is invalid","lastModifiedDate":"2023-04-14"},{"lineNumber":21,"author":{"gitId":"ixxeden"},"content":"     * This method validated the input given by the user","lastModifiedDate":"2023-04-10"},{"lineNumber":22,"author":{"gitId":"ixxeden"},"content":"     * only the specified commands are allowed, exceptions will be thrown if anything word is parsed.","lastModifiedDate":"2023-04-11"},{"lineNumber":23,"author":{"gitId":"ixxeden"},"content":"     * Using regex, validates the event and deadline inputs are correct with the required information.","lastModifiedDate":"2023-04-11"},{"lineNumber":24,"author":{"gitId":"ixxeden"},"content":"     * Checks for missing priority level or index","lastModifiedDate":"2023-04-11"},{"lineNumber":25,"author":{"gitId":"ixxeden"},"content":"     * @param input takes in the string input that was given by user","lastModifiedDate":"2023-04-10"},{"lineNumber":26,"author":{"gitId":"ixxeden"},"content":"     * @param list takes in the ArrayList for checking the size of the list to valid indices","lastModifiedDate":"2023-04-10"},{"lineNumber":27,"author":{"gitId":"ixxeden"},"content":"     * @throws DukeException is displayed according to the type of error input","lastModifiedDate":"2023-04-10"},{"lineNumber":28,"author":{"gitId":"ixxeden"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":29,"author":{"gitId":"ixxeden"},"content":"    public static void validateQuestion(String input, ArrayList\u003cTask\u003e list) throws DukeException {","lastModifiedDate":"2023-04-11"},{"lineNumber":30,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":31,"author":{"gitId":"ixxeden"},"content":"        String[] splitted \u003d input.split(\" \", 2);","lastModifiedDate":"2023-04-07"},{"lineNumber":32,"author":{"gitId":"ixxeden"},"content":"        if (!splitted[0].equalsIgnoreCase(\"bye\") \u0026\u0026","lastModifiedDate":"2023-04-10"},{"lineNumber":33,"author":{"gitId":"ixxeden"},"content":"                !splitted[0].equalsIgnoreCase(\"todo\") \u0026\u0026","lastModifiedDate":"2023-04-10"},{"lineNumber":34,"author":{"gitId":"ixxeden"},"content":"                !splitted[0].equalsIgnoreCase(\"deadline\") \u0026\u0026","lastModifiedDate":"2023-04-10"},{"lineNumber":35,"author":{"gitId":"ixxeden"},"content":"                !splitted[0].equalsIgnoreCase(\"event\") \u0026\u0026","lastModifiedDate":"2023-04-10"},{"lineNumber":36,"author":{"gitId":"ixxeden"},"content":"                !splitted[0].equalsIgnoreCase(\"list\") \u0026\u0026","lastModifiedDate":"2023-04-10"},{"lineNumber":37,"author":{"gitId":"ixxeden"},"content":"                !splitted[0].equalsIgnoreCase(\"mark\") \u0026\u0026","lastModifiedDate":"2023-04-10"},{"lineNumber":38,"author":{"gitId":"ixxeden"},"content":"                !splitted[0].equalsIgnoreCase(\"unmark\") \u0026\u0026","lastModifiedDate":"2023-04-10"},{"lineNumber":39,"author":{"gitId":"ixxeden"},"content":"                !splitted[0].equalsIgnoreCase(\"delete\") \u0026\u0026","lastModifiedDate":"2023-04-10"},{"lineNumber":40,"author":{"gitId":"ixxeden"},"content":"                !splitted[0].equalsIgnoreCase(\"priority\") \u0026\u0026","lastModifiedDate":"2023-04-10"},{"lineNumber":41,"author":{"gitId":"ixxeden"},"content":"                !splitted[0].equalsIgnoreCase(\"find\") \u0026\u0026","lastModifiedDate":"2023-04-11"},{"lineNumber":42,"author":{"gitId":"ixxeden"},"content":"                !splitted[0].equalsIgnoreCase(\"help\")) {","lastModifiedDate":"2023-04-11"},{"lineNumber":43,"author":{"gitId":"ixxeden"},"content":"            throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\nType help to list out the commands\");","lastModifiedDate":"2023-04-11"},{"lineNumber":44,"author":{"gitId":"ixxeden"},"content":"        }","lastModifiedDate":"2023-04-07"},{"lineNumber":45,"author":{"gitId":"ixxeden"},"content":"        if (splitted.length \u003c 2 \u0026\u0026 !splitted[0].equalsIgnoreCase(\"list\")) {","lastModifiedDate":"2023-04-07"},{"lineNumber":46,"author":{"gitId":"ixxeden"},"content":"            throw new DukeException(\"☹ OOPS!!! The description/index of a \" + splitted[0] + \" cannot be empty.\");","lastModifiedDate":"2023-04-11"},{"lineNumber":47,"author":{"gitId":"ixxeden"},"content":"        }","lastModifiedDate":"2023-04-07"},{"lineNumber":48,"author":{"gitId":"ixxeden"},"content":"        if (splitted[0].equalsIgnoreCase(\"mark\") || splitted[0].equalsIgnoreCase(\"unmark\") || splitted[0].equalsIgnoreCase(\"delete\") ) {","lastModifiedDate":"2023-04-11"},{"lineNumber":49,"author":{"gitId":"ixxeden"},"content":"            if ( Integer.parseInt(splitted[1]) \u003e list.size() || Integer.parseInt(splitted[1]) \u003c\u003d 0) {","lastModifiedDate":"2023-04-12"},{"lineNumber":50,"author":{"gitId":"ixxeden"},"content":"                throw new DukeException(\"☹ OOPS!!! Index is not within the size of items in the list\");","lastModifiedDate":"2023-04-10"},{"lineNumber":51,"author":{"gitId":"ixxeden"},"content":"            }","lastModifiedDate":"2023-04-07"},{"lineNumber":52,"author":{"gitId":"ixxeden"},"content":"        }","lastModifiedDate":"2023-04-07"},{"lineNumber":53,"author":{"gitId":"ixxeden"},"content":"        if (input.toLowerCase().startsWith(\"event\")) { //checks if event input is valid","lastModifiedDate":"2023-04-11"},{"lineNumber":54,"author":{"gitId":"ixxeden"},"content":"            Pattern pattern \u003d Pattern.compile(\"^event\\\\s+(.+)\\\\s+/from\\\\s+(.+)\\\\s+/to\\\\s+(.+)$\", Pattern.CASE_INSENSITIVE);","lastModifiedDate":"2023-04-11"},{"lineNumber":55,"author":{"gitId":"ixxeden"},"content":"            Matcher matcher \u003d pattern.matcher(input);","lastModifiedDate":"2023-04-11"},{"lineNumber":56,"author":{"gitId":"ixxeden"},"content":"            if (matcher.find()) {","lastModifiedDate":"2023-04-11"},{"lineNumber":57,"author":{"gitId":"ixxeden"},"content":"                String description \u003d matcher.group(1).trim();","lastModifiedDate":"2023-04-11"},{"lineNumber":58,"author":{"gitId":"ixxeden"},"content":"                String from \u003d matcher.group(2).trim();","lastModifiedDate":"2023-04-11"},{"lineNumber":59,"author":{"gitId":"ixxeden"},"content":"                String to \u003d matcher.group(3).trim();","lastModifiedDate":"2023-04-11"},{"lineNumber":60,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-11"},{"lineNumber":61,"author":{"gitId":"ixxeden"},"content":"                if (description.isEmpty()) {","lastModifiedDate":"2023-04-11"},{"lineNumber":62,"author":{"gitId":"ixxeden"},"content":"                    throw new DukeException(\"Missing description for event\");","lastModifiedDate":"2023-04-11"},{"lineNumber":63,"author":{"gitId":"ixxeden"},"content":"                    //System.out.println(\"Missing description for event\");","lastModifiedDate":"2023-04-11"},{"lineNumber":64,"author":{"gitId":"ixxeden"},"content":"                } else {","lastModifiedDate":"2023-04-11"},{"lineNumber":65,"author":{"gitId":"ixxeden"},"content":"                    System.out.println(\"Description: \" + description);","lastModifiedDate":"2023-04-11"},{"lineNumber":66,"author":{"gitId":"ixxeden"},"content":"                    System.out.println(\"From: \" + from);","lastModifiedDate":"2023-04-11"},{"lineNumber":67,"author":{"gitId":"ixxeden"},"content":"                    System.out.println(\"To: \" + to);","lastModifiedDate":"2023-04-11"},{"lineNumber":68,"author":{"gitId":"ixxeden"},"content":"                }","lastModifiedDate":"2023-04-11"},{"lineNumber":69,"author":{"gitId":"ixxeden"},"content":"            } else {","lastModifiedDate":"2023-04-11"},{"lineNumber":70,"author":{"gitId":"ixxeden"},"content":"                throw new DukeException(\"Invalid input for event\");","lastModifiedDate":"2023-04-11"},{"lineNumber":71,"author":{"gitId":"ixxeden"},"content":"            }","lastModifiedDate":"2023-04-11"},{"lineNumber":72,"author":{"gitId":"ixxeden"},"content":"        }","lastModifiedDate":"2023-04-11"},{"lineNumber":73,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-11"},{"lineNumber":74,"author":{"gitId":"ixxeden"},"content":"        if (input.toLowerCase().startsWith(\"deadline\")) { //checks if deadline input is valid","lastModifiedDate":"2023-04-11"},{"lineNumber":75,"author":{"gitId":"ixxeden"},"content":"            if (!input.contains(\" /by \")) {","lastModifiedDate":"2023-04-11"},{"lineNumber":76,"author":{"gitId":"ixxeden"},"content":"                throw new DukeException(\"☹ OOPS!!! The event command is missing /by\");","lastModifiedDate":"2023-04-11"},{"lineNumber":77,"author":{"gitId":"ixxeden"},"content":"            }","lastModifiedDate":"2023-04-11"},{"lineNumber":78,"author":{"gitId":"ixxeden"},"content":"            Pattern pattern \u003d Pattern.compile(\"^deadline\\\\s+(.+)\\\\s+/by\\\\s+(.+)$\", Pattern.CASE_INSENSITIVE);","lastModifiedDate":"2023-04-11"},{"lineNumber":79,"author":{"gitId":"ixxeden"},"content":"            Matcher matcher \u003d pattern.matcher(input);","lastModifiedDate":"2023-04-11"},{"lineNumber":80,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-11"},{"lineNumber":81,"author":{"gitId":"ixxeden"},"content":"            if (matcher.find()) {","lastModifiedDate":"2023-04-11"},{"lineNumber":82,"author":{"gitId":"ixxeden"},"content":"                String description \u003d matcher.group(1).trim();","lastModifiedDate":"2023-04-11"},{"lineNumber":83,"author":{"gitId":"ixxeden"},"content":"                String by \u003d matcher.group(2).trim();","lastModifiedDate":"2023-04-11"},{"lineNumber":84,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-11"},{"lineNumber":85,"author":{"gitId":"ixxeden"},"content":"                if (description.isEmpty()) {","lastModifiedDate":"2023-04-11"},{"lineNumber":86,"author":{"gitId":"ixxeden"},"content":"                    System.out.println(\"Missing description for deadline\");","lastModifiedDate":"2023-04-11"},{"lineNumber":87,"author":{"gitId":"ixxeden"},"content":"                } else {","lastModifiedDate":"2023-04-11"},{"lineNumber":88,"author":{"gitId":"ixxeden"},"content":"                    System.out.println(\"Description: \" + description);","lastModifiedDate":"2023-04-11"},{"lineNumber":89,"author":{"gitId":"ixxeden"},"content":"                    System.out.println(\"By: \" + by);","lastModifiedDate":"2023-04-11"},{"lineNumber":90,"author":{"gitId":"ixxeden"},"content":"                }","lastModifiedDate":"2023-04-11"},{"lineNumber":91,"author":{"gitId":"ixxeden"},"content":"            } else {","lastModifiedDate":"2023-04-11"},{"lineNumber":92,"author":{"gitId":"ixxeden"},"content":"                throw new DukeException(\"Invalid input for deadline\");","lastModifiedDate":"2023-04-11"},{"lineNumber":93,"author":{"gitId":"ixxeden"},"content":"            }","lastModifiedDate":"2023-04-11"},{"lineNumber":94,"author":{"gitId":"ixxeden"},"content":"        }","lastModifiedDate":"2023-04-11"},{"lineNumber":95,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-11"},{"lineNumber":96,"author":{"gitId":"ixxeden"},"content":"        String[] splitCommand \u003d input.split(\" \", 2); // starts checking if priority input is valid","lastModifiedDate":"2023-04-11"},{"lineNumber":97,"author":{"gitId":"ixxeden"},"content":"        String command \u003d splitCommand[0];","lastModifiedDate":"2023-04-11"},{"lineNumber":98,"author":{"gitId":"ixxeden"},"content":"        if (command.equals(\"priority\")) {","lastModifiedDate":"2023-04-11"},{"lineNumber":99,"author":{"gitId":"ixxeden"},"content":"            if (splitCommand.length \u003c 2) {","lastModifiedDate":"2023-04-11"},{"lineNumber":100,"author":{"gitId":"ixxeden"},"content":"                throw new DukeException(\"Please provide both an index and a priority level (high/medium/low).\");","lastModifiedDate":"2023-04-11"},{"lineNumber":101,"author":{"gitId":"ixxeden"},"content":"            }","lastModifiedDate":"2023-04-11"},{"lineNumber":102,"author":{"gitId":"ixxeden"},"content":"            try {","lastModifiedDate":"2023-04-11"},{"lineNumber":103,"author":{"gitId":"ixxeden"},"content":"                String[] priorityArgs \u003d splitCommand[1].trim().split(\" \");","lastModifiedDate":"2023-04-11"},{"lineNumber":104,"author":{"gitId":"ixxeden"},"content":"                if (priorityArgs.length !\u003d 2) {","lastModifiedDate":"2023-04-11"},{"lineNumber":105,"author":{"gitId":"ixxeden"},"content":"                    throw new DukeException(\"Please provide both an index and a priority level (high/medium/low).\");","lastModifiedDate":"2023-04-11"},{"lineNumber":106,"author":{"gitId":"ixxeden"},"content":"                }","lastModifiedDate":"2023-04-11"},{"lineNumber":107,"author":{"gitId":"ixxeden"},"content":"                switch (priorityArgs[1].toLowerCase()) {","lastModifiedDate":"2023-04-11"},{"lineNumber":108,"author":{"gitId":"ixxeden"},"content":"                    case \"high\":","lastModifiedDate":"2023-04-11"},{"lineNumber":109,"author":{"gitId":"ixxeden"},"content":"                        break;","lastModifiedDate":"2023-04-11"},{"lineNumber":110,"author":{"gitId":"ixxeden"},"content":"                    case \"medium\":","lastModifiedDate":"2023-04-11"},{"lineNumber":111,"author":{"gitId":"ixxeden"},"content":"                        break;","lastModifiedDate":"2023-04-11"},{"lineNumber":112,"author":{"gitId":"ixxeden"},"content":"                    case \"low\":","lastModifiedDate":"2023-04-11"},{"lineNumber":113,"author":{"gitId":"ixxeden"},"content":"                        break;","lastModifiedDate":"2023-04-11"},{"lineNumber":114,"author":{"gitId":"ixxeden"},"content":"                    default:","lastModifiedDate":"2023-04-11"},{"lineNumber":115,"author":{"gitId":"ixxeden"},"content":"                        throw new DukeException(\"Invalid priority level. Please provide a valid priority level (high/medium/low).\");","lastModifiedDate":"2023-04-11"},{"lineNumber":116,"author":{"gitId":"ixxeden"},"content":"                }","lastModifiedDate":"2023-04-11"},{"lineNumber":117,"author":{"gitId":"ixxeden"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2023-04-11"},{"lineNumber":118,"author":{"gitId":"ixxeden"},"content":"                throw new DukeException(\"Invalid index format. Please provide a valid index.\");","lastModifiedDate":"2023-04-11"},{"lineNumber":119,"author":{"gitId":"ixxeden"},"content":"            } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-04-11"},{"lineNumber":120,"author":{"gitId":"ixxeden"},"content":"                throw new DukeException(\"Invalid input. Please provide an index and a priority level (high/medium/low).\");","lastModifiedDate":"2023-04-11"},{"lineNumber":121,"author":{"gitId":"ixxeden"},"content":"            }","lastModifiedDate":"2023-04-11"},{"lineNumber":122,"author":{"gitId":"ixxeden"},"content":"        }","lastModifiedDate":"2023-04-11"},{"lineNumber":123,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-04-11"},{"lineNumber":124,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-11"},{"lineNumber":125,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-11"},{"lineNumber":126,"author":{"gitId":"ixxeden"},"content":"    /**","lastModifiedDate":"2023-04-11"},{"lineNumber":127,"author":{"gitId":"ixxeden"},"content":"     * Validates index is within list size","lastModifiedDate":"2023-04-14"},{"lineNumber":128,"author":{"gitId":"ixxeden"},"content":"     * This method checks if the index for priority change is within the list size","lastModifiedDate":"2023-04-11"},{"lineNumber":129,"author":{"gitId":"ixxeden"},"content":"     * @param index takes in an integer of the index input by user","lastModifiedDate":"2023-04-11"},{"lineNumber":130,"author":{"gitId":"ixxeden"},"content":"     * @param list takes in the list of task","lastModifiedDate":"2023-04-11"},{"lineNumber":131,"author":{"gitId":"ixxeden"},"content":"     * @throws DukeException if the index is out of bound","lastModifiedDate":"2023-04-11"},{"lineNumber":132,"author":{"gitId":"ixxeden"},"content":"     */","lastModifiedDate":"2023-04-11"},{"lineNumber":133,"author":{"gitId":"ixxeden"},"content":"    public static void checkPriority(int index,  ArrayList\u003cTask\u003e list) throws DukeException {","lastModifiedDate":"2023-04-11"},{"lineNumber":134,"author":{"gitId":"ixxeden"},"content":"        if (index \u003c 0 || index \u003e\u003d list.size()) {","lastModifiedDate":"2023-04-11"},{"lineNumber":135,"author":{"gitId":"ixxeden"},"content":"            throw new DukeException(\"Index is out of bounds. Please enter a valid index.\");","lastModifiedDate":"2023-04-11"},{"lineNumber":136,"author":{"gitId":"ixxeden"},"content":"        }","lastModifiedDate":"2023-04-11"},{"lineNumber":137,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-04-11"},{"lineNumber":138,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-11"},{"lineNumber":139,"author":{"gitId":"ixxeden"},"content":"    /**","lastModifiedDate":"2023-04-11"},{"lineNumber":140,"author":{"gitId":"ixxeden"},"content":"     * Returns a boolean on whether the DateTime format is valid","lastModifiedDate":"2023-04-14"},{"lineNumber":141,"author":{"gitId":"ixxeden"},"content":"     * Ensures that the dateTime format input by user is correct","lastModifiedDate":"2023-04-14"},{"lineNumber":142,"author":{"gitId":"ixxeden"},"content":"     * @param input takes in the string input of dateTime","lastModifiedDate":"2023-04-11"},{"lineNumber":143,"author":{"gitId":"ixxeden"},"content":"     * @return false if dateTime format is different from requirement","lastModifiedDate":"2023-04-11"},{"lineNumber":144,"author":{"gitId":"ixxeden"},"content":"     */","lastModifiedDate":"2023-04-11"},{"lineNumber":145,"author":{"gitId":"ixxeden"},"content":"    public static boolean isValidDateTime(String input) {","lastModifiedDate":"2023-04-11"},{"lineNumber":146,"author":{"gitId":"ixxeden"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(DATE_TIME_FORMAT);","lastModifiedDate":"2023-04-11"},{"lineNumber":147,"author":{"gitId":"ixxeden"},"content":"        try {","lastModifiedDate":"2023-04-11"},{"lineNumber":148,"author":{"gitId":"ixxeden"},"content":"            LocalDateTime.parse(input, formatter);","lastModifiedDate":"2023-04-11"},{"lineNumber":149,"author":{"gitId":"ixxeden"},"content":"            return true;","lastModifiedDate":"2023-04-07"},{"lineNumber":150,"author":{"gitId":"ixxeden"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-04-11"},{"lineNumber":151,"author":{"gitId":"ixxeden"},"content":"            return false;","lastModifiedDate":"2023-04-11"},{"lineNumber":152,"author":{"gitId":"ixxeden"},"content":"        }","lastModifiedDate":"2023-04-11"},{"lineNumber":153,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-04-07"},{"lineNumber":154,"author":{"gitId":"ixxeden"},"content":"}","lastModifiedDate":"2023-04-07"}],"authorContributionMap":{"ixxeden":154}},{"path":"src/main/java/duke/Storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ixxeden"},"content":"package duke.Storage;","lastModifiedDate":"2023-04-08"},{"lineNumber":2,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":3,"author":{"gitId":"ixxeden"},"content":"import duke.Command.Command;","lastModifiedDate":"2023-04-08"},{"lineNumber":4,"author":{"gitId":"ixxeden"},"content":"import java.io.*;","lastModifiedDate":"2023-04-07"},{"lineNumber":5,"author":{"gitId":"ixxeden"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-04-07"},{"lineNumber":6,"author":{"gitId":"ixxeden"},"content":"import java.io.IOException;","lastModifiedDate":"2023-04-07"},{"lineNumber":7,"author":{"gitId":"ixxeden"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-04-11"},{"lineNumber":8,"author":{"gitId":"ixxeden"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-04-12"},{"lineNumber":9,"author":{"gitId":"ixxeden"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-04-11"},{"lineNumber":10,"author":{"gitId":"ixxeden"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-04-07"},{"lineNumber":11,"author":{"gitId":"ixxeden"},"content":"import duke.Exception.DukeException;","lastModifiedDate":"2023-04-11"},{"lineNumber":12,"author":{"gitId":"ixxeden"},"content":"import duke.TasksType.Deadline;","lastModifiedDate":"2023-04-08"},{"lineNumber":13,"author":{"gitId":"ixxeden"},"content":"import duke.TasksType.Event;","lastModifiedDate":"2023-04-08"},{"lineNumber":14,"author":{"gitId":"ixxeden"},"content":"import duke.TasksType.Task;","lastModifiedDate":"2023-04-08"},{"lineNumber":15,"author":{"gitId":"ixxeden"},"content":"import duke.TasksType.Todo;","lastModifiedDate":"2023-04-08"},{"lineNumber":16,"author":{"gitId":"ixxeden"},"content":"import duke.Utility.Util;","lastModifiedDate":"2023-04-10"},{"lineNumber":17,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":18,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":19,"author":{"gitId":"ixxeden"},"content":"public class Storage {","lastModifiedDate":"2023-04-07"},{"lineNumber":20,"author":{"gitId":"ixxeden"},"content":"    private static final String DIRECTORY_PATH \u003d \"data\";","lastModifiedDate":"2023-04-12"},{"lineNumber":21,"author":{"gitId":"ixxeden"},"content":"    private static final String FILE_PATH \u003d \"data/saved.txt\";","lastModifiedDate":"2023-04-07"},{"lineNumber":22,"author":{"gitId":"ixxeden"},"content":"    //path to save and load the list, final as it should not be changed","lastModifiedDate":"2023-04-10"},{"lineNumber":23,"author":{"gitId":"ixxeden"},"content":"    //absolute path for Jar \"C:/Users/ixxed/IdeaProjects/duke/data/saved.txt\"","lastModifiedDate":"2023-04-11"},{"lineNumber":24,"author":{"gitId":"ixxeden"},"content":"    /***","lastModifiedDate":"2023-04-10"},{"lineNumber":25,"author":{"gitId":"ixxeden"},"content":"     * This method is called by execute() to try to load a file,","lastModifiedDate":"2023-04-10"},{"lineNumber":26,"author":{"gitId":"ixxeden"},"content":"     * if file is found, call executeLoad() to load in the text lines into an ArrayList of different tasks","lastModifiedDate":"2023-04-10"},{"lineNumber":27,"author":{"gitId":"ixxeden"},"content":"     * if the file is not found, create a new file using the path","lastModifiedDate":"2023-04-10"},{"lineNumber":28,"author":{"gitId":"ixxeden"},"content":"     * @return an ArrayList of Tasks","lastModifiedDate":"2023-04-10"},{"lineNumber":29,"author":{"gitId":"ixxeden"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":30,"author":{"gitId":"ixxeden"},"content":"    public static ArrayList\u003cTask\u003e loadFile() throws DukeException {","lastModifiedDate":"2023-04-11"},{"lineNumber":31,"author":{"gitId":"ixxeden"},"content":"        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-04-08"},{"lineNumber":32,"author":{"gitId":"ixxeden"},"content":"        try {","lastModifiedDate":"2023-04-07"},{"lineNumber":33,"author":{"gitId":"ixxeden"},"content":"            Path path \u003d Paths.get(DIRECTORY_PATH);","lastModifiedDate":"2023-04-12"},{"lineNumber":34,"author":{"gitId":"ixxeden"},"content":"            if (!Files.exists(path)) {","lastModifiedDate":"2023-04-12"},{"lineNumber":35,"author":{"gitId":"ixxeden"},"content":"                Files.createDirectories(path);","lastModifiedDate":"2023-04-12"},{"lineNumber":36,"author":{"gitId":"ixxeden"},"content":"            } ","lastModifiedDate":"2023-04-12"},{"lineNumber":37,"author":{"gitId":"ixxeden"},"content":"            if (!Files.exists(Paths.get(FILE_PATH))) {","lastModifiedDate":"2023-04-11"},{"lineNumber":38,"author":{"gitId":"ixxeden"},"content":"                throw new DukeException(\"File not found. A new file will be created.\");","lastModifiedDate":"2023-04-11"},{"lineNumber":39,"author":{"gitId":"ixxeden"},"content":"            }","lastModifiedDate":"2023-04-07"},{"lineNumber":40,"author":{"gitId":"ixxeden"},"content":"            FileReader fr \u003d new FileReader(FILE_PATH);","lastModifiedDate":"2023-04-11"},{"lineNumber":41,"author":{"gitId":"ixxeden"},"content":"            BufferedReader br \u003d new BufferedReader(fr);","lastModifiedDate":"2023-04-11"},{"lineNumber":42,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-11"},{"lineNumber":43,"author":{"gitId":"ixxeden"},"content":"            String line;","lastModifiedDate":"2023-04-11"},{"lineNumber":44,"author":{"gitId":"ixxeden"},"content":"            while ((line \u003d br.readLine()) !\u003d null) {","lastModifiedDate":"2023-04-11"},{"lineNumber":45,"author":{"gitId":"ixxeden"},"content":"                Task t \u003d Command.executeLoad(line);","lastModifiedDate":"2023-04-11"},{"lineNumber":46,"author":{"gitId":"ixxeden"},"content":"                list.add(t);","lastModifiedDate":"2023-04-11"},{"lineNumber":47,"author":{"gitId":"ixxeden"},"content":"            }","lastModifiedDate":"2023-04-07"},{"lineNumber":48,"author":{"gitId":"ixxeden"},"content":"            br.close();","lastModifiedDate":"2023-04-11"},{"lineNumber":49,"author":{"gitId":"ixxeden"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-04-07"},{"lineNumber":50,"author":{"gitId":"ixxeden"},"content":"            throw new DukeException(\"Error while loading file: \" + e.getMessage());","lastModifiedDate":"2023-04-11"},{"lineNumber":51,"author":{"gitId":"ixxeden"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-04-11"},{"lineNumber":52,"author":{"gitId":"ixxeden"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-04-11"},{"lineNumber":53,"author":{"gitId":"ixxeden"},"content":"        }","lastModifiedDate":"2023-04-07"},{"lineNumber":54,"author":{"gitId":"ixxeden"},"content":"        return list;","lastModifiedDate":"2023-04-07"},{"lineNumber":55,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-04-07"},{"lineNumber":56,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":57,"author":{"gitId":"ixxeden"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":58,"author":{"gitId":"ixxeden"},"content":"     * This method is called after every while loop in the Command class.","lastModifiedDate":"2023-04-10"},{"lineNumber":59,"author":{"gitId":"ixxeden"},"content":"     * To save the file each time a change is made to the list","lastModifiedDate":"2023-04-10"},{"lineNumber":60,"author":{"gitId":"ixxeden"},"content":"     * every item is saved in according to format for easier loading in subsequent runs","lastModifiedDate":"2023-04-10"},{"lineNumber":61,"author":{"gitId":"ixxeden"},"content":"     * * loop through the ArrayList and check each item\u0027s instanceOf to know which task it is","lastModifiedDate":"2023-04-10"},{"lineNumber":62,"author":{"gitId":"ixxeden"},"content":"     * and save accordingly","lastModifiedDate":"2023-04-10"},{"lineNumber":63,"author":{"gitId":"ixxeden"},"content":"     * @param list takes in an ArrayList of task","lastModifiedDate":"2023-04-10"},{"lineNumber":64,"author":{"gitId":"ixxeden"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":65,"author":{"gitId":"ixxeden"},"content":"    public static void saveToFile(ArrayList\u003cTask\u003e list) {","lastModifiedDate":"2023-04-08"},{"lineNumber":66,"author":{"gitId":"ixxeden"},"content":"        try {","lastModifiedDate":"2023-04-07"},{"lineNumber":67,"author":{"gitId":"ixxeden"},"content":"            FileWriter writer \u003d new FileWriter(FILE_PATH);","lastModifiedDate":"2023-04-07"},{"lineNumber":68,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":69,"author":{"gitId":"ixxeden"},"content":"            for (Task line : list) {","lastModifiedDate":"2023-04-08"},{"lineNumber":70,"author":{"gitId":"ixxeden"},"content":"                String item \u003d new String();","lastModifiedDate":"2023-04-08"},{"lineNumber":71,"author":{"gitId":"ixxeden"},"content":"                item +\u003d line.toString().substring(0, 7);","lastModifiedDate":"2023-04-08"},{"lineNumber":72,"author":{"gitId":"ixxeden"},"content":"                if (line instanceof Todo) {","lastModifiedDate":"2023-04-08"},{"lineNumber":73,"author":{"gitId":"ixxeden"},"content":"                    item +\u003d line.toString().substring(7);","lastModifiedDate":"2023-04-08"},{"lineNumber":74,"author":{"gitId":"ixxeden"},"content":"                }","lastModifiedDate":"2023-04-08"},{"lineNumber":75,"author":{"gitId":"ixxeden"},"content":"                else if (line instanceof Deadline) {","lastModifiedDate":"2023-04-08"},{"lineNumber":76,"author":{"gitId":"ixxeden"},"content":"                    item +\u003d line.getDescription() + \" /by \" + Util.dateTimeToString(((Deadline) line).getBy()) + \" [Priority \" + line.getPriorityLevel() + \"]\";","lastModifiedDate":"2023-04-10"},{"lineNumber":77,"author":{"gitId":"ixxeden"},"content":"                }","lastModifiedDate":"2023-04-08"},{"lineNumber":78,"author":{"gitId":"ixxeden"},"content":"                else {","lastModifiedDate":"2023-04-08"},{"lineNumber":79,"author":{"gitId":"ixxeden"},"content":"                    item +\u003d line.getDescription() + \" /from \" + Util.dateTimeToString(((Event) line).getFrom())+ \" /to \" + Util.dateTimeToString(((Event) line).getTo()) + \" [Priority \" + line.getPriorityLevel() + \"]\";","lastModifiedDate":"2023-04-10"},{"lineNumber":80,"author":{"gitId":"ixxeden"},"content":"                }","lastModifiedDate":"2023-04-08"},{"lineNumber":81,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":82,"author":{"gitId":"ixxeden"},"content":"                writer.write(item + \"\\n\");","lastModifiedDate":"2023-04-08"},{"lineNumber":83,"author":{"gitId":"ixxeden"},"content":"            }","lastModifiedDate":"2023-04-07"},{"lineNumber":84,"author":{"gitId":"ixxeden"},"content":"            writer.close();","lastModifiedDate":"2023-04-07"},{"lineNumber":85,"author":{"gitId":"ixxeden"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-04-07"},{"lineNumber":86,"author":{"gitId":"ixxeden"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-04-07"},{"lineNumber":87,"author":{"gitId":"ixxeden"},"content":"        }","lastModifiedDate":"2023-04-07"},{"lineNumber":88,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-04-07"},{"lineNumber":89,"author":{"gitId":"ixxeden"},"content":"}","lastModifiedDate":"2023-04-07"}],"authorContributionMap":{"ixxeden":89}},{"path":"src/main/java/duke/TaskList/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ixxeden"},"content":"package duke.TaskList;","lastModifiedDate":"2023-04-08"},{"lineNumber":2,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":3,"author":{"gitId":"ixxeden"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-04-07"},{"lineNumber":4,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-11"},{"lineNumber":5,"author":{"gitId":"ixxeden"},"content":"import duke.TasksType.Task;","lastModifiedDate":"2023-04-08"},{"lineNumber":6,"author":{"gitId":"ixxeden"},"content":"import duke.Ui.Ui;","lastModifiedDate":"2023-04-07"},{"lineNumber":7,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":8,"author":{"gitId":"ixxeden"},"content":"public class TaskList {","lastModifiedDate":"2023-04-07"},{"lineNumber":9,"author":{"gitId":"ixxeden"},"content":"    private ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-04-10"},{"lineNumber":10,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":11,"author":{"gitId":"ixxeden"},"content":"    public TaskList() {","lastModifiedDate":"2023-04-07"},{"lineNumber":12,"author":{"gitId":"ixxeden"},"content":"        //empty constructor","lastModifiedDate":"2023-04-10"},{"lineNumber":13,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-04-10"},{"lineNumber":14,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":15,"author":{"gitId":"ixxeden"},"content":"    /**","lastModifiedDate":"2023-04-07"},{"lineNumber":16,"author":{"gitId":"ixxeden"},"content":"     * Stores an ArrayList of Tasks into another list","lastModifiedDate":"2023-04-14"},{"lineNumber":17,"author":{"gitId":"ixxeden"},"content":"     * @param list takes in an ArrayList of Tasks","lastModifiedDate":"2023-04-10"},{"lineNumber":18,"author":{"gitId":"ixxeden"},"content":"     */","lastModifiedDate":"2023-04-07"},{"lineNumber":19,"author":{"gitId":"ixxeden"},"content":"    public void storeList(ArrayList\u003cTask\u003e list) {","lastModifiedDate":"2023-04-08"},{"lineNumber":20,"author":{"gitId":"ixxeden"},"content":"        this.list \u003d list;","lastModifiedDate":"2023-04-08"},{"lineNumber":21,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-04-08"},{"lineNumber":22,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":23,"author":{"gitId":"ixxeden"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":24,"author":{"gitId":"ixxeden"},"content":"     * Adds a task into the ArrayList in accordance to the task type","lastModifiedDate":"2023-04-14"},{"lineNumber":25,"author":{"gitId":"ixxeden"},"content":"     * asserts that the ArrayList should not be empty or no elements inside after a Task is added","lastModifiedDate":"2023-04-10"},{"lineNumber":26,"author":{"gitId":"ixxeden"},"content":"     * @param task takes in a Task input and add into the ArrayList","lastModifiedDate":"2023-04-10"},{"lineNumber":27,"author":{"gitId":"ixxeden"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":28,"author":{"gitId":"ixxeden"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2023-04-07"},{"lineNumber":29,"author":{"gitId":"ixxeden"},"content":"        list.add(task);","lastModifiedDate":"2023-04-07"},{"lineNumber":30,"author":{"gitId":"ixxeden"},"content":"        assert list.size() \u003e 0 : \"ArrayList should have task inside\";","lastModifiedDate":"2023-04-10"},{"lineNumber":31,"author":{"gitId":"ixxeden"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-04-07"},{"lineNumber":32,"author":{"gitId":"ixxeden"},"content":"        System.out.println(task);","lastModifiedDate":"2023-04-08"},{"lineNumber":33,"author":{"gitId":"ixxeden"},"content":"        System.out.println(\"Now you have \" + list.size() + \" task(s) in your list.\");","lastModifiedDate":"2023-04-11"},{"lineNumber":34,"author":{"gitId":"ixxeden"},"content":"        Ui.showLine();","lastModifiedDate":"2023-04-11"},{"lineNumber":35,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-04-07"},{"lineNumber":36,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":37,"author":{"gitId":"ixxeden"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":38,"author":{"gitId":"ixxeden"},"content":"     * Deletes a specific task indicated by the user when a task is no longer useful or relevant","lastModifiedDate":"2023-04-14"},{"lineNumber":39,"author":{"gitId":"ixxeden"},"content":"     * @param IndexToDelete takes in an integer input and remove the task in the ArrayList according to the index","lastModifiedDate":"2023-04-10"},{"lineNumber":40,"author":{"gitId":"ixxeden"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":41,"author":{"gitId":"ixxeden"},"content":"    public void deleteTask(int IndexToDelete) {","lastModifiedDate":"2023-04-07"},{"lineNumber":42,"author":{"gitId":"ixxeden"},"content":"        Task toDelete \u003d getTask(IndexToDelete);","lastModifiedDate":"2023-04-07"},{"lineNumber":43,"author":{"gitId":"ixxeden"},"content":"        list.remove(IndexToDelete);","lastModifiedDate":"2023-04-07"},{"lineNumber":44,"author":{"gitId":"ixxeden"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2023-04-07"},{"lineNumber":45,"author":{"gitId":"ixxeden"},"content":"        System.out.println(toDelete);","lastModifiedDate":"2023-04-07"},{"lineNumber":46,"author":{"gitId":"ixxeden"},"content":"        Ui.showLine();","lastModifiedDate":"2023-04-11"},{"lineNumber":47,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-04-07"},{"lineNumber":48,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":49,"author":{"gitId":"ixxeden"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":50,"author":{"gitId":"ixxeden"},"content":"     * Returns a Task fron the ArrayList","lastModifiedDate":"2023-04-14"},{"lineNumber":51,"author":{"gitId":"ixxeden"},"content":"     * This method is called to retrieve a particular task with a given index","lastModifiedDate":"2023-04-10"},{"lineNumber":52,"author":{"gitId":"ixxeden"},"content":"     * @param index takes in an integer input to locate the element in the ArrayList","lastModifiedDate":"2023-04-10"},{"lineNumber":53,"author":{"gitId":"ixxeden"},"content":"     * @return Task","lastModifiedDate":"2023-04-14"},{"lineNumber":54,"author":{"gitId":"ixxeden"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":55,"author":{"gitId":"ixxeden"},"content":"    public Task getTask(int index) {","lastModifiedDate":"2023-04-07"},{"lineNumber":56,"author":{"gitId":"ixxeden"},"content":"        return list.get(index);","lastModifiedDate":"2023-04-07"},{"lineNumber":57,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-04-07"},{"lineNumber":58,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":59,"author":{"gitId":"ixxeden"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":60,"author":{"gitId":"ixxeden"},"content":"     * Returns an ArrayList of tasks","lastModifiedDate":"2023-04-14"},{"lineNumber":61,"author":{"gitId":"ixxeden"},"content":"     * This method is called to simply retrieve the entire list of tasks","lastModifiedDate":"2023-04-10"},{"lineNumber":62,"author":{"gitId":"ixxeden"},"content":"     * @return ArrayList","lastModifiedDate":"2023-04-14"},{"lineNumber":63,"author":{"gitId":"ixxeden"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":64,"author":{"gitId":"ixxeden"},"content":"    public ArrayList\u003cTask\u003e getList() {","lastModifiedDate":"2023-04-11"},{"lineNumber":65,"author":{"gitId":"ixxeden"},"content":"        return list;","lastModifiedDate":"2023-04-08"},{"lineNumber":66,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-04-08"},{"lineNumber":67,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":68,"author":{"gitId":"ixxeden"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":69,"author":{"gitId":"ixxeden"},"content":"     * Displays all the items in the ArrayList","lastModifiedDate":"2023-04-14"},{"lineNumber":70,"author":{"gitId":"ixxeden"},"content":"     * called toString() methods of every different task type","lastModifiedDate":"2023-04-10"},{"lineNumber":71,"author":{"gitId":"ixxeden"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":72,"author":{"gitId":"ixxeden"},"content":"    public void listTask() {","lastModifiedDate":"2023-04-07"},{"lineNumber":73,"author":{"gitId":"ixxeden"},"content":"        Ui.showLine();","lastModifiedDate":"2023-04-07"},{"lineNumber":74,"author":{"gitId":"ixxeden"},"content":"        System.out.println(\"Sorted from High to Low priority...\");","lastModifiedDate":"2023-04-10"},{"lineNumber":75,"author":{"gitId":"ixxeden"},"content":"        System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2023-04-07"},{"lineNumber":76,"author":{"gitId":"ixxeden"},"content":"        for (int i \u003d 0; i \u003c list.size(); i++) {","lastModifiedDate":"2023-04-07"},{"lineNumber":77,"author":{"gitId":"ixxeden"},"content":"            System.out.println(i + 1 + \". \" + list.get(i).toString());","lastModifiedDate":"2023-04-07"},{"lineNumber":78,"author":{"gitId":"ixxeden"},"content":"        }","lastModifiedDate":"2023-04-07"},{"lineNumber":79,"author":{"gitId":"ixxeden"},"content":"        Ui.showLine();","lastModifiedDate":"2023-04-07"},{"lineNumber":80,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-04-07"},{"lineNumber":81,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":82,"author":{"gitId":"ixxeden"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":83,"author":{"gitId":"ixxeden"},"content":"     * Changes priorityLevel of a specific task with the given index","lastModifiedDate":"2023-04-14"},{"lineNumber":84,"author":{"gitId":"ixxeden"},"content":"     * @param index takes in an integer given by user to indicate the specific task","lastModifiedDate":"2023-04-10"},{"lineNumber":85,"author":{"gitId":"ixxeden"},"content":"     * @param p takes in a priorityLevel to indicate the level that the user wants to change to","lastModifiedDate":"2023-04-10"},{"lineNumber":86,"author":{"gitId":"ixxeden"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":87,"author":{"gitId":"ixxeden"},"content":"    public void setPriority(int index, Task.priorityLevel p) {","lastModifiedDate":"2023-04-10"},{"lineNumber":88,"author":{"gitId":"ixxeden"},"content":"        getTask(index).changePriority(p);","lastModifiedDate":"2023-04-10"},{"lineNumber":89,"author":{"gitId":"ixxeden"},"content":"        System.out.println(\"Noted, item \" + (index + 1) + \" (\" + getTask(index).getDescription() + \") priority has been set to \" + p);","lastModifiedDate":"2023-04-10"},{"lineNumber":90,"author":{"gitId":"ixxeden"},"content":"        System.out.println(index + 1 + \". \" + list.get(index).toString());","lastModifiedDate":"2023-04-11"},{"lineNumber":91,"author":{"gitId":"ixxeden"},"content":"        Ui.showLine();","lastModifiedDate":"2023-04-11"},{"lineNumber":92,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-11"},{"lineNumber":93,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-04-10"},{"lineNumber":94,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":95,"author":{"gitId":"ixxeden"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":96,"author":{"gitId":"ixxeden"},"content":"     * Sorts the list according the priorityLevel","lastModifiedDate":"2023-04-14"},{"lineNumber":97,"author":{"gitId":"ixxeden"},"content":"     * Elements with High will be at the front of the Arraylist while Low will be at the back","lastModifiedDate":"2023-04-10"},{"lineNumber":98,"author":{"gitId":"ixxeden"},"content":"     * Since there are only 3 levels, the sorting is done by splitting into three different ArrayList and combining them again","lastModifiedDate":"2023-04-10"},{"lineNumber":99,"author":{"gitId":"ixxeden"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":100,"author":{"gitId":"ixxeden"},"content":"    public void sortList() {","lastModifiedDate":"2023-04-10"},{"lineNumber":101,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":102,"author":{"gitId":"ixxeden"},"content":"        ArrayList\u003cTask\u003e sortedList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-04-10"},{"lineNumber":103,"author":{"gitId":"ixxeden"},"content":"        ArrayList\u003cTask\u003e high \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-04-10"},{"lineNumber":104,"author":{"gitId":"ixxeden"},"content":"        ArrayList\u003cTask\u003e low \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-04-10"},{"lineNumber":105,"author":{"gitId":"ixxeden"},"content":"        ArrayList\u003cTask\u003e medium \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-04-10"},{"lineNumber":106,"author":{"gitId":"ixxeden"},"content":"        for (Task t: list) {","lastModifiedDate":"2023-04-10"},{"lineNumber":107,"author":{"gitId":"ixxeden"},"content":"            if (t.getPriorityLevel().equals(Task.priorityLevel.High)) {","lastModifiedDate":"2023-04-10"},{"lineNumber":108,"author":{"gitId":"ixxeden"},"content":"                high.add(t);","lastModifiedDate":"2023-04-10"},{"lineNumber":109,"author":{"gitId":"ixxeden"},"content":"            }","lastModifiedDate":"2023-04-10"},{"lineNumber":110,"author":{"gitId":"ixxeden"},"content":"            else if (t.getPriorityLevel().equals(Task.priorityLevel.Low)) {","lastModifiedDate":"2023-04-10"},{"lineNumber":111,"author":{"gitId":"ixxeden"},"content":"                low.add(t);","lastModifiedDate":"2023-04-10"},{"lineNumber":112,"author":{"gitId":"ixxeden"},"content":"            }","lastModifiedDate":"2023-04-10"},{"lineNumber":113,"author":{"gitId":"ixxeden"},"content":"            else {","lastModifiedDate":"2023-04-10"},{"lineNumber":114,"author":{"gitId":"ixxeden"},"content":"                medium.add(t);","lastModifiedDate":"2023-04-10"},{"lineNumber":115,"author":{"gitId":"ixxeden"},"content":"            }","lastModifiedDate":"2023-04-10"},{"lineNumber":116,"author":{"gitId":"ixxeden"},"content":"        }","lastModifiedDate":"2023-04-10"},{"lineNumber":117,"author":{"gitId":"ixxeden"},"content":"        sortedList.addAll(high);","lastModifiedDate":"2023-04-10"},{"lineNumber":118,"author":{"gitId":"ixxeden"},"content":"        sortedList.addAll(medium);","lastModifiedDate":"2023-04-10"},{"lineNumber":119,"author":{"gitId":"ixxeden"},"content":"        sortedList.addAll(low);","lastModifiedDate":"2023-04-10"},{"lineNumber":120,"author":{"gitId":"ixxeden"},"content":"        list \u003d sortedList;","lastModifiedDate":"2023-04-10"},{"lineNumber":121,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-04-10"},{"lineNumber":122,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":123,"author":{"gitId":"ixxeden"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":124,"author":{"gitId":"ixxeden"},"content":"     * Loops through the ArrayList and prints out the every element that is related to the string provided by user","lastModifiedDate":"2023-04-14"},{"lineNumber":125,"author":{"gitId":"ixxeden"},"content":"     * @param word takes in a string word to perform search every item using contains() method","lastModifiedDate":"2023-04-10"},{"lineNumber":126,"author":{"gitId":"ixxeden"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":127,"author":{"gitId":"ixxeden"},"content":"    public void find (String word) {","lastModifiedDate":"2023-04-10"},{"lineNumber":128,"author":{"gitId":"ixxeden"},"content":"        Ui.showLine();","lastModifiedDate":"2023-04-10"},{"lineNumber":129,"author":{"gitId":"ixxeden"},"content":"        System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2023-04-10"},{"lineNumber":130,"author":{"gitId":"ixxeden"},"content":"        for (Task t : list) {","lastModifiedDate":"2023-04-10"},{"lineNumber":131,"author":{"gitId":"ixxeden"},"content":"            if (t.getDescription().contains(word)) {","lastModifiedDate":"2023-04-10"},{"lineNumber":132,"author":{"gitId":"ixxeden"},"content":"                System.out.println(t);","lastModifiedDate":"2023-04-10"},{"lineNumber":133,"author":{"gitId":"ixxeden"},"content":"            }","lastModifiedDate":"2023-04-10"},{"lineNumber":134,"author":{"gitId":"ixxeden"},"content":"        }","lastModifiedDate":"2023-04-10"},{"lineNumber":135,"author":{"gitId":"ixxeden"},"content":"        Ui.showLine();","lastModifiedDate":"2023-04-10"},{"lineNumber":136,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-04-10"},{"lineNumber":137,"author":{"gitId":"ixxeden"},"content":"}","lastModifiedDate":"2023-04-07"}],"authorContributionMap":{"ixxeden":137}},{"path":"src/main/java/duke/TasksType/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ixxeden"},"content":"package duke.TasksType;","lastModifiedDate":"2023-04-08"},{"lineNumber":2,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":3,"author":{"gitId":"ixxeden"},"content":"import duke.Utility.Util;","lastModifiedDate":"2023-04-10"},{"lineNumber":4,"author":{"gitId":"ixxeden"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-04-10"},{"lineNumber":5,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":6,"author":{"gitId":"ixxeden"},"content":"public class Deadline extends Task","lastModifiedDate":"2023-04-02"},{"lineNumber":7,"author":{"gitId":"ixxeden"},"content":"{","lastModifiedDate":"2023-04-02"},{"lineNumber":8,"author":{"gitId":"ixxeden"},"content":"    private LocalDateTime by;","lastModifiedDate":"2023-04-12"},{"lineNumber":9,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":10,"author":{"gitId":"ixxeden"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":11,"author":{"gitId":"ixxeden"},"content":"     * Constructs Deadline task type, has a description (inherited) member and a by member for datetime","lastModifiedDate":"2023-04-14"},{"lineNumber":12,"author":{"gitId":"ixxeden"},"content":"     * @param description takes in a string to store the description of the deadline class","lastModifiedDate":"2023-04-10"},{"lineNumber":13,"author":{"gitId":"ixxeden"},"content":"     * @param by takes in a LocalDateTime input to store the deadline of the task","lastModifiedDate":"2023-04-10"},{"lineNumber":14,"author":{"gitId":"ixxeden"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":15,"author":{"gitId":"ixxeden"},"content":"    public Deadline(String description, LocalDateTime by) {","lastModifiedDate":"2023-04-10"},{"lineNumber":16,"author":{"gitId":"ixxeden"},"content":"        super(description);","lastModifiedDate":"2023-03-19"},{"lineNumber":17,"author":{"gitId":"ixxeden"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-03-19"},{"lineNumber":18,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":19,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":20,"author":{"gitId":"ixxeden"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":21,"author":{"gitId":"ixxeden"},"content":"     * Returns a String for displaying Deadline task","lastModifiedDate":"2023-04-14"},{"lineNumber":22,"author":{"gitId":"ixxeden"},"content":"     * This method formats the deadline print requirement.","lastModifiedDate":"2023-04-10"},{"lineNumber":23,"author":{"gitId":"ixxeden"},"content":"     * @return a string to methods that calls it for printing","lastModifiedDate":"2023-04-10"},{"lineNumber":24,"author":{"gitId":"ixxeden"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":25,"author":{"gitId":"ixxeden"},"content":"    @Override","lastModifiedDate":"2023-03-19"},{"lineNumber":26,"author":{"gitId":"ixxeden"},"content":"    public String toString() {","lastModifiedDate":"2023-04-08"},{"lineNumber":27,"author":{"gitId":"ixxeden"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + Util.displayDT(by) + \")\" + \" [Priority \" + getPriorityLevel() + \"]\";","lastModifiedDate":"2023-04-10"},{"lineNumber":28,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":29,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":30,"author":{"gitId":"ixxeden"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":31,"author":{"gitId":"ixxeden"},"content":"     * Returns a LocalDateTime to get the date and time of the particular deadline clas","lastModifiedDate":"2023-04-14"},{"lineNumber":32,"author":{"gitId":"ixxeden"},"content":"     * @return a LocalDateTime for formatting and subsequently for display or save","lastModifiedDate":"2023-04-10"},{"lineNumber":33,"author":{"gitId":"ixxeden"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":34,"author":{"gitId":"ixxeden"},"content":"    public LocalDateTime getBy() {","lastModifiedDate":"2023-04-10"},{"lineNumber":35,"author":{"gitId":"ixxeden"},"content":"        return by;","lastModifiedDate":"2023-04-08"},{"lineNumber":36,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-04-08"},{"lineNumber":37,"author":{"gitId":"ixxeden"},"content":"}","lastModifiedDate":"2023-03-19"}],"authorContributionMap":{"ixxeden":37}},{"path":"src/main/java/duke/TasksType/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ixxeden"},"content":"package duke.TasksType;","lastModifiedDate":"2023-04-08"},{"lineNumber":2,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":3,"author":{"gitId":"ixxeden"},"content":"import duke.Utility.Util;","lastModifiedDate":"2023-04-10"},{"lineNumber":4,"author":{"gitId":"ixxeden"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-04-10"},{"lineNumber":5,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":6,"author":{"gitId":"ixxeden"},"content":"public class Event extends Task","lastModifiedDate":"2023-04-02"},{"lineNumber":7,"author":{"gitId":"ixxeden"},"content":"{","lastModifiedDate":"2023-04-02"},{"lineNumber":8,"author":{"gitId":"ixxeden"},"content":"    protected LocalDateTime from;","lastModifiedDate":"2023-04-10"},{"lineNumber":9,"author":{"gitId":"ixxeden"},"content":"    protected LocalDateTime to;","lastModifiedDate":"2023-04-10"},{"lineNumber":10,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":11,"author":{"gitId":"ixxeden"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":12,"author":{"gitId":"ixxeden"},"content":"     * Constructs Event task type, has description (inherited) member, a from member, and to member","lastModifiedDate":"2023-04-14"},{"lineNumber":13,"author":{"gitId":"ixxeden"},"content":"     * @param description takes in a string input description to describe the event","lastModifiedDate":"2023-04-10"},{"lineNumber":14,"author":{"gitId":"ixxeden"},"content":"     * @param from takes in a LocalDateTime input to indicate the start date time of the event","lastModifiedDate":"2023-04-10"},{"lineNumber":15,"author":{"gitId":"ixxeden"},"content":"     * @param to takes in a LocalDateTime input to indicate the end date time of the event","lastModifiedDate":"2023-04-10"},{"lineNumber":16,"author":{"gitId":"ixxeden"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":17,"author":{"gitId":"ixxeden"},"content":"    public Event(String description, LocalDateTime from, LocalDateTime to) {","lastModifiedDate":"2023-04-10"},{"lineNumber":18,"author":{"gitId":"ixxeden"},"content":"        super(description);","lastModifiedDate":"2023-03-19"},{"lineNumber":19,"author":{"gitId":"ixxeden"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-03-19"},{"lineNumber":20,"author":{"gitId":"ixxeden"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-03-19"},{"lineNumber":21,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":22,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":23,"author":{"gitId":"ixxeden"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":24,"author":{"gitId":"ixxeden"},"content":"     * Returns a String to format the display for event tasks","lastModifiedDate":"2023-04-14"},{"lineNumber":25,"author":{"gitId":"ixxeden"},"content":"     * @return a string used for display","lastModifiedDate":"2023-04-10"},{"lineNumber":26,"author":{"gitId":"ixxeden"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":27,"author":{"gitId":"ixxeden"},"content":"    @Override","lastModifiedDate":"2023-03-19"},{"lineNumber":28,"author":{"gitId":"ixxeden"},"content":"    public String toString() {","lastModifiedDate":"2023-04-08"},{"lineNumber":29,"author":{"gitId":"ixxeden"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + Util.displayDT(from) + \" to: \" + Util.displayDT(to) + \")\" + \" [Priority \" + getPriorityLevel() + \"]\";","lastModifiedDate":"2023-04-10"},{"lineNumber":30,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":31,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":32,"author":{"gitId":"ixxeden"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":33,"author":{"gitId":"ixxeden"},"content":"     * Returns a LocalDateTime to get the start date time of the event task","lastModifiedDate":"2023-04-14"},{"lineNumber":34,"author":{"gitId":"ixxeden"},"content":"     * @return a LocalDateTime for display or conversion","lastModifiedDate":"2023-04-10"},{"lineNumber":35,"author":{"gitId":"ixxeden"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":36,"author":{"gitId":"ixxeden"},"content":"    public LocalDateTime getFrom() {","lastModifiedDate":"2023-04-10"},{"lineNumber":37,"author":{"gitId":"ixxeden"},"content":"        return from;","lastModifiedDate":"2023-04-08"},{"lineNumber":38,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-04-08"},{"lineNumber":39,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":40,"author":{"gitId":"ixxeden"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":41,"author":{"gitId":"ixxeden"},"content":"     * This method is called to get the end date time of the event task","lastModifiedDate":"2023-04-10"},{"lineNumber":42,"author":{"gitId":"ixxeden"},"content":"     * @return a LocalDateTime for display or conversion","lastModifiedDate":"2023-04-10"},{"lineNumber":43,"author":{"gitId":"ixxeden"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":44,"author":{"gitId":"ixxeden"},"content":"    public LocalDateTime getTo() {","lastModifiedDate":"2023-04-10"},{"lineNumber":45,"author":{"gitId":"ixxeden"},"content":"        return to;","lastModifiedDate":"2023-04-08"},{"lineNumber":46,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-04-08"},{"lineNumber":47,"author":{"gitId":"ixxeden"},"content":"}","lastModifiedDate":"2023-03-19"}],"authorContributionMap":{"ixxeden":47}},{"path":"src/main/java/duke/TasksType/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ixxeden"},"content":"package duke.TasksType;","lastModifiedDate":"2023-04-08"},{"lineNumber":2,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":3,"author":{"gitId":"ixxeden"},"content":"public class Task","lastModifiedDate":"2023-04-02"},{"lineNumber":4,"author":{"gitId":"ixxeden"},"content":"{","lastModifiedDate":"2023-04-02"},{"lineNumber":5,"author":{"gitId":"ixxeden"},"content":"    //protected so that child class can utilize","lastModifiedDate":"2023-04-10"},{"lineNumber":6,"author":{"gitId":"ixxeden"},"content":"    protected String description;","lastModifiedDate":"2023-03-17"},{"lineNumber":7,"author":{"gitId":"ixxeden"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-03-17"},{"lineNumber":8,"author":{"gitId":"ixxeden"},"content":"    protected priorityLevel level;","lastModifiedDate":"2023-04-10"},{"lineNumber":9,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":10,"author":{"gitId":"ixxeden"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":11,"author":{"gitId":"ixxeden"},"content":"     * Constructs Task class, parent of all task types.","lastModifiedDate":"2023-04-14"},{"lineNumber":12,"author":{"gitId":"ixxeden"},"content":"     * Has description member, isDone member and priorityLevel","lastModifiedDate":"2023-04-10"},{"lineNumber":13,"author":{"gitId":"ixxeden"},"content":"     * Asserts the assumption that the description should not be empty","lastModifiedDate":"2023-04-10"},{"lineNumber":14,"author":{"gitId":"ixxeden"},"content":"     * @param description takes in a string to describe the task.","lastModifiedDate":"2023-04-10"},{"lineNumber":15,"author":{"gitId":"ixxeden"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":16,"author":{"gitId":"ixxeden"},"content":"    public Task(String description) {","lastModifiedDate":"2023-04-10"},{"lineNumber":17,"author":{"gitId":"ixxeden"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-03-17"},{"lineNumber":18,"author":{"gitId":"ixxeden"},"content":"        this.isDone \u003d false; // default is false because the task is not done","lastModifiedDate":"2023-04-10"},{"lineNumber":19,"author":{"gitId":"ixxeden"},"content":"        this.level \u003d priorityLevel.Medium; // default is medium level priority unless changed by user","lastModifiedDate":"2023-04-10"},{"lineNumber":20,"author":{"gitId":"ixxeden"},"content":"        assert !description.isEmpty() : \"Description cannot be empty\";","lastModifiedDate":"2023-04-10"},{"lineNumber":21,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-04-10"},{"lineNumber":22,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":23,"author":{"gitId":"ixxeden"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":24,"author":{"gitId":"ixxeden"},"content":"     * Returns a String to get the description of the particular task","lastModifiedDate":"2023-04-14"},{"lineNumber":25,"author":{"gitId":"ixxeden"},"content":"     * @return a string of the description","lastModifiedDate":"2023-04-10"},{"lineNumber":26,"author":{"gitId":"ixxeden"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":27,"author":{"gitId":"ixxeden"},"content":"    public String getDescription() {","lastModifiedDate":"2023-04-10"},{"lineNumber":28,"author":{"gitId":"ixxeden"},"content":"        return this.description;","lastModifiedDate":"2023-04-10"},{"lineNumber":29,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":30,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":31,"author":{"gitId":"ixxeden"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":32,"author":{"gitId":"ixxeden"},"content":"     * Marks the task as done","lastModifiedDate":"2023-04-14"},{"lineNumber":33,"author":{"gitId":"ixxeden"},"content":"     * Changes the isDone member of the task to true","lastModifiedDate":"2023-04-14"},{"lineNumber":34,"author":{"gitId":"ixxeden"},"content":"     * To indicate that the task has been done","lastModifiedDate":"2023-04-14"},{"lineNumber":35,"author":{"gitId":"ixxeden"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":36,"author":{"gitId":"ixxeden"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-04-08"},{"lineNumber":37,"author":{"gitId":"ixxeden"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-03-17"},{"lineNumber":38,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":39,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":40,"author":{"gitId":"ixxeden"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":41,"author":{"gitId":"ixxeden"},"content":"     * Unmarks the task","lastModifiedDate":"2023-04-14"},{"lineNumber":42,"author":{"gitId":"ixxeden"},"content":"     * Changes the isDone member of the task back to false","lastModifiedDate":"2023-04-14"},{"lineNumber":43,"author":{"gitId":"ixxeden"},"content":"     * If the task was marked done previously e.g. marked wrongly by user or task was not completed","lastModifiedDate":"2023-04-14"},{"lineNumber":44,"author":{"gitId":"ixxeden"},"content":"     * To indicate that the task has not been done","lastModifiedDate":"2023-04-14"},{"lineNumber":45,"author":{"gitId":"ixxeden"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":46,"author":{"gitId":"ixxeden"},"content":"    public void markAsNotDone() {","lastModifiedDate":"2023-04-08"},{"lineNumber":47,"author":{"gitId":"ixxeden"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-03-17"},{"lineNumber":48,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":49,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":50,"author":{"gitId":"ixxeden"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":51,"author":{"gitId":"ixxeden"},"content":"     * Returns a String to display the status of the task,","lastModifiedDate":"2023-04-14"},{"lineNumber":52,"author":{"gitId":"ixxeden"},"content":"     * whether has it been done","lastModifiedDate":"2023-04-10"},{"lineNumber":53,"author":{"gitId":"ixxeden"},"content":"     * Checks if isDone is true","lastModifiedDate":"2023-04-10"},{"lineNumber":54,"author":{"gitId":"ixxeden"},"content":"     * @return a string \"X\" if it is true","lastModifiedDate":"2023-04-10"},{"lineNumber":55,"author":{"gitId":"ixxeden"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":56,"author":{"gitId":"ixxeden"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-04-08"},{"lineNumber":57,"author":{"gitId":"ixxeden"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2023-03-17"},{"lineNumber":58,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":59,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":60,"author":{"gitId":"ixxeden"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":61,"author":{"gitId":"ixxeden"},"content":"     * Returns a String that contains the isDone status and the description of the task","lastModifiedDate":"2023-04-14"},{"lineNumber":62,"author":{"gitId":"ixxeden"},"content":"     * overrides other classes\u0027 toString() method","lastModifiedDate":"2023-04-10"},{"lineNumber":63,"author":{"gitId":"ixxeden"},"content":"     * @return a string","lastModifiedDate":"2023-04-14"},{"lineNumber":64,"author":{"gitId":"ixxeden"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":65,"author":{"gitId":"ixxeden"},"content":"    @Override","lastModifiedDate":"2023-03-19"},{"lineNumber":66,"author":{"gitId":"ixxeden"},"content":"    public String toString() {","lastModifiedDate":"2023-04-07"},{"lineNumber":67,"author":{"gitId":"ixxeden"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2023-03-19"},{"lineNumber":68,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":69,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":70,"author":{"gitId":"ixxeden"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":71,"author":{"gitId":"ixxeden"},"content":"     * enum of priority levels that will not be changed","lastModifiedDate":"2023-04-10"},{"lineNumber":72,"author":{"gitId":"ixxeden"},"content":"     * only these three levels will be used to indicate the priority level of each task","lastModifiedDate":"2023-04-10"},{"lineNumber":73,"author":{"gitId":"ixxeden"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":74,"author":{"gitId":"ixxeden"},"content":"    public enum priorityLevel {","lastModifiedDate":"2023-04-10"},{"lineNumber":75,"author":{"gitId":"ixxeden"},"content":"        Low,","lastModifiedDate":"2023-04-10"},{"lineNumber":76,"author":{"gitId":"ixxeden"},"content":"        Medium,","lastModifiedDate":"2023-04-10"},{"lineNumber":77,"author":{"gitId":"ixxeden"},"content":"        High","lastModifiedDate":"2023-04-10"},{"lineNumber":78,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-04-10"},{"lineNumber":79,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":80,"author":{"gitId":"ixxeden"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":81,"author":{"gitId":"ixxeden"},"content":"     * Returns the priorityLevel member of each task","lastModifiedDate":"2023-04-14"},{"lineNumber":82,"author":{"gitId":"ixxeden"},"content":"     * This method is called to check the priority level of each task","lastModifiedDate":"2023-04-10"},{"lineNumber":83,"author":{"gitId":"ixxeden"},"content":"     * @return priorityLevel","lastModifiedDate":"2023-04-14"},{"lineNumber":84,"author":{"gitId":"ixxeden"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":85,"author":{"gitId":"ixxeden"},"content":"    public priorityLevel getPriorityLevel() { // new","lastModifiedDate":"2023-04-10"},{"lineNumber":86,"author":{"gitId":"ixxeden"},"content":"        return this.level;","lastModifiedDate":"2023-04-10"},{"lineNumber":87,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-04-10"},{"lineNumber":88,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":89,"author":{"gitId":"ixxeden"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":90,"author":{"gitId":"ixxeden"},"content":"     * Changes the priorityLevel of each task","lastModifiedDate":"2023-04-14"},{"lineNumber":91,"author":{"gitId":"ixxeden"},"content":"     * @param p takes in a priorityLevel input","lastModifiedDate":"2023-04-10"},{"lineNumber":92,"author":{"gitId":"ixxeden"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":93,"author":{"gitId":"ixxeden"},"content":"    public void changePriority(priorityLevel p) {","lastModifiedDate":"2023-04-10"},{"lineNumber":94,"author":{"gitId":"ixxeden"},"content":"        this.level \u003d p;","lastModifiedDate":"2023-04-10"},{"lineNumber":95,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-04-10"},{"lineNumber":96,"author":{"gitId":"ixxeden"},"content":"}","lastModifiedDate":"2023-03-17"}],"authorContributionMap":{"ixxeden":96}},{"path":"src/main/java/duke/TasksType/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ixxeden"},"content":"package duke.TasksType;","lastModifiedDate":"2023-04-08"},{"lineNumber":2,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":3,"author":{"gitId":"ixxeden"},"content":"public class Todo extends Task","lastModifiedDate":"2023-04-02"},{"lineNumber":4,"author":{"gitId":"ixxeden"},"content":"{","lastModifiedDate":"2023-04-02"},{"lineNumber":5,"author":{"gitId":"ixxeden"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":6,"author":{"gitId":"ixxeden"},"content":"     * Constructs Todo task type, has description (inherited) member","lastModifiedDate":"2023-04-14"},{"lineNumber":7,"author":{"gitId":"ixxeden"},"content":"     * @param description takes in a string input description to describe the Todo","lastModifiedDate":"2023-04-10"},{"lineNumber":8,"author":{"gitId":"ixxeden"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":9,"author":{"gitId":"ixxeden"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-04-10"},{"lineNumber":10,"author":{"gitId":"ixxeden"},"content":"        super(description);","lastModifiedDate":"2023-03-19"},{"lineNumber":11,"author":{"gitId":"ixxeden"},"content":"     }","lastModifiedDate":"2023-03-19"},{"lineNumber":12,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":13,"author":{"gitId":"ixxeden"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":14,"author":{"gitId":"ixxeden"},"content":"     * Returns a String to format the display for Todo tasks","lastModifiedDate":"2023-04-14"},{"lineNumber":15,"author":{"gitId":"ixxeden"},"content":"     * @return a string used for display","lastModifiedDate":"2023-04-10"},{"lineNumber":16,"author":{"gitId":"ixxeden"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":17,"author":{"gitId":"ixxeden"},"content":"    @Override","lastModifiedDate":"2023-03-19"},{"lineNumber":18,"author":{"gitId":"ixxeden"},"content":"    public String toString() {","lastModifiedDate":"2023-04-10"},{"lineNumber":19,"author":{"gitId":"ixxeden"},"content":"        return \"[T]\" + super.toString() + \" [Priority \" + getPriorityLevel() + \"]\";","lastModifiedDate":"2023-04-10"},{"lineNumber":20,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":21,"author":{"gitId":"ixxeden"},"content":"}","lastModifiedDate":"2023-03-19"}],"authorContributionMap":{"ixxeden":21}},{"path":"src/main/java/duke/Ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ixxeden"},"content":"package duke.Ui;","lastModifiedDate":"2023-04-07"},{"lineNumber":2,"author":{"gitId":"ixxeden"},"content":"public class Ui {","lastModifiedDate":"2023-04-11"},{"lineNumber":3,"author":{"gitId":"ixxeden"},"content":"    public Ui() {","lastModifiedDate":"2023-04-08"},{"lineNumber":4,"author":{"gitId":"ixxeden"},"content":"        //empty constructor","lastModifiedDate":"2023-04-10"},{"lineNumber":5,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-04-10"},{"lineNumber":6,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":7,"author":{"gitId":"ixxeden"},"content":"    /**","lastModifiedDate":"2023-04-07"},{"lineNumber":8,"author":{"gitId":"ixxeden"},"content":"     * Prints the welcome message","lastModifiedDate":"2023-04-14"},{"lineNumber":9,"author":{"gitId":"ixxeden"},"content":"     */","lastModifiedDate":"2023-04-07"},{"lineNumber":10,"author":{"gitId":"ixxeden"},"content":"    public void showWelcome() {","lastModifiedDate":"2023-04-10"},{"lineNumber":11,"author":{"gitId":"ixxeden"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2023-04-07"},{"lineNumber":12,"author":{"gitId":"ixxeden"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2023-04-07"},{"lineNumber":13,"author":{"gitId":"ixxeden"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2023-04-07"},{"lineNumber":14,"author":{"gitId":"ixxeden"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2023-04-07"},{"lineNumber":15,"author":{"gitId":"ixxeden"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2023-04-07"},{"lineNumber":16,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":17,"author":{"gitId":"ixxeden"},"content":"        System.out.println(\"Hello from\\n\" + logo);","lastModifiedDate":"2023-04-07"},{"lineNumber":18,"author":{"gitId":"ixxeden"},"content":"        System.out.println(\"Hello! I\u0027m Duke, your task scheduler.\");","lastModifiedDate":"2023-04-08"},{"lineNumber":19,"author":{"gitId":"ixxeden"},"content":"        Ui.showLine();","lastModifiedDate":"2023-04-11"},{"lineNumber":20,"author":{"gitId":"ixxeden"},"content":"        System.out.println(\"What can I do for you?\\n\");","lastModifiedDate":"2023-04-07"},{"lineNumber":21,"author":{"gitId":"ixxeden"},"content":"        System.out.println(\"Type \"+ \"help\" + \" to see the available commands\");","lastModifiedDate":"2023-04-11"},{"lineNumber":22,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-04-07"},{"lineNumber":23,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":24,"author":{"gitId":"ixxeden"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":25,"author":{"gitId":"ixxeden"},"content":"     * Prints a line for demarcation of output texts","lastModifiedDate":"2023-04-14"},{"lineNumber":26,"author":{"gitId":"ixxeden"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":27,"author":{"gitId":"ixxeden"},"content":"    public static void showLine() {","lastModifiedDate":"2023-04-10"},{"lineNumber":28,"author":{"gitId":"ixxeden"},"content":"        System.out.println(\"__________________________________________________________________________________________\");","lastModifiedDate":"2023-04-11"},{"lineNumber":29,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-04-11"},{"lineNumber":30,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-11"},{"lineNumber":31,"author":{"gitId":"ixxeden"},"content":"    public static void showCommands() {","lastModifiedDate":"2023-04-11"},{"lineNumber":32,"author":{"gitId":"ixxeden"},"content":"        showLine();","lastModifiedDate":"2023-04-11"},{"lineNumber":33,"author":{"gitId":"ixxeden"},"content":"        System.out.println(\"Here are the commands you can use:\");","lastModifiedDate":"2023-04-11"},{"lineNumber":34,"author":{"gitId":"ixxeden"},"content":"        showLine();","lastModifiedDate":"2023-04-11"},{"lineNumber":35,"author":{"gitId":"ixxeden"},"content":"        System.out.println(\"1. list - list out your current task(s).\");","lastModifiedDate":"2023-04-11"},{"lineNumber":36,"author":{"gitId":"ixxeden"},"content":"        System.out.println(\"2. todo (description) - adds a Todo task\");","lastModifiedDate":"2023-04-11"},{"lineNumber":37,"author":{"gitId":"ixxeden"},"content":"        System.out.println(\"3. deadline (description) /by (yyyy-MM-dd) - adds a Deadline task\");","lastModifiedDate":"2023-04-11"},{"lineNumber":38,"author":{"gitId":"ixxeden"},"content":"        System.out.println(\"4. event (description) /from (yyyy-MM-dd) /to (yyyy-MM-dd) - adds an Event task\");","lastModifiedDate":"2023-04-11"},{"lineNumber":39,"author":{"gitId":"ixxeden"},"content":"        System.out.println(\"5. delete (index) - deletes a specific task\");","lastModifiedDate":"2023-04-11"},{"lineNumber":40,"author":{"gitId":"ixxeden"},"content":"        System.out.println(\"6. mark (index) - marks a task as done\");","lastModifiedDate":"2023-04-11"},{"lineNumber":41,"author":{"gitId":"ixxeden"},"content":"        System.out.println(\"7. unmark (index) - marks a task as not done\");","lastModifiedDate":"2023-04-11"},{"lineNumber":42,"author":{"gitId":"ixxeden"},"content":"        System.out.println(\"8. priority (index) (high/low/medium) - changes the priority level of a specific task\");","lastModifiedDate":"2023-04-11"},{"lineNumber":43,"author":{"gitId":"ixxeden"},"content":"        System.out.println(\"9. find (keyword) - list out the tasks that contain the keyword\");","lastModifiedDate":"2023-04-11"},{"lineNumber":44,"author":{"gitId":"ixxeden"},"content":"        System.out.println(\"10. help - list out all the usable commands\");","lastModifiedDate":"2023-04-11"},{"lineNumber":45,"author":{"gitId":"ixxeden"},"content":"        System.out.println(\"11. bye - exit the program\");","lastModifiedDate":"2023-04-11"},{"lineNumber":46,"author":{"gitId":"ixxeden"},"content":"        showLine();","lastModifiedDate":"2023-04-11"},{"lineNumber":47,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-04-07"},{"lineNumber":48,"author":{"gitId":"ixxeden"},"content":"}","lastModifiedDate":"2023-04-07"}],"authorContributionMap":{"ixxeden":48}},{"path":"src/main/java/duke/Utility/Util.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ixxeden"},"content":"package duke.Utility;","lastModifiedDate":"2023-04-08"},{"lineNumber":2,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":3,"author":{"gitId":"ixxeden"},"content":"import duke.Exception.DukeException;","lastModifiedDate":"2023-04-11"},{"lineNumber":4,"author":{"gitId":"ixxeden"},"content":"import duke.TasksType.Task;","lastModifiedDate":"2023-04-10"},{"lineNumber":5,"author":{"gitId":"ixxeden"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-04-10"},{"lineNumber":6,"author":{"gitId":"ixxeden"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-04-10"},{"lineNumber":7,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":8,"author":{"gitId":"ixxeden"},"content":"public class Util {","lastModifiedDate":"2023-04-08"},{"lineNumber":9,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-11"},{"lineNumber":10,"author":{"gitId":"ixxeden"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":11,"author":{"gitId":"ixxeden"},"content":"     * Returns a boolean if the mark/unmark input is valid","lastModifiedDate":"2023-04-14"},{"lineNumber":12,"author":{"gitId":"ixxeden"},"content":"     * @param input takes in a string input from user and check if it has a word and another string (num) behind","lastModifiedDate":"2023-04-10"},{"lineNumber":13,"author":{"gitId":"ixxeden"},"content":"     * @return true if only there are two words","lastModifiedDate":"2023-04-11"},{"lineNumber":14,"author":{"gitId":"ixxeden"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":15,"author":{"gitId":"ixxeden"},"content":"    public static boolean checkMark(String input) {","lastModifiedDate":"2023-04-08"},{"lineNumber":16,"author":{"gitId":"ixxeden"},"content":"        String[] splitted \u003d input.split(\" \");","lastModifiedDate":"2023-04-08"},{"lineNumber":17,"author":{"gitId":"ixxeden"},"content":"        return splitted.length \u003d\u003d 2;","lastModifiedDate":"2023-04-08"},{"lineNumber":18,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-04-08"},{"lineNumber":19,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":20,"author":{"gitId":"ixxeden"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":21,"author":{"gitId":"ixxeden"},"content":"     * Returns a String of correct dates and times format","lastModifiedDate":"2023-04-14"},{"lineNumber":22,"author":{"gitId":"ixxeden"},"content":"     * @param formattedDT takes in a LocalDateTime formatted input","lastModifiedDate":"2023-04-10"},{"lineNumber":23,"author":{"gitId":"ixxeden"},"content":"     * @return a string in \"yyyy-MM-dd HH:mm\"","lastModifiedDate":"2023-04-10"},{"lineNumber":24,"author":{"gitId":"ixxeden"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":25,"author":{"gitId":"ixxeden"},"content":"    public static String dateTimeToString(LocalDateTime formattedDT) {","lastModifiedDate":"2023-04-10"},{"lineNumber":26,"author":{"gitId":"ixxeden"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2023-04-10"},{"lineNumber":27,"author":{"gitId":"ixxeden"},"content":"        return formattedDT.format(formatter);","lastModifiedDate":"2023-04-10"},{"lineNumber":28,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-04-10"},{"lineNumber":29,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":30,"author":{"gitId":"ixxeden"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":31,"author":{"gitId":"ixxeden"},"content":"     * Returns a LocalDateTime in correct format","lastModifiedDate":"2023-04-14"},{"lineNumber":32,"author":{"gitId":"ixxeden"},"content":"     * @param dt takes in a LocalDateTime input with default format","lastModifiedDate":"2023-04-10"},{"lineNumber":33,"author":{"gitId":"ixxeden"},"content":"     * @return a LocalDateTime variable","lastModifiedDate":"2023-04-11"},{"lineNumber":34,"author":{"gitId":"ixxeden"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":35,"author":{"gitId":"ixxeden"},"content":"    public static LocalDateTime convertDateTime(String dt) {","lastModifiedDate":"2023-04-10"},{"lineNumber":36,"author":{"gitId":"ixxeden"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2023-04-10"},{"lineNumber":37,"author":{"gitId":"ixxeden"},"content":"        LocalDateTime formattedDT \u003d LocalDateTime.parse(dt, formatter);","lastModifiedDate":"2023-04-10"},{"lineNumber":38,"author":{"gitId":"ixxeden"},"content":"        return formattedDT;","lastModifiedDate":"2023-04-10"},{"lineNumber":39,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-04-10"},{"lineNumber":40,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":41,"author":{"gitId":"ixxeden"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":42,"author":{"gitId":"ixxeden"},"content":"     * Returns a String displays the required LocalDateTime into string","lastModifiedDate":"2023-04-14"},{"lineNumber":43,"author":{"gitId":"ixxeden"},"content":"     * @param formattedDT takes in the formatted LocalDateTime input","lastModifiedDate":"2023-04-10"},{"lineNumber":44,"author":{"gitId":"ixxeden"},"content":"     * @return a string of the formatted LocalDateTime","lastModifiedDate":"2023-04-10"},{"lineNumber":45,"author":{"gitId":"ixxeden"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":46,"author":{"gitId":"ixxeden"},"content":"    public static String displayDT(LocalDateTime formattedDT) {","lastModifiedDate":"2023-04-10"},{"lineNumber":47,"author":{"gitId":"ixxeden"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\");","lastModifiedDate":"2023-04-10"},{"lineNumber":48,"author":{"gitId":"ixxeden"},"content":"        return formattedDT.format(formatter);","lastModifiedDate":"2023-04-10"},{"lineNumber":49,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-04-10"},{"lineNumber":50,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":51,"author":{"gitId":"ixxeden"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":52,"author":{"gitId":"ixxeden"},"content":"     * Returns a PriorityLevel that was converted from a String","lastModifiedDate":"2023-04-14"},{"lineNumber":53,"author":{"gitId":"ixxeden"},"content":"     * @param s takes in a string input","lastModifiedDate":"2023-04-10"},{"lineNumber":54,"author":{"gitId":"ixxeden"},"content":"     * @return a priorityLevel","lastModifiedDate":"2023-04-10"},{"lineNumber":55,"author":{"gitId":"ixxeden"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":56,"author":{"gitId":"ixxeden"},"content":"    public static Task.priorityLevel stringToLevel(String s) {","lastModifiedDate":"2023-04-10"},{"lineNumber":57,"author":{"gitId":"ixxeden"},"content":"        switch (s.toUpperCase()) {","lastModifiedDate":"2023-04-10"},{"lineNumber":58,"author":{"gitId":"ixxeden"},"content":"            case \"LOW\":","lastModifiedDate":"2023-04-10"},{"lineNumber":59,"author":{"gitId":"ixxeden"},"content":"                return Task.priorityLevel.Low;","lastModifiedDate":"2023-04-10"},{"lineNumber":60,"author":{"gitId":"ixxeden"},"content":"            case \"HIGH\":","lastModifiedDate":"2023-04-10"},{"lineNumber":61,"author":{"gitId":"ixxeden"},"content":"                return Task.priorityLevel.High;","lastModifiedDate":"2023-04-10"},{"lineNumber":62,"author":{"gitId":"ixxeden"},"content":"            default:","lastModifiedDate":"2023-04-10"},{"lineNumber":63,"author":{"gitId":"ixxeden"},"content":"                return Task.priorityLevel.Medium;","lastModifiedDate":"2023-04-10"},{"lineNumber":64,"author":{"gitId":"ixxeden"},"content":"        }","lastModifiedDate":"2023-04-10"},{"lineNumber":65,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-04-10"},{"lineNumber":66,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-11"},{"lineNumber":67,"author":{"gitId":"ixxeden"},"content":"    /**","lastModifiedDate":"2023-04-11"},{"lineNumber":68,"author":{"gitId":"ixxeden"},"content":"     * Validates the dateTime ensuring that it is not in the past","lastModifiedDate":"2023-04-14"},{"lineNumber":69,"author":{"gitId":"ixxeden"},"content":"     * @param dateTime takes in a LocalDateTime input","lastModifiedDate":"2023-04-11"},{"lineNumber":70,"author":{"gitId":"ixxeden"},"content":"     * @throws DukeException if the time is before current time","lastModifiedDate":"2023-04-11"},{"lineNumber":71,"author":{"gitId":"ixxeden"},"content":"     */","lastModifiedDate":"2023-04-11"},{"lineNumber":72,"author":{"gitId":"ixxeden"},"content":"    public static void validateDateTime(LocalDateTime dateTime) throws DukeException {","lastModifiedDate":"2023-04-11"},{"lineNumber":73,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-11"},{"lineNumber":74,"author":{"gitId":"ixxeden"},"content":"        LocalDateTime currentDateTime \u003d LocalDateTime.now();","lastModifiedDate":"2023-04-11"},{"lineNumber":75,"author":{"gitId":"ixxeden"},"content":"        if (dateTime.isBefore(currentDateTime)) {","lastModifiedDate":"2023-04-11"},{"lineNumber":76,"author":{"gitId":"ixxeden"},"content":"            throw new DukeException(\"☹ OOPS!!! Date is in the past! :-(\");","lastModifiedDate":"2023-04-11"},{"lineNumber":77,"author":{"gitId":"ixxeden"},"content":"        }","lastModifiedDate":"2023-04-11"},{"lineNumber":78,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-04-11"},{"lineNumber":79,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-11"},{"lineNumber":80,"author":{"gitId":"ixxeden"},"content":"    /**","lastModifiedDate":"2023-04-11"},{"lineNumber":81,"author":{"gitId":"ixxeden"},"content":"     * Validates the start and end dateTime in the Event task","lastModifiedDate":"2023-04-14"},{"lineNumber":82,"author":{"gitId":"ixxeden"},"content":"     * such that the end dateTime will never be before start dateTime","lastModifiedDate":"2023-04-11"},{"lineNumber":83,"author":{"gitId":"ixxeden"},"content":"     * @param dateTimeStart takes in a LocalDateTime as the start dateTime","lastModifiedDate":"2023-04-11"},{"lineNumber":84,"author":{"gitId":"ixxeden"},"content":"     * @param dateTimeEnd takes in a LocalDateTime as the end dateTime","lastModifiedDate":"2023-04-11"},{"lineNumber":85,"author":{"gitId":"ixxeden"},"content":"     * @throws DukeException if the end dateTime is before start dateTime","lastModifiedDate":"2023-04-11"},{"lineNumber":86,"author":{"gitId":"ixxeden"},"content":"     */","lastModifiedDate":"2023-04-11"},{"lineNumber":87,"author":{"gitId":"ixxeden"},"content":"    public static void validateEventDate(LocalDateTime dateTimeStart, LocalDateTime dateTimeEnd) throws DukeException{","lastModifiedDate":"2023-04-11"},{"lineNumber":88,"author":{"gitId":"ixxeden"},"content":"        if (dateTimeEnd.isBefore(dateTimeStart)) {","lastModifiedDate":"2023-04-11"},{"lineNumber":89,"author":{"gitId":"ixxeden"},"content":"            throw new DukeException(\"☹ OOPS!!! Start dateTime is after End dateTime! :-(\");","lastModifiedDate":"2023-04-11"},{"lineNumber":90,"author":{"gitId":"ixxeden"},"content":"        }","lastModifiedDate":"2023-04-11"},{"lineNumber":91,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-04-11"},{"lineNumber":92,"author":{"gitId":"ixxeden"},"content":"}","lastModifiedDate":"2023-04-08"}],"authorContributionMap":{"ixxeden":92}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ixxeden"},"content":"package duke;","lastModifiedDate":"2023-04-10"},{"lineNumber":2,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":3,"author":{"gitId":"ixxeden"},"content":"import duke.Exception.DukeException;","lastModifiedDate":"2023-04-11"},{"lineNumber":4,"author":{"gitId":"ixxeden"},"content":"import duke.Parser.Parser;","lastModifiedDate":"2023-04-10"},{"lineNumber":5,"author":{"gitId":"ixxeden"},"content":"import duke.TasksType.Task;","lastModifiedDate":"2023-04-10"},{"lineNumber":6,"author":{"gitId":"ixxeden"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-04-10"},{"lineNumber":7,"author":{"gitId":"ixxeden"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-04-10"},{"lineNumber":8,"author":{"gitId":"ixxeden"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2023-04-10"},{"lineNumber":9,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":10,"author":{"gitId":"ixxeden"},"content":"public class ParserTest {","lastModifiedDate":"2023-04-10"},{"lineNumber":11,"author":{"gitId":"ixxeden"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":12,"author":{"gitId":"ixxeden"},"content":"     * Tests the Parser class validateQuestion() method","lastModifiedDate":"2023-04-14"},{"lineNumber":13,"author":{"gitId":"ixxeden"},"content":"     * if an unknown input was given by user,","lastModifiedDate":"2023-04-10"},{"lineNumber":14,"author":{"gitId":"ixxeden"},"content":"     * the correct error message will be displayed","lastModifiedDate":"2023-04-10"},{"lineNumber":15,"author":{"gitId":"ixxeden"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":16,"author":{"gitId":"ixxeden"},"content":"    @Test","lastModifiedDate":"2023-04-10"},{"lineNumber":17,"author":{"gitId":"ixxeden"},"content":"    public void unknownCommandGiven() {","lastModifiedDate":"2023-04-10"},{"lineNumber":18,"author":{"gitId":"ixxeden"},"content":"        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-04-10"},{"lineNumber":19,"author":{"gitId":"ixxeden"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e Parser.validateQuestion(\"eventt\", list));","lastModifiedDate":"2023-04-10"},{"lineNumber":20,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":21,"author":{"gitId":"ixxeden"},"content":"        String expectedOutput \u003d \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";","lastModifiedDate":"2023-04-10"},{"lineNumber":22,"author":{"gitId":"ixxeden"},"content":"        String actualOutput \u003d exception.getMessage();","lastModifiedDate":"2023-04-10"},{"lineNumber":23,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":24,"author":{"gitId":"ixxeden"},"content":"        assertTrue(actualOutput.contains(expectedOutput));","lastModifiedDate":"2023-04-10"},{"lineNumber":25,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-04-10"},{"lineNumber":26,"author":{"gitId":"ixxeden"},"content":"}","lastModifiedDate":"2023-04-10"}],"authorContributionMap":{"ixxeden":26}},{"path":"src/test/java/duke/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ixxeden"},"content":"package duke;","lastModifiedDate":"2023-04-10"},{"lineNumber":2,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":3,"author":{"gitId":"ixxeden"},"content":"import duke.TaskList.TaskList;","lastModifiedDate":"2023-04-10"},{"lineNumber":4,"author":{"gitId":"ixxeden"},"content":"import duke.TasksType.Task;","lastModifiedDate":"2023-04-10"},{"lineNumber":5,"author":{"gitId":"ixxeden"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-04-10"},{"lineNumber":6,"author":{"gitId":"ixxeden"},"content":"import duke.TasksType.Todo;","lastModifiedDate":"2023-04-10"},{"lineNumber":7,"author":{"gitId":"ixxeden"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-04-10"},{"lineNumber":8,"author":{"gitId":"ixxeden"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-04-10"},{"lineNumber":9,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":10,"author":{"gitId":"ixxeden"},"content":"public class TaskListTest {","lastModifiedDate":"2023-04-10"},{"lineNumber":11,"author":{"gitId":"ixxeden"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":12,"author":{"gitId":"ixxeden"},"content":"     * Tests the TaskList class, setPriority() method","lastModifiedDate":"2023-04-14"},{"lineNumber":13,"author":{"gitId":"ixxeden"},"content":"     * When user changes the priorityLevel of the task,","lastModifiedDate":"2023-04-10"},{"lineNumber":14,"author":{"gitId":"ixxeden"},"content":"     * the correct priorityLevel will be stored","lastModifiedDate":"2023-04-10"},{"lineNumber":15,"author":{"gitId":"ixxeden"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":16,"author":{"gitId":"ixxeden"},"content":"    @Test","lastModifiedDate":"2023-04-10"},{"lineNumber":17,"author":{"gitId":"ixxeden"},"content":"    public void changePriorityTest(){","lastModifiedDate":"2023-04-10"},{"lineNumber":18,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":19,"author":{"gitId":"ixxeden"},"content":"        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-04-10"},{"lineNumber":20,"author":{"gitId":"ixxeden"},"content":"        Task task \u003d new Todo(\"Eat dinner\");","lastModifiedDate":"2023-04-10"},{"lineNumber":21,"author":{"gitId":"ixxeden"},"content":"        list.add(task);","lastModifiedDate":"2023-04-10"},{"lineNumber":22,"author":{"gitId":"ixxeden"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-04-10"},{"lineNumber":23,"author":{"gitId":"ixxeden"},"content":"        taskList.storeList(list);","lastModifiedDate":"2023-04-10"},{"lineNumber":24,"author":{"gitId":"ixxeden"},"content":"        taskList.setPriority(0, Task.priorityLevel.High);","lastModifiedDate":"2023-04-10"},{"lineNumber":25,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":26,"author":{"gitId":"ixxeden"},"content":"        assertEquals(Task.priorityLevel.High, taskList.getTask(0).getPriorityLevel());","lastModifiedDate":"2023-04-10"},{"lineNumber":27,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-04-10"},{"lineNumber":28,"author":{"gitId":"ixxeden"},"content":"    /**","lastModifiedDate":"2023-04-11"},{"lineNumber":29,"author":{"gitId":"ixxeden"},"content":"     * Tests the TaskList class, addTask() method","lastModifiedDate":"2023-04-14"},{"lineNumber":30,"author":{"gitId":"ixxeden"},"content":"     * adds two tasks and asserts that the description is stored and retrieved correctly","lastModifiedDate":"2023-04-11"},{"lineNumber":31,"author":{"gitId":"ixxeden"},"content":"     */","lastModifiedDate":"2023-04-11"},{"lineNumber":32,"author":{"gitId":"ixxeden"},"content":"    @Test","lastModifiedDate":"2023-04-11"},{"lineNumber":33,"author":{"gitId":"ixxeden"},"content":"    public void addTask() {","lastModifiedDate":"2023-04-11"},{"lineNumber":34,"author":{"gitId":"ixxeden"},"content":"        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-04-11"},{"lineNumber":35,"author":{"gitId":"ixxeden"},"content":"        Task task \u003d new Todo(\"Eat dinner\");","lastModifiedDate":"2023-04-11"},{"lineNumber":36,"author":{"gitId":"ixxeden"},"content":"        list.add(task);","lastModifiedDate":"2023-04-11"},{"lineNumber":37,"author":{"gitId":"ixxeden"},"content":"        Task task2 \u003d new Todo(\"Eat breakfast\");","lastModifiedDate":"2023-04-11"},{"lineNumber":38,"author":{"gitId":"ixxeden"},"content":"        list.add(task2);","lastModifiedDate":"2023-04-11"},{"lineNumber":39,"author":{"gitId":"ixxeden"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-04-11"},{"lineNumber":40,"author":{"gitId":"ixxeden"},"content":"        taskList.storeList(list);","lastModifiedDate":"2023-04-11"},{"lineNumber":41,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-11"},{"lineNumber":42,"author":{"gitId":"ixxeden"},"content":"        assertEquals(\"Eat dinner\", taskList.getTask(0).getDescription());","lastModifiedDate":"2023-04-11"},{"lineNumber":43,"author":{"gitId":"ixxeden"},"content":"        assertEquals(\"Eat breakfast\", taskList.getTask(1).getDescription());","lastModifiedDate":"2023-04-11"},{"lineNumber":44,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-04-11"},{"lineNumber":45,"author":{"gitId":"ixxeden"},"content":"}","lastModifiedDate":"2023-04-10"}],"authorContributionMap":{"ixxeden":45}},{"path":"src/test/java/duke/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ixxeden"},"content":"package duke;","lastModifiedDate":"2023-04-10"},{"lineNumber":2,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":3,"author":{"gitId":"ixxeden"},"content":"import duke.TasksType.Task;","lastModifiedDate":"2023-04-10"},{"lineNumber":4,"author":{"gitId":"ixxeden"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-04-10"},{"lineNumber":5,"author":{"gitId":"ixxeden"},"content":"import duke.TasksType.Todo;","lastModifiedDate":"2023-04-10"},{"lineNumber":6,"author":{"gitId":"ixxeden"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-04-10"},{"lineNumber":7,"author":{"gitId":"ixxeden"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":8,"author":{"gitId":"ixxeden"},"content":"public class TodoTest {","lastModifiedDate":"2023-04-10"},{"lineNumber":9,"author":{"gitId":"ixxeden"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":10,"author":{"gitId":"ixxeden"},"content":"     * Tests on the Todo class","lastModifiedDate":"2023-04-14"},{"lineNumber":11,"author":{"gitId":"ixxeden"},"content":"     * ensures that theh task description is correctly stored into the ArrayList","lastModifiedDate":"2023-04-10"},{"lineNumber":12,"author":{"gitId":"ixxeden"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":13,"author":{"gitId":"ixxeden"},"content":"    @Test","lastModifiedDate":"2023-04-10"},{"lineNumber":14,"author":{"gitId":"ixxeden"},"content":"    public void validateTodoDescription(){","lastModifiedDate":"2023-04-10"},{"lineNumber":15,"author":{"gitId":"ixxeden"},"content":"        Task task \u003d new Todo(\"Eat lunch\");","lastModifiedDate":"2023-04-10"},{"lineNumber":16,"author":{"gitId":"ixxeden"},"content":"        assertEquals(\"Eat lunch\", task.getDescription());","lastModifiedDate":"2023-04-10"},{"lineNumber":17,"author":{"gitId":"ixxeden"},"content":"    }","lastModifiedDate":"2023-04-10"},{"lineNumber":18,"author":{"gitId":"ixxeden"},"content":"}","lastModifiedDate":"2023-04-10"}],"authorContributionMap":{"ixxeden":18}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"ixxeden"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-04-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":20,"ixxeden":1}}]
