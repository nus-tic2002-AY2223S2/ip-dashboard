[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"zzlilyzz"},"content":"# duke.Duke project template","lastModifiedDate":"2023-04-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"zzlilyzz"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-04-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"zzlilyzz":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"zzlilyzz"},"content":"    testImplementation group: \u0027org.xerial\u0027, name: \u0027sqlite-jdbc\u0027, version: \u00273.41.2.1\u0027","lastModifiedDate":"2023-04-25"},{"lineNumber":15,"author":{"gitId":"zzlilyzz"},"content":"    implementation group: \u0027org.xerial\u0027, name: \u0027sqlite-jdbc\u0027, version: \u00273.41.2.1\u0027","lastModifiedDate":"2023-04-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"zzlilyzz"},"content":"    mainClassName \u003d \"duke.Duke\"","lastModifiedDate":"2023-04-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"zzlilyzz":3,"-":40}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zzlilyzz"},"content":"package duke;","lastModifiedDate":"2023-04-22"},{"lineNumber":2,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-22"},{"lineNumber":3,"author":{"gitId":"zzlilyzz"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2023-04-22"},{"lineNumber":4,"author":{"gitId":"zzlilyzz"},"content":"import duke.util.TaskList;","lastModifiedDate":"2023-04-22"},{"lineNumber":5,"author":{"gitId":"zzlilyzz"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-04-22"},{"lineNumber":6,"author":{"gitId":"zzlilyzz"},"content":"import duke.command.Command;","lastModifiedDate":"2023-04-22"},{"lineNumber":7,"author":{"gitId":"zzlilyzz"},"content":"import duke.util.Storage;","lastModifiedDate":"2023-04-22"},{"lineNumber":8,"author":{"gitId":"zzlilyzz"},"content":"import duke.util.Parser;","lastModifiedDate":"2023-04-22"},{"lineNumber":9,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-22"},{"lineNumber":10,"author":{"gitId":"zzlilyzz"},"content":"/**","lastModifiedDate":"2023-04-24"},{"lineNumber":11,"author":{"gitId":"zzlilyzz"},"content":" * The Duke class is the main entry point for the Duke chatbot","lastModifiedDate":"2023-04-24"},{"lineNumber":12,"author":{"gitId":"zzlilyzz"},"content":" * It is responsible for initializing the UI, Storage and TaskList objects,","lastModifiedDate":"2023-04-24"},{"lineNumber":13,"author":{"gitId":"zzlilyzz"},"content":" * and running the chatbot loop until an exit command is given","lastModifiedDate":"2023-04-24"},{"lineNumber":14,"author":{"gitId":"zzlilyzz"},"content":" */","lastModifiedDate":"2023-04-24"},{"lineNumber":15,"author":{"gitId":"zzlilyzz"},"content":"public class Duke {","lastModifiedDate":"2023-04-22"},{"lineNumber":16,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-22"},{"lineNumber":17,"author":{"gitId":"zzlilyzz"},"content":"    private final Storage storage;","lastModifiedDate":"2023-04-22"},{"lineNumber":18,"author":{"gitId":"zzlilyzz"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-04-22"},{"lineNumber":19,"author":{"gitId":"zzlilyzz"},"content":"    private final Ui ui;","lastModifiedDate":"2023-04-22"},{"lineNumber":20,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-22"},{"lineNumber":21,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":22,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":23,"author":{"gitId":"zzlilyzz"},"content":"     * Constructs a new Duke object with the specified file path for storage.","lastModifiedDate":"2023-04-24"},{"lineNumber":24,"author":{"gitId":"zzlilyzz"},"content":"     * @param filePath the file path for storage","lastModifiedDate":"2023-04-24"},{"lineNumber":25,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":26,"author":{"gitId":"zzlilyzz"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2023-04-22"},{"lineNumber":27,"author":{"gitId":"zzlilyzz"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-04-22"},{"lineNumber":28,"author":{"gitId":"zzlilyzz"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2023-04-22"},{"lineNumber":29,"author":{"gitId":"zzlilyzz"},"content":"        try {","lastModifiedDate":"2023-04-22"},{"lineNumber":30,"author":{"gitId":"zzlilyzz"},"content":"            tasks \u003d storage.load();","lastModifiedDate":"2023-04-22"},{"lineNumber":31,"author":{"gitId":"zzlilyzz"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-04-22"},{"lineNumber":32,"author":{"gitId":"zzlilyzz"},"content":"            System.out.println(ui.showLoadingError());","lastModifiedDate":"2023-04-24"},{"lineNumber":33,"author":{"gitId":"zzlilyzz"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2023-04-22"},{"lineNumber":34,"author":{"gitId":"zzlilyzz"},"content":"        }","lastModifiedDate":"2023-04-22"},{"lineNumber":35,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-22"},{"lineNumber":36,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-22"},{"lineNumber":37,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":38,"author":{"gitId":"zzlilyzz"},"content":"     * Runs the Duke chatbot loop until an exit command is given.","lastModifiedDate":"2023-04-24"},{"lineNumber":39,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":40,"author":{"gitId":"zzlilyzz"},"content":"    public void run() {","lastModifiedDate":"2023-04-22"},{"lineNumber":41,"author":{"gitId":"zzlilyzz"},"content":"        System.out.println(ui.showWelcome());","lastModifiedDate":"2023-04-22"},{"lineNumber":42,"author":{"gitId":"zzlilyzz"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2023-04-22"},{"lineNumber":43,"author":{"gitId":"zzlilyzz"},"content":"        while (!isExit) {","lastModifiedDate":"2023-04-22"},{"lineNumber":44,"author":{"gitId":"zzlilyzz"},"content":"            try {","lastModifiedDate":"2023-04-22"},{"lineNumber":45,"author":{"gitId":"zzlilyzz"},"content":"                String fullCommand \u003d ui.readCommand();","lastModifiedDate":"2023-04-22"},{"lineNumber":46,"author":{"gitId":"zzlilyzz"},"content":"                System.out.println(ui.showLine());","lastModifiedDate":"2023-04-22"},{"lineNumber":47,"author":{"gitId":"zzlilyzz"},"content":"                Command c \u003d Parser.parse(fullCommand);","lastModifiedDate":"2023-04-22"},{"lineNumber":48,"author":{"gitId":"zzlilyzz"},"content":"                c.execute(tasks, ui, storage);","lastModifiedDate":"2023-04-22"},{"lineNumber":49,"author":{"gitId":"zzlilyzz"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2023-04-22"},{"lineNumber":50,"author":{"gitId":"zzlilyzz"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-04-22"},{"lineNumber":51,"author":{"gitId":"zzlilyzz"},"content":"                System.out.println(ui.showError(e.getMessage()));","lastModifiedDate":"2023-04-22"},{"lineNumber":52,"author":{"gitId":"zzlilyzz"},"content":"            } finally {","lastModifiedDate":"2023-04-22"},{"lineNumber":53,"author":{"gitId":"zzlilyzz"},"content":"                System.out.println(ui.showLine());","lastModifiedDate":"2023-04-22"},{"lineNumber":54,"author":{"gitId":"zzlilyzz"},"content":"            }","lastModifiedDate":"2023-04-22"},{"lineNumber":55,"author":{"gitId":"zzlilyzz"},"content":"        }","lastModifiedDate":"2023-04-22"},{"lineNumber":56,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-22"},{"lineNumber":57,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-22"},{"lineNumber":58,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":59,"author":{"gitId":"zzlilyzz"},"content":"     * The main method that creates a new Duke object and starts the chatbot.","lastModifiedDate":"2023-04-24"},{"lineNumber":60,"author":{"gitId":"zzlilyzz"},"content":"     * @param args he command line arguments","lastModifiedDate":"2023-04-24"},{"lineNumber":61,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":62,"author":{"gitId":"zzlilyzz"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-04-22"},{"lineNumber":63,"author":{"gitId":"zzlilyzz"},"content":"        new Duke(\"data.db\").run();","lastModifiedDate":"2023-04-25"},{"lineNumber":64,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-22"},{"lineNumber":65,"author":{"gitId":"zzlilyzz"},"content":"}","lastModifiedDate":"2023-04-22"}],"authorContributionMap":{"zzlilyzz":65}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zzlilyzz"},"content":"package duke.command;","lastModifiedDate":"2023-04-22"},{"lineNumber":2,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-22"},{"lineNumber":3,"author":{"gitId":"zzlilyzz"},"content":"import duke.util.TaskList;","lastModifiedDate":"2023-04-22"},{"lineNumber":4,"author":{"gitId":"zzlilyzz"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-04-22"},{"lineNumber":5,"author":{"gitId":"zzlilyzz"},"content":"import duke.util.Storage;","lastModifiedDate":"2023-04-22"},{"lineNumber":6,"author":{"gitId":"zzlilyzz"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2023-04-22"},{"lineNumber":7,"author":{"gitId":"zzlilyzz"},"content":"import duke.task.Task;","lastModifiedDate":"2023-04-22"},{"lineNumber":8,"author":{"gitId":"zzlilyzz"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-04-22"},{"lineNumber":9,"author":{"gitId":"zzlilyzz"},"content":"import duke.task.Event;","lastModifiedDate":"2023-04-22"},{"lineNumber":10,"author":{"gitId":"zzlilyzz"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-04-22"},{"lineNumber":11,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-22"},{"lineNumber":12,"author":{"gitId":"zzlilyzz"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-04-23"},{"lineNumber":13,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-23"},{"lineNumber":14,"author":{"gitId":"zzlilyzz"},"content":"/**","lastModifiedDate":"2023-04-24"},{"lineNumber":15,"author":{"gitId":"zzlilyzz"},"content":" * Command class represents the commands issued by the user.","lastModifiedDate":"2023-04-24"},{"lineNumber":16,"author":{"gitId":"zzlilyzz"},"content":" */","lastModifiedDate":"2023-04-24"},{"lineNumber":17,"author":{"gitId":"zzlilyzz"},"content":"public class Command {","lastModifiedDate":"2023-04-21"},{"lineNumber":18,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":19,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":20,"author":{"gitId":"zzlilyzz"},"content":"     * An enumeration of possible command types.","lastModifiedDate":"2023-04-24"},{"lineNumber":21,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":22,"author":{"gitId":"zzlilyzz"},"content":"    public enum CommandType {","lastModifiedDate":"2023-04-21"},{"lineNumber":23,"author":{"gitId":"zzlilyzz"},"content":"        BYE, LIST, MARK, DELETE, TODO, DEADLINE, EVENT, UNMARK, FIND, HELP, DUE","lastModifiedDate":"2023-04-23"},{"lineNumber":24,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-21"},{"lineNumber":25,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-21"},{"lineNumber":26,"author":{"gitId":"zzlilyzz"},"content":"    private final CommandType command;","lastModifiedDate":"2023-04-21"},{"lineNumber":27,"author":{"gitId":"zzlilyzz"},"content":"    private final String description;","lastModifiedDate":"2023-04-21"},{"lineNumber":28,"author":{"gitId":"zzlilyzz"},"content":"    private final LocalDateTime startTime;","lastModifiedDate":"2023-04-23"},{"lineNumber":29,"author":{"gitId":"zzlilyzz"},"content":"    private final LocalDateTime endTime;","lastModifiedDate":"2023-04-23"},{"lineNumber":30,"author":{"gitId":"zzlilyzz"},"content":"    private final int index;","lastModifiedDate":"2023-04-21"},{"lineNumber":31,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":32,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":33,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":34,"author":{"gitId":"zzlilyzz"},"content":"     * Constructs a new Command object with the given command type, end time","lastModifiedDate":"2023-04-24"},{"lineNumber":35,"author":{"gitId":"zzlilyzz"},"content":"     * @param command the description of task","lastModifiedDate":"2023-04-24"},{"lineNumber":36,"author":{"gitId":"zzlilyzz"},"content":"     * @param endTime the end time of task","lastModifiedDate":"2023-04-24"},{"lineNumber":37,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":38,"author":{"gitId":"zzlilyzz"},"content":"    public Command(CommandType command, LocalDateTime endTime) {","lastModifiedDate":"2023-04-23"},{"lineNumber":39,"author":{"gitId":"zzlilyzz"},"content":"        this.command \u003d command;","lastModifiedDate":"2023-04-23"},{"lineNumber":40,"author":{"gitId":"zzlilyzz"},"content":"        this.description \u003d null;","lastModifiedDate":"2023-04-23"},{"lineNumber":41,"author":{"gitId":"zzlilyzz"},"content":"        this.startTime \u003d null;","lastModifiedDate":"2023-04-23"},{"lineNumber":42,"author":{"gitId":"zzlilyzz"},"content":"        this.endTime \u003d endTime;","lastModifiedDate":"2023-04-23"},{"lineNumber":43,"author":{"gitId":"zzlilyzz"},"content":"        this.index \u003d -1;","lastModifiedDate":"2023-04-23"},{"lineNumber":44,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-23"},{"lineNumber":45,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-21"},{"lineNumber":46,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":47,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":48,"author":{"gitId":"zzlilyzz"},"content":"     * Constructs a new Command object with the given command type, description, start time, and end time.","lastModifiedDate":"2023-04-24"},{"lineNumber":49,"author":{"gitId":"zzlilyzz"},"content":"     * @param command the command type","lastModifiedDate":"2023-04-24"},{"lineNumber":50,"author":{"gitId":"zzlilyzz"},"content":"     * @param description the task description","lastModifiedDate":"2023-04-24"},{"lineNumber":51,"author":{"gitId":"zzlilyzz"},"content":"     * @param startTime task start time","lastModifiedDate":"2023-04-24"},{"lineNumber":52,"author":{"gitId":"zzlilyzz"},"content":"     * @param endTime task end time","lastModifiedDate":"2023-04-24"},{"lineNumber":53,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":54,"author":{"gitId":"zzlilyzz"},"content":"    public Command(CommandType command, String description, LocalDateTime startTime, LocalDateTime endTime) {","lastModifiedDate":"2023-04-23"},{"lineNumber":55,"author":{"gitId":"zzlilyzz"},"content":"        this.command \u003d command;","lastModifiedDate":"2023-04-21"},{"lineNumber":56,"author":{"gitId":"zzlilyzz"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-04-21"},{"lineNumber":57,"author":{"gitId":"zzlilyzz"},"content":"        this.startTime \u003d startTime;","lastModifiedDate":"2023-04-21"},{"lineNumber":58,"author":{"gitId":"zzlilyzz"},"content":"        this.endTime \u003d endTime;","lastModifiedDate":"2023-04-21"},{"lineNumber":59,"author":{"gitId":"zzlilyzz"},"content":"        this.index \u003d -1;","lastModifiedDate":"2023-04-21"},{"lineNumber":60,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-21"},{"lineNumber":61,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-21"},{"lineNumber":62,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":63,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":64,"author":{"gitId":"zzlilyzz"},"content":"     * Constructs a new Command object with the given command type, description, and start time.","lastModifiedDate":"2023-04-24"},{"lineNumber":65,"author":{"gitId":"zzlilyzz"},"content":"     * @param command the command type","lastModifiedDate":"2023-04-24"},{"lineNumber":66,"author":{"gitId":"zzlilyzz"},"content":"     * @param description the description of task","lastModifiedDate":"2023-04-24"},{"lineNumber":67,"author":{"gitId":"zzlilyzz"},"content":"     * @param startTime the start time of task","lastModifiedDate":"2023-04-24"},{"lineNumber":68,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":69,"author":{"gitId":"zzlilyzz"},"content":"    public Command(CommandType command, String description, LocalDateTime startTime) {","lastModifiedDate":"2023-04-23"},{"lineNumber":70,"author":{"gitId":"zzlilyzz"},"content":"        this.command \u003d command;","lastModifiedDate":"2023-04-21"},{"lineNumber":71,"author":{"gitId":"zzlilyzz"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-04-21"},{"lineNumber":72,"author":{"gitId":"zzlilyzz"},"content":"        this.startTime \u003d startTime;","lastModifiedDate":"2023-04-21"},{"lineNumber":73,"author":{"gitId":"zzlilyzz"},"content":"        this.endTime \u003d null;","lastModifiedDate":"2023-04-23"},{"lineNumber":74,"author":{"gitId":"zzlilyzz"},"content":"        this.index \u003d -1;","lastModifiedDate":"2023-04-21"},{"lineNumber":75,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-21"},{"lineNumber":76,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-21"},{"lineNumber":77,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":78,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":79,"author":{"gitId":"zzlilyzz"},"content":"     *Constructs a new Command object with the given command type and description.","lastModifiedDate":"2023-04-24"},{"lineNumber":80,"author":{"gitId":"zzlilyzz"},"content":"     * @param command the command type","lastModifiedDate":"2023-04-24"},{"lineNumber":81,"author":{"gitId":"zzlilyzz"},"content":"     * @param description the description of task","lastModifiedDate":"2023-04-24"},{"lineNumber":82,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":83,"author":{"gitId":"zzlilyzz"},"content":"    public Command(CommandType command, String description) {","lastModifiedDate":"2023-04-21"},{"lineNumber":84,"author":{"gitId":"zzlilyzz"},"content":"        this.command \u003d command;","lastModifiedDate":"2023-04-21"},{"lineNumber":85,"author":{"gitId":"zzlilyzz"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-04-21"},{"lineNumber":86,"author":{"gitId":"zzlilyzz"},"content":"        this.startTime \u003d null;","lastModifiedDate":"2023-04-23"},{"lineNumber":87,"author":{"gitId":"zzlilyzz"},"content":"        this.endTime \u003d null;","lastModifiedDate":"2023-04-23"},{"lineNumber":88,"author":{"gitId":"zzlilyzz"},"content":"        this.index \u003d -1;","lastModifiedDate":"2023-04-21"},{"lineNumber":89,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-21"},{"lineNumber":90,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-21"},{"lineNumber":91,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":92,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":93,"author":{"gitId":"zzlilyzz"},"content":"     * Constructs a new Command object with the given command type.","lastModifiedDate":"2023-04-24"},{"lineNumber":94,"author":{"gitId":"zzlilyzz"},"content":"     * @param command the command type","lastModifiedDate":"2023-04-24"},{"lineNumber":95,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":96,"author":{"gitId":"zzlilyzz"},"content":"    public Command(CommandType command) {","lastModifiedDate":"2023-04-21"},{"lineNumber":97,"author":{"gitId":"zzlilyzz"},"content":"        this.command \u003d command;","lastModifiedDate":"2023-04-21"},{"lineNumber":98,"author":{"gitId":"zzlilyzz"},"content":"        this.description \u003d null;","lastModifiedDate":"2023-04-23"},{"lineNumber":99,"author":{"gitId":"zzlilyzz"},"content":"        this.startTime \u003d null;","lastModifiedDate":"2023-04-23"},{"lineNumber":100,"author":{"gitId":"zzlilyzz"},"content":"        this.endTime \u003d null;","lastModifiedDate":"2023-04-23"},{"lineNumber":101,"author":{"gitId":"zzlilyzz"},"content":"        this.index \u003d -1;","lastModifiedDate":"2023-04-21"},{"lineNumber":102,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-21"},{"lineNumber":103,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-21"},{"lineNumber":104,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":105,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":106,"author":{"gitId":"zzlilyzz"},"content":"     * Constructs a new Command object with the given command type and task index.","lastModifiedDate":"2023-04-24"},{"lineNumber":107,"author":{"gitId":"zzlilyzz"},"content":"     * @param command the command type","lastModifiedDate":"2023-04-24"},{"lineNumber":108,"author":{"gitId":"zzlilyzz"},"content":"     * @param index the task index","lastModifiedDate":"2023-04-24"},{"lineNumber":109,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":110,"author":{"gitId":"zzlilyzz"},"content":"    public Command(CommandType command, int index) {","lastModifiedDate":"2023-04-21"},{"lineNumber":111,"author":{"gitId":"zzlilyzz"},"content":"        this.command \u003d command;","lastModifiedDate":"2023-04-21"},{"lineNumber":112,"author":{"gitId":"zzlilyzz"},"content":"        this.description \u003d null;","lastModifiedDate":"2023-04-23"},{"lineNumber":113,"author":{"gitId":"zzlilyzz"},"content":"        this.startTime \u003d null;","lastModifiedDate":"2023-04-23"},{"lineNumber":114,"author":{"gitId":"zzlilyzz"},"content":"        this.endTime \u003d null;","lastModifiedDate":"2023-04-23"},{"lineNumber":115,"author":{"gitId":"zzlilyzz"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-04-21"},{"lineNumber":116,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-21"},{"lineNumber":117,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-21"},{"lineNumber":118,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-22"},{"lineNumber":119,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":120,"author":{"gitId":"zzlilyzz"},"content":"     * Returns true if the command is of type BYE, indicating that the program should exit.","lastModifiedDate":"2023-04-24"},{"lineNumber":121,"author":{"gitId":"zzlilyzz"},"content":"     * @return true if the command is of type BYE, false otherwise","lastModifiedDate":"2023-04-24"},{"lineNumber":122,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":123,"author":{"gitId":"zzlilyzz"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-04-21"},{"lineNumber":124,"author":{"gitId":"zzlilyzz"},"content":"        return this.command.equals(CommandType.BYE);","lastModifiedDate":"2023-04-21"},{"lineNumber":125,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-21"},{"lineNumber":126,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-21"},{"lineNumber":127,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":128,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":129,"author":{"gitId":"zzlilyzz"},"content":"     * Executes the command on the given task list, UI, and storage objects.","lastModifiedDate":"2023-04-24"},{"lineNumber":130,"author":{"gitId":"zzlilyzz"},"content":"     * @param tasks  TaskList object to execute the command on","lastModifiedDate":"2023-04-24"},{"lineNumber":131,"author":{"gitId":"zzlilyzz"},"content":"     * @param ui ui the UI object to interact with the user","lastModifiedDate":"2023-04-24"},{"lineNumber":132,"author":{"gitId":"zzlilyzz"},"content":"     * @param storage the storage object","lastModifiedDate":"2023-04-24"},{"lineNumber":133,"author":{"gitId":"zzlilyzz"},"content":"     * @throws DukeException if any errors occur during the execution of the command","lastModifiedDate":"2023-04-24"},{"lineNumber":134,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":135,"author":{"gitId":"zzlilyzz"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-04-22"},{"lineNumber":136,"author":{"gitId":"zzlilyzz"},"content":"        switch (this.command) {","lastModifiedDate":"2023-04-21"},{"lineNumber":137,"author":{"gitId":"zzlilyzz"},"content":"            case BYE:","lastModifiedDate":"2023-04-21"},{"lineNumber":138,"author":{"gitId":"zzlilyzz"},"content":"                storage.save(tasks);","lastModifiedDate":"2023-04-22"},{"lineNumber":139,"author":{"gitId":"zzlilyzz"},"content":"                System.out.println(ui.showBye());","lastModifiedDate":"2023-04-21"},{"lineNumber":140,"author":{"gitId":"zzlilyzz"},"content":"                break;","lastModifiedDate":"2023-04-21"},{"lineNumber":141,"author":{"gitId":"zzlilyzz"},"content":"            case LIST:","lastModifiedDate":"2023-04-21"},{"lineNumber":142,"author":{"gitId":"zzlilyzz"},"content":"                System.out.println(ui.showList(tasks));","lastModifiedDate":"2023-04-21"},{"lineNumber":143,"author":{"gitId":"zzlilyzz"},"content":"                break;","lastModifiedDate":"2023-04-21"},{"lineNumber":144,"author":{"gitId":"zzlilyzz"},"content":"            case MARK:","lastModifiedDate":"2023-04-22"},{"lineNumber":145,"author":{"gitId":"zzlilyzz"},"content":"                try {","lastModifiedDate":"2023-04-22"},{"lineNumber":146,"author":{"gitId":"zzlilyzz"},"content":"                    Task task \u003d tasks.markDone(this.index - 1);","lastModifiedDate":"2023-04-22"},{"lineNumber":147,"author":{"gitId":"zzlilyzz"},"content":"                    System.out.println(ui.showDone(tasks, task.toString()));","lastModifiedDate":"2023-04-21"},{"lineNumber":148,"author":{"gitId":"zzlilyzz"},"content":"                } catch (DukeException e) {","lastModifiedDate":"2023-04-22"},{"lineNumber":149,"author":{"gitId":"zzlilyzz"},"content":"                    System.out.println(e.getMessage());","lastModifiedDate":"2023-04-22"},{"lineNumber":150,"author":{"gitId":"zzlilyzz"},"content":"                }","lastModifiedDate":"2023-04-22"},{"lineNumber":151,"author":{"gitId":"zzlilyzz"},"content":"                break;","lastModifiedDate":"2023-04-21"},{"lineNumber":152,"author":{"gitId":"zzlilyzz"},"content":"            case UNMARK:","lastModifiedDate":"2023-04-22"},{"lineNumber":153,"author":{"gitId":"zzlilyzz"},"content":"                try {","lastModifiedDate":"2023-04-22"},{"lineNumber":154,"author":{"gitId":"zzlilyzz"},"content":"                    Task task \u003d tasks.markUndone(this.index - 1);","lastModifiedDate":"2023-04-22"},{"lineNumber":155,"author":{"gitId":"zzlilyzz"},"content":"                    System.out.println(ui.showUndone(tasks, task.toString()));","lastModifiedDate":"2023-04-21"},{"lineNumber":156,"author":{"gitId":"zzlilyzz"},"content":"                } catch (DukeException e) {","lastModifiedDate":"2023-04-22"},{"lineNumber":157,"author":{"gitId":"zzlilyzz"},"content":"                    System.out.println(e.getMessage());","lastModifiedDate":"2023-04-22"},{"lineNumber":158,"author":{"gitId":"zzlilyzz"},"content":"                }","lastModifiedDate":"2023-04-22"},{"lineNumber":159,"author":{"gitId":"zzlilyzz"},"content":"                break;","lastModifiedDate":"2023-04-21"},{"lineNumber":160,"author":{"gitId":"zzlilyzz"},"content":"            case DELETE:","lastModifiedDate":"2023-04-21"},{"lineNumber":161,"author":{"gitId":"zzlilyzz"},"content":"                try {","lastModifiedDate":"2023-04-22"},{"lineNumber":162,"author":{"gitId":"zzlilyzz"},"content":"                    Task task \u003d tasks.deleteTask(this.index - 1);","lastModifiedDate":"2023-04-22"},{"lineNumber":163,"author":{"gitId":"zzlilyzz"},"content":"                    System.out.println(ui.showDelete(tasks, task.toString()));","lastModifiedDate":"2023-04-21"},{"lineNumber":164,"author":{"gitId":"zzlilyzz"},"content":"                } catch (DukeException e) {","lastModifiedDate":"2023-04-22"},{"lineNumber":165,"author":{"gitId":"zzlilyzz"},"content":"                    System.out.println(e.getMessage());","lastModifiedDate":"2023-04-22"},{"lineNumber":166,"author":{"gitId":"zzlilyzz"},"content":"                }","lastModifiedDate":"2023-04-22"},{"lineNumber":167,"author":{"gitId":"zzlilyzz"},"content":"                break;","lastModifiedDate":"2023-04-21"},{"lineNumber":168,"author":{"gitId":"zzlilyzz"},"content":"            case TODO:","lastModifiedDate":"2023-04-21"},{"lineNumber":169,"author":{"gitId":"zzlilyzz"},"content":"                Task todo \u003d new Todo(this.description);","lastModifiedDate":"2023-04-21"},{"lineNumber":170,"author":{"gitId":"zzlilyzz"},"content":"                tasks.addTask(todo);","lastModifiedDate":"2023-04-21"},{"lineNumber":171,"author":{"gitId":"zzlilyzz"},"content":"                System.out.println(ui.showAdd(tasks, todo.toString()));","lastModifiedDate":"2023-04-21"},{"lineNumber":172,"author":{"gitId":"zzlilyzz"},"content":"                break;","lastModifiedDate":"2023-04-21"},{"lineNumber":173,"author":{"gitId":"zzlilyzz"},"content":"            case DEADLINE:","lastModifiedDate":"2023-04-21"},{"lineNumber":174,"author":{"gitId":"zzlilyzz"},"content":"                Task deadlineTask \u003d new Deadline(description, startTime);","lastModifiedDate":"2023-04-21"},{"lineNumber":175,"author":{"gitId":"zzlilyzz"},"content":"                tasks.addTask(deadlineTask);","lastModifiedDate":"2023-04-21"},{"lineNumber":176,"author":{"gitId":"zzlilyzz"},"content":"                System.out.println(ui.showAdd(tasks, deadlineTask.toString()));","lastModifiedDate":"2023-04-21"},{"lineNumber":177,"author":{"gitId":"zzlilyzz"},"content":"                break;","lastModifiedDate":"2023-04-21"},{"lineNumber":178,"author":{"gitId":"zzlilyzz"},"content":"            case EVENT:","lastModifiedDate":"2023-04-21"},{"lineNumber":179,"author":{"gitId":"zzlilyzz"},"content":"                Task eventTask \u003d new Event(description, startTime, endTime);","lastModifiedDate":"2023-04-21"},{"lineNumber":180,"author":{"gitId":"zzlilyzz"},"content":"                tasks.addTask(eventTask);","lastModifiedDate":"2023-04-21"},{"lineNumber":181,"author":{"gitId":"zzlilyzz"},"content":"                System.out.println(ui.showAdd(tasks, eventTask.toString()));","lastModifiedDate":"2023-04-21"},{"lineNumber":182,"author":{"gitId":"zzlilyzz"},"content":"                break;","lastModifiedDate":"2023-04-21"},{"lineNumber":183,"author":{"gitId":"zzlilyzz"},"content":"            case HELP:","lastModifiedDate":"2023-04-21"},{"lineNumber":184,"author":{"gitId":"zzlilyzz"},"content":"                System.out.println(ui.showHelp());","lastModifiedDate":"2023-04-21"},{"lineNumber":185,"author":{"gitId":"zzlilyzz"},"content":"                break;","lastModifiedDate":"2023-04-21"},{"lineNumber":186,"author":{"gitId":"zzlilyzz"},"content":"            case DUE:","lastModifiedDate":"2023-04-23"},{"lineNumber":187,"author":{"gitId":"zzlilyzz"},"content":"                System.out.println(ui.showDue(tasks, endTime));","lastModifiedDate":"2023-04-23"},{"lineNumber":188,"author":{"gitId":"zzlilyzz"},"content":"                break;","lastModifiedDate":"2023-04-23"},{"lineNumber":189,"author":{"gitId":"zzlilyzz"},"content":"            case FIND:","lastModifiedDate":"2023-04-23"},{"lineNumber":190,"author":{"gitId":"zzlilyzz"},"content":"                System.out.println(ui.showFind(tasks, description));","lastModifiedDate":"2023-04-23"},{"lineNumber":191,"author":{"gitId":"zzlilyzz"},"content":"                break;","lastModifiedDate":"2023-04-23"},{"lineNumber":192,"author":{"gitId":"zzlilyzz"},"content":"            default:","lastModifiedDate":"2023-04-21"},{"lineNumber":193,"author":{"gitId":"zzlilyzz"},"content":"                System.out.println(ui.showInvalid());","lastModifiedDate":"2023-04-21"},{"lineNumber":194,"author":{"gitId":"zzlilyzz"},"content":"                break;","lastModifiedDate":"2023-04-21"},{"lineNumber":195,"author":{"gitId":"zzlilyzz"},"content":"        }","lastModifiedDate":"2023-04-21"},{"lineNumber":196,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-21"},{"lineNumber":197,"author":{"gitId":"zzlilyzz"},"content":"}","lastModifiedDate":"2023-04-21"},{"lineNumber":198,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-22"}],"authorContributionMap":{"zzlilyzz":198}},{"path":"src/main/java/duke/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zzlilyzz"},"content":"package duke.exceptions;","lastModifiedDate":"2023-04-22"},{"lineNumber":2,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-22"},{"lineNumber":3,"author":{"gitId":"zzlilyzz"},"content":"/**","lastModifiedDate":"2023-04-24"},{"lineNumber":4,"author":{"gitId":"zzlilyzz"},"content":" * A custom exception class for Duke application.","lastModifiedDate":"2023-04-24"},{"lineNumber":5,"author":{"gitId":"zzlilyzz"},"content":" * DukeException is thrown to indicate that there is an error specific to Duke application.","lastModifiedDate":"2023-04-24"},{"lineNumber":6,"author":{"gitId":"zzlilyzz"},"content":" */","lastModifiedDate":"2023-04-24"},{"lineNumber":7,"author":{"gitId":"zzlilyzz"},"content":"public class DukeException extends Exception{","lastModifiedDate":"2023-04-22"},{"lineNumber":8,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":9,"author":{"gitId":"zzlilyzz"},"content":"     * Constructs a DukeException with the specified error message","lastModifiedDate":"2023-04-24"},{"lineNumber":10,"author":{"gitId":"zzlilyzz"},"content":"     * @param message the error message","lastModifiedDate":"2023-04-24"},{"lineNumber":11,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":12,"author":{"gitId":"zzlilyzz"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-04-22"},{"lineNumber":13,"author":{"gitId":"zzlilyzz"},"content":"        super(message);","lastModifiedDate":"2023-04-22"},{"lineNumber":14,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-22"},{"lineNumber":15,"author":{"gitId":"zzlilyzz"},"content":"}","lastModifiedDate":"2023-04-22"}],"authorContributionMap":{"zzlilyzz":15}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zzlilyzz"},"content":"package duke.task;","lastModifiedDate":"2023-04-22"},{"lineNumber":2,"author":{"gitId":"zzlilyzz"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-04-23"},{"lineNumber":3,"author":{"gitId":"zzlilyzz"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-04-23"},{"lineNumber":4,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":5,"author":{"gitId":"zzlilyzz"},"content":"/**","lastModifiedDate":"2023-04-24"},{"lineNumber":6,"author":{"gitId":"zzlilyzz"},"content":" * Deadline Class is used to represent a task which has deadline that extends Task Class","lastModifiedDate":"2023-04-24"},{"lineNumber":7,"author":{"gitId":"zzlilyzz"},"content":" */","lastModifiedDate":"2023-04-24"},{"lineNumber":8,"author":{"gitId":"zzlilyzz"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-04-21"},{"lineNumber":9,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":10,"author":{"gitId":"zzlilyzz"},"content":"     * The due date and time of the deadline task.","lastModifiedDate":"2023-04-24"},{"lineNumber":11,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":12,"author":{"gitId":"zzlilyzz"},"content":"    private final LocalDateTime by;","lastModifiedDate":"2023-04-23"},{"lineNumber":13,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":14,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":15,"author":{"gitId":"zzlilyzz"},"content":"     * Constructs a deadline task with the given description and due date and time","lastModifiedDate":"2023-04-24"},{"lineNumber":16,"author":{"gitId":"zzlilyzz"},"content":"     * @param description the description of task","lastModifiedDate":"2023-04-24"},{"lineNumber":17,"author":{"gitId":"zzlilyzz"},"content":"     * @param by the deadline date and time","lastModifiedDate":"2023-04-24"},{"lineNumber":18,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":19,"author":{"gitId":"zzlilyzz"},"content":"    public Deadline(String description, LocalDateTime by) {","lastModifiedDate":"2023-04-23"},{"lineNumber":20,"author":{"gitId":"zzlilyzz"},"content":"        super(description);","lastModifiedDate":"2023-04-21"},{"lineNumber":21,"author":{"gitId":"zzlilyzz"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-04-21"},{"lineNumber":22,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-21"},{"lineNumber":23,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-21"},{"lineNumber":24,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":25,"author":{"gitId":"zzlilyzz"},"content":"     * Returns a string representation of the deadline task.","lastModifiedDate":"2023-04-24"},{"lineNumber":26,"author":{"gitId":"zzlilyzz"},"content":"     * The string contains the task type icon, the description of the task,","lastModifiedDate":"2023-04-24"},{"lineNumber":27,"author":{"gitId":"zzlilyzz"},"content":"     * and the due date and time of the task.","lastModifiedDate":"2023-04-24"},{"lineNumber":28,"author":{"gitId":"zzlilyzz"},"content":"     * @return a string representation of the deadline task","lastModifiedDate":"2023-04-24"},{"lineNumber":29,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":30,"author":{"gitId":"zzlilyzz"},"content":"    @Override","lastModifiedDate":"2023-04-21"},{"lineNumber":31,"author":{"gitId":"zzlilyzz"},"content":"    public String toString() {","lastModifiedDate":"2023-04-21"},{"lineNumber":32,"author":{"gitId":"zzlilyzz"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\");","lastModifiedDate":"2023-04-23"},{"lineNumber":33,"author":{"gitId":"zzlilyzz"},"content":"        return \"\\t [D]\" + super.toString() + \" (by: \" + this.by.format(formatter) + \")\";","lastModifiedDate":"2023-04-23"},{"lineNumber":34,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-21"},{"lineNumber":35,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":36,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":37,"author":{"gitId":"zzlilyzz"},"content":"     * Returns the task type of the deadline task.","lastModifiedDate":"2023-04-24"},{"lineNumber":38,"author":{"gitId":"zzlilyzz"},"content":"     * @return type of deadline task","lastModifiedDate":"2023-04-24"},{"lineNumber":39,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":40,"author":{"gitId":"zzlilyzz"},"content":"    public String getTaskType() {","lastModifiedDate":"2023-04-21"},{"lineNumber":41,"author":{"gitId":"zzlilyzz"},"content":"        return \"D\";","lastModifiedDate":"2023-04-21"},{"lineNumber":42,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-21"},{"lineNumber":43,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":44,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":45,"author":{"gitId":"zzlilyzz"},"content":"     * This is because of Deadline Class extends the Task Class, but deadline task does not have start time","lastModifiedDate":"2023-04-24"},{"lineNumber":46,"author":{"gitId":"zzlilyzz"},"content":"     * @return null","lastModifiedDate":"2023-04-24"},{"lineNumber":47,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":48,"author":{"gitId":"zzlilyzz"},"content":"    public String getTaskStartTime() {","lastModifiedDate":"2023-04-21"},{"lineNumber":49,"author":{"gitId":"zzlilyzz"},"content":"        return null;","lastModifiedDate":"2023-04-23"},{"lineNumber":50,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-21"},{"lineNumber":51,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":52,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":53,"author":{"gitId":"zzlilyzz"},"content":"     * Returns the end time of the deadline task","lastModifiedDate":"2023-04-24"},{"lineNumber":54,"author":{"gitId":"zzlilyzz"},"content":"     * @return the end time of the deadline task","lastModifiedDate":"2023-04-24"},{"lineNumber":55,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":56,"author":{"gitId":"zzlilyzz"},"content":"    public String getTaskEndTime() {","lastModifiedDate":"2023-04-21"},{"lineNumber":57,"author":{"gitId":"zzlilyzz"},"content":"        return this.by.toString();","lastModifiedDate":"2023-04-23"},{"lineNumber":58,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-21"},{"lineNumber":59,"author":{"gitId":"zzlilyzz"},"content":"}","lastModifiedDate":"2023-04-21"}],"authorContributionMap":{"zzlilyzz":59}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zzlilyzz"},"content":"package duke.task;","lastModifiedDate":"2023-04-22"},{"lineNumber":2,"author":{"gitId":"zzlilyzz"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-04-23"},{"lineNumber":3,"author":{"gitId":"zzlilyzz"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-04-23"},{"lineNumber":4,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-21"},{"lineNumber":5,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":6,"author":{"gitId":"zzlilyzz"},"content":"/**","lastModifiedDate":"2023-04-24"},{"lineNumber":7,"author":{"gitId":"zzlilyzz"},"content":" * The Event Class is used to represent an event task which has description, start time and end time.","lastModifiedDate":"2023-04-24"},{"lineNumber":8,"author":{"gitId":"zzlilyzz"},"content":" * Event Class extends Task Class","lastModifiedDate":"2023-04-24"},{"lineNumber":9,"author":{"gitId":"zzlilyzz"},"content":" */","lastModifiedDate":"2023-04-24"},{"lineNumber":10,"author":{"gitId":"zzlilyzz"},"content":"public class Event extends Task {","lastModifiedDate":"2023-04-21"},{"lineNumber":11,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":12,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":13,"author":{"gitId":"zzlilyzz"},"content":"     * The start time of event task","lastModifiedDate":"2023-04-24"},{"lineNumber":14,"author":{"gitId":"zzlilyzz"},"content":"     * The end time of event task","lastModifiedDate":"2023-04-24"},{"lineNumber":15,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":16,"author":{"gitId":"zzlilyzz"},"content":"    private final LocalDateTime start_time;","lastModifiedDate":"2023-04-23"},{"lineNumber":17,"author":{"gitId":"zzlilyzz"},"content":"    private final LocalDateTime end_time;","lastModifiedDate":"2023-04-23"},{"lineNumber":18,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":19,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":20,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":21,"author":{"gitId":"zzlilyzz"},"content":"     * Constructs a new Event object with the specified description, start time and end time.","lastModifiedDate":"2023-04-24"},{"lineNumber":22,"author":{"gitId":"zzlilyzz"},"content":"     * @param description the description of task","lastModifiedDate":"2023-04-24"},{"lineNumber":23,"author":{"gitId":"zzlilyzz"},"content":"     * @param start_time the task time of task","lastModifiedDate":"2023-04-24"},{"lineNumber":24,"author":{"gitId":"zzlilyzz"},"content":"     * @param end_time the end time of task","lastModifiedDate":"2023-04-24"},{"lineNumber":25,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":26,"author":{"gitId":"zzlilyzz"},"content":"    public Event(String description, LocalDateTime start_time, LocalDateTime end_time) {","lastModifiedDate":"2023-04-23"},{"lineNumber":27,"author":{"gitId":"zzlilyzz"},"content":"        super(description);","lastModifiedDate":"2023-04-21"},{"lineNumber":28,"author":{"gitId":"zzlilyzz"},"content":"        this.start_time \u003d start_time;","lastModifiedDate":"2023-04-21"},{"lineNumber":29,"author":{"gitId":"zzlilyzz"},"content":"        this.end_time \u003d end_time;","lastModifiedDate":"2023-04-21"},{"lineNumber":30,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-21"},{"lineNumber":31,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-21"},{"lineNumber":32,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":33,"author":{"gitId":"zzlilyzz"},"content":"     * Return a string represent the event task details with icon,status, description, date and time","lastModifiedDate":"2023-04-24"},{"lineNumber":34,"author":{"gitId":"zzlilyzz"},"content":"     * @return a string representation of the event task.","lastModifiedDate":"2023-04-24"},{"lineNumber":35,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":36,"author":{"gitId":"zzlilyzz"},"content":"    @Override","lastModifiedDate":"2023-04-24"},{"lineNumber":37,"author":{"gitId":"zzlilyzz"},"content":"    public String toString() {","lastModifiedDate":"2023-04-21"},{"lineNumber":38,"author":{"gitId":"zzlilyzz"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\");","lastModifiedDate":"2023-04-23"},{"lineNumber":39,"author":{"gitId":"zzlilyzz"},"content":"        return \"\\t [E]\" + super.toString() + \" (From: \" + this.start_time.format(formatter) + \" to \" + this.end_time.format(formatter) + \")\";","lastModifiedDate":"2023-04-23"},{"lineNumber":40,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-21"},{"lineNumber":41,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":42,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":43,"author":{"gitId":"zzlilyzz"},"content":"     * Return the task type of event task","lastModifiedDate":"2023-04-24"},{"lineNumber":44,"author":{"gitId":"zzlilyzz"},"content":"     * @return \"E\"","lastModifiedDate":"2023-04-24"},{"lineNumber":45,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":46,"author":{"gitId":"zzlilyzz"},"content":"    public String getTaskType() {","lastModifiedDate":"2023-04-21"},{"lineNumber":47,"author":{"gitId":"zzlilyzz"},"content":"        return \"E\";","lastModifiedDate":"2023-04-21"},{"lineNumber":48,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-21"},{"lineNumber":49,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":50,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":51,"author":{"gitId":"zzlilyzz"},"content":"     * Return the start time of event task","lastModifiedDate":"2023-04-24"},{"lineNumber":52,"author":{"gitId":"zzlilyzz"},"content":"     * @return start_time variable of event task","lastModifiedDate":"2023-04-24"},{"lineNumber":53,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":54,"author":{"gitId":"zzlilyzz"},"content":"    public String getTaskStartTime() {","lastModifiedDate":"2023-04-21"},{"lineNumber":55,"author":{"gitId":"zzlilyzz"},"content":"        return this.start_time.toString();","lastModifiedDate":"2023-04-23"},{"lineNumber":56,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-21"},{"lineNumber":57,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":58,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":59,"author":{"gitId":"zzlilyzz"},"content":"     * Return the end time of event task","lastModifiedDate":"2023-04-24"},{"lineNumber":60,"author":{"gitId":"zzlilyzz"},"content":"     * @return end_time variable of event task","lastModifiedDate":"2023-04-24"},{"lineNumber":61,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":62,"author":{"gitId":"zzlilyzz"},"content":"    public String getTaskEndTime() {","lastModifiedDate":"2023-04-21"},{"lineNumber":63,"author":{"gitId":"zzlilyzz"},"content":"        return this.end_time.toString();","lastModifiedDate":"2023-04-23"},{"lineNumber":64,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-21"},{"lineNumber":65,"author":{"gitId":"zzlilyzz"},"content":"}","lastModifiedDate":"2023-04-21"}],"authorContributionMap":{"zzlilyzz":65}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zzlilyzz"},"content":"package duke.task;","lastModifiedDate":"2023-04-22"},{"lineNumber":2,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-21"},{"lineNumber":3,"author":{"gitId":"zzlilyzz"},"content":"/**","lastModifiedDate":"2023-04-24"},{"lineNumber":4,"author":{"gitId":"zzlilyzz"},"content":" * This is an abstract class representing a task.","lastModifiedDate":"2023-04-24"},{"lineNumber":5,"author":{"gitId":"zzlilyzz"},"content":" */","lastModifiedDate":"2023-04-24"},{"lineNumber":6,"author":{"gitId":"zzlilyzz"},"content":"public abstract class Task {","lastModifiedDate":"2023-04-21"},{"lineNumber":7,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":8,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":9,"author":{"gitId":"zzlilyzz"},"content":"     * The description of the task.","lastModifiedDate":"2023-04-24"},{"lineNumber":10,"author":{"gitId":"zzlilyzz"},"content":"     * The status of the task (done/undone).","lastModifiedDate":"2023-04-24"},{"lineNumber":11,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":12,"author":{"gitId":"zzlilyzz"},"content":"    private final String description;","lastModifiedDate":"2023-04-21"},{"lineNumber":13,"author":{"gitId":"zzlilyzz"},"content":"    private boolean isDone;","lastModifiedDate":"2023-04-21"},{"lineNumber":14,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-17"},{"lineNumber":15,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":16,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":17,"author":{"gitId":"zzlilyzz"},"content":"     * Constructs a Task object with the given description and sets its status to undone.","lastModifiedDate":"2023-04-24"},{"lineNumber":18,"author":{"gitId":"zzlilyzz"},"content":"     * @param description the description of task","lastModifiedDate":"2023-04-24"},{"lineNumber":19,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":20,"author":{"gitId":"zzlilyzz"},"content":"    public Task(String description) {","lastModifiedDate":"2023-04-17"},{"lineNumber":21,"author":{"gitId":"zzlilyzz"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-04-17"},{"lineNumber":22,"author":{"gitId":"zzlilyzz"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-04-17"},{"lineNumber":23,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-17"},{"lineNumber":24,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-17"},{"lineNumber":25,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":26,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":27,"author":{"gitId":"zzlilyzz"},"content":"     * Return the status icon","lastModifiedDate":"2023-04-24"},{"lineNumber":28,"author":{"gitId":"zzlilyzz"},"content":"     * @return \"X\" if task is done, empty if task is undone","lastModifiedDate":"2023-04-24"},{"lineNumber":29,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":30,"author":{"gitId":"zzlilyzz"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-04-17"},{"lineNumber":31,"author":{"gitId":"zzlilyzz"},"content":"        return (isDone ? \"X\" : \" \"); // mark done duke.task with X","lastModifiedDate":"2023-04-22"},{"lineNumber":32,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-17"},{"lineNumber":33,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-17"},{"lineNumber":34,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":35,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":36,"author":{"gitId":"zzlilyzz"},"content":"     * Marks the task as done.","lastModifiedDate":"2023-04-24"},{"lineNumber":37,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":38,"author":{"gitId":"zzlilyzz"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-04-21"},{"lineNumber":39,"author":{"gitId":"zzlilyzz"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-04-17"},{"lineNumber":40,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-16"},{"lineNumber":41,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-16"},{"lineNumber":42,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":43,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":44,"author":{"gitId":"zzlilyzz"},"content":"     * Marks the task as undone.","lastModifiedDate":"2023-04-24"},{"lineNumber":45,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":46,"author":{"gitId":"zzlilyzz"},"content":"    public void markAsUndone() {","lastModifiedDate":"2023-04-21"},{"lineNumber":47,"author":{"gitId":"zzlilyzz"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-04-17"},{"lineNumber":48,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-16"},{"lineNumber":49,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-16"},{"lineNumber":50,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":51,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":52,"author":{"gitId":"zzlilyzz"},"content":"     * Returns the description of the task.","lastModifiedDate":"2023-04-24"},{"lineNumber":53,"author":{"gitId":"zzlilyzz"},"content":"     * @return task description","lastModifiedDate":"2023-04-24"},{"lineNumber":54,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":55,"author":{"gitId":"zzlilyzz"},"content":"    public String getDescription() {","lastModifiedDate":"2023-04-21"},{"lineNumber":56,"author":{"gitId":"zzlilyzz"},"content":"        return this.description;","lastModifiedDate":"2023-04-21"},{"lineNumber":57,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-21"},{"lineNumber":58,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-21"},{"lineNumber":59,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":60,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":61,"author":{"gitId":"zzlilyzz"},"content":"     * Returns the string representation of the task.","lastModifiedDate":"2023-04-24"},{"lineNumber":62,"author":{"gitId":"zzlilyzz"},"content":"     * @return The string representation of the task, which includes its status icon and description.","lastModifiedDate":"2023-04-24"},{"lineNumber":63,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":64,"author":{"gitId":"zzlilyzz"},"content":"    @Override","lastModifiedDate":"2023-04-17"},{"lineNumber":65,"author":{"gitId":"zzlilyzz"},"content":"    public String toString() {","lastModifiedDate":"2023-04-17"},{"lineNumber":66,"author":{"gitId":"zzlilyzz"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.getDescription();","lastModifiedDate":"2023-04-17"},{"lineNumber":67,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-16"},{"lineNumber":68,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-16"},{"lineNumber":69,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":70,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":71,"author":{"gitId":"zzlilyzz"},"content":"     * Returns the type of the task.","lastModifiedDate":"2023-04-24"},{"lineNumber":72,"author":{"gitId":"zzlilyzz"},"content":"     * @return type of task","lastModifiedDate":"2023-04-24"},{"lineNumber":73,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":74,"author":{"gitId":"zzlilyzz"},"content":"    public abstract String getTaskType();","lastModifiedDate":"2023-04-21"},{"lineNumber":75,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-21"},{"lineNumber":76,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":77,"author":{"gitId":"zzlilyzz"},"content":"     * Return the start time of task","lastModifiedDate":"2023-04-24"},{"lineNumber":78,"author":{"gitId":"zzlilyzz"},"content":"     * @return start time of task","lastModifiedDate":"2023-04-24"},{"lineNumber":79,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":80,"author":{"gitId":"zzlilyzz"},"content":"    public abstract String getTaskStartTime();","lastModifiedDate":"2023-04-21"},{"lineNumber":81,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":82,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":83,"author":{"gitId":"zzlilyzz"},"content":"     * Return the end time of task","lastModifiedDate":"2023-04-24"},{"lineNumber":84,"author":{"gitId":"zzlilyzz"},"content":"     * @return the end time of task","lastModifiedDate":"2023-04-24"},{"lineNumber":85,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":86,"author":{"gitId":"zzlilyzz"},"content":"    public abstract String getTaskEndTime();","lastModifiedDate":"2023-04-21"},{"lineNumber":87,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":88,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":89,"author":{"gitId":"zzlilyzz"},"content":"     * Returns the status of the task as a string for storage","lastModifiedDate":"2023-04-24"},{"lineNumber":90,"author":{"gitId":"zzlilyzz"},"content":"     * @return 1 for done, 0 for undone","lastModifiedDate":"2023-04-24"},{"lineNumber":91,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":92,"author":{"gitId":"zzlilyzz"},"content":"    public String getTaskStatusInString() {","lastModifiedDate":"2023-04-21"},{"lineNumber":93,"author":{"gitId":"zzlilyzz"},"content":"        return this.isDone ? \"1\" : \"0\";","lastModifiedDate":"2023-04-21"},{"lineNumber":94,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-21"},{"lineNumber":95,"author":{"gitId":"zzlilyzz"},"content":"}","lastModifiedDate":"2023-04-16"}],"authorContributionMap":{"zzlilyzz":95}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zzlilyzz"},"content":"package duke.task;","lastModifiedDate":"2023-04-22"},{"lineNumber":2,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-21"},{"lineNumber":3,"author":{"gitId":"zzlilyzz"},"content":"/**","lastModifiedDate":"2023-04-24"},{"lineNumber":4,"author":{"gitId":"zzlilyzz"},"content":" * To do Class represents a Todo task without any time constraint.","lastModifiedDate":"2023-04-24"},{"lineNumber":5,"author":{"gitId":"zzlilyzz"},"content":" * To do Class extends Task Class","lastModifiedDate":"2023-04-24"},{"lineNumber":6,"author":{"gitId":"zzlilyzz"},"content":" */","lastModifiedDate":"2023-04-24"},{"lineNumber":7,"author":{"gitId":"zzlilyzz"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-04-21"},{"lineNumber":8,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":9,"author":{"gitId":"zzlilyzz"},"content":"     * Constructor for the Todo class","lastModifiedDate":"2023-04-24"},{"lineNumber":10,"author":{"gitId":"zzlilyzz"},"content":"     * @param description the description of task","lastModifiedDate":"2023-04-24"},{"lineNumber":11,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":12,"author":{"gitId":"zzlilyzz"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-04-21"},{"lineNumber":13,"author":{"gitId":"zzlilyzz"},"content":"        super(description);","lastModifiedDate":"2023-04-21"},{"lineNumber":14,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-21"},{"lineNumber":15,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-21"},{"lineNumber":16,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":17,"author":{"gitId":"zzlilyzz"},"content":"     * Overrides the toString method of the Task class to add the task type","lastModifiedDate":"2023-04-24"},{"lineNumber":18,"author":{"gitId":"zzlilyzz"},"content":"     * @return A formatted String representing the Todo task.","lastModifiedDate":"2023-04-24"},{"lineNumber":19,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":20,"author":{"gitId":"zzlilyzz"},"content":"    @Override","lastModifiedDate":"2023-04-21"},{"lineNumber":21,"author":{"gitId":"zzlilyzz"},"content":"    public String toString() {","lastModifiedDate":"2023-04-21"},{"lineNumber":22,"author":{"gitId":"zzlilyzz"},"content":"        return \"\\t [T]\" + super.toString();","lastModifiedDate":"2023-04-22"},{"lineNumber":23,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-21"},{"lineNumber":24,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":25,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":26,"author":{"gitId":"zzlilyzz"},"content":"     * Return the task type of todo task","lastModifiedDate":"2023-04-24"},{"lineNumber":27,"author":{"gitId":"zzlilyzz"},"content":"     * @return string \"T\"","lastModifiedDate":"2023-04-24"},{"lineNumber":28,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":29,"author":{"gitId":"zzlilyzz"},"content":"    public String getTaskType() {","lastModifiedDate":"2023-04-21"},{"lineNumber":30,"author":{"gitId":"zzlilyzz"},"content":"        return \"T\";","lastModifiedDate":"2023-04-21"},{"lineNumber":31,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-21"},{"lineNumber":32,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":33,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":34,"author":{"gitId":"zzlilyzz"},"content":"     * This is because of todo Class extends the Task Class, but deadline task dose not have start time","lastModifiedDate":"2023-04-24"},{"lineNumber":35,"author":{"gitId":"zzlilyzz"},"content":"     * @return empty","lastModifiedDate":"2023-04-24"},{"lineNumber":36,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":37,"author":{"gitId":"zzlilyzz"},"content":"    public String getTaskStartTime() {","lastModifiedDate":"2023-04-21"},{"lineNumber":38,"author":{"gitId":"zzlilyzz"},"content":"        return \"\";","lastModifiedDate":"2023-04-21"},{"lineNumber":39,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-21"},{"lineNumber":40,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":41,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":42,"author":{"gitId":"zzlilyzz"},"content":"     * This is because of todo Class extends the Task Class, but deadline task dose not have end time","lastModifiedDate":"2023-04-24"},{"lineNumber":43,"author":{"gitId":"zzlilyzz"},"content":"     * @return empty","lastModifiedDate":"2023-04-24"},{"lineNumber":44,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":45,"author":{"gitId":"zzlilyzz"},"content":"    public String getTaskEndTime() {","lastModifiedDate":"2023-04-21"},{"lineNumber":46,"author":{"gitId":"zzlilyzz"},"content":"        return \"\";","lastModifiedDate":"2023-04-21"},{"lineNumber":47,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-21"},{"lineNumber":48,"author":{"gitId":"zzlilyzz"},"content":"}","lastModifiedDate":"2023-04-21"}],"authorContributionMap":{"zzlilyzz":48}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zzlilyzz"},"content":"package duke.ui;","lastModifiedDate":"2023-04-22"},{"lineNumber":2,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-22"},{"lineNumber":3,"author":{"gitId":"zzlilyzz"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-04-21"},{"lineNumber":4,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-23"},{"lineNumber":5,"author":{"gitId":"zzlilyzz"},"content":"import duke.util.TaskList;","lastModifiedDate":"2023-04-22"},{"lineNumber":6,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-21"},{"lineNumber":7,"author":{"gitId":"zzlilyzz"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-04-23"},{"lineNumber":8,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-23"},{"lineNumber":9,"author":{"gitId":"zzlilyzz"},"content":"/**","lastModifiedDate":"2023-04-24"},{"lineNumber":10,"author":{"gitId":"zzlilyzz"},"content":" * UI class represents the user interface of duke","lastModifiedDate":"2023-04-24"},{"lineNumber":11,"author":{"gitId":"zzlilyzz"},"content":" * It provides methods for displaying messages to the user and reading user input.","lastModifiedDate":"2023-04-24"},{"lineNumber":12,"author":{"gitId":"zzlilyzz"},"content":" */","lastModifiedDate":"2023-04-24"},{"lineNumber":13,"author":{"gitId":"zzlilyzz"},"content":"public class Ui {","lastModifiedDate":"2023-04-21"},{"lineNumber":14,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":15,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":16,"author":{"gitId":"zzlilyzz"},"content":"     * Constructs a new Ui object.","lastModifiedDate":"2023-04-24"},{"lineNumber":17,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":18,"author":{"gitId":"zzlilyzz"},"content":"    public Ui() {","lastModifiedDate":"2023-04-21"},{"lineNumber":19,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-21"},{"lineNumber":20,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-23"},{"lineNumber":21,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":22,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":23,"author":{"gitId":"zzlilyzz"},"content":"     * This method represents the welcome logo and Greeting of duke","lastModifiedDate":"2023-04-24"},{"lineNumber":24,"author":{"gitId":"zzlilyzz"},"content":"     * @return string of logo and greeting","lastModifiedDate":"2023-04-24"},{"lineNumber":25,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":26,"author":{"gitId":"zzlilyzz"},"content":"    public String showWelcome() {","lastModifiedDate":"2023-04-21"},{"lineNumber":27,"author":{"gitId":"zzlilyzz"},"content":"        return \"\\t Hello from Lily \\u200E|•\u0027-\u0027•) ✧\\n\"","lastModifiedDate":"2023-04-21"},{"lineNumber":28,"author":{"gitId":"zzlilyzz"},"content":"                + \" \\t .ᕱ⠀⠀⠀ᕱ⠀ ⠀➶ ⠀➴        \\n\"","lastModifiedDate":"2023-04-21"},{"lineNumber":29,"author":{"gitId":"zzlilyzz"},"content":"                + \"\\t \\u200E(๑◕ܫ◕๑) ➶⠀⠀⠀ ⠀➴ \\n\"","lastModifiedDate":"2023-04-21"},{"lineNumber":30,"author":{"gitId":"zzlilyzz"},"content":"                + \"\\t \\u200E૮⠀⠀⑅ ⠀づ ⠀⠀⠀⠀⠀⠀⠀➵ Let\u0027s Chat with me ♡\\n\"","lastModifiedDate":"2023-04-21"},{"lineNumber":31,"author":{"gitId":"zzlilyzz"},"content":"                + \"\\t ᑋᵉᑊᑊᵒ ᵕ̈ ᑋᵉᑊᑊᵒ I\u0027m Dululu\\n\"","lastModifiedDate":"2023-04-24"},{"lineNumber":32,"author":{"gitId":"zzlilyzz"},"content":"                + \"\\t♡____________________________________________________________♡\\n\"","lastModifiedDate":"2023-04-24"},{"lineNumber":33,"author":{"gitId":"zzlilyzz"},"content":"                + \"\\t What can I do for you? (°◡°♡).:｡\\n\"","lastModifiedDate":"2023-04-24"},{"lineNumber":34,"author":{"gitId":"zzlilyzz"},"content":"                + \"\\t♡____________________________________________________________♡\\n\";","lastModifiedDate":"2023-04-24"},{"lineNumber":35,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-21"},{"lineNumber":36,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-23"},{"lineNumber":37,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":38,"author":{"gitId":"zzlilyzz"},"content":"     * The reply message when user input bye","lastModifiedDate":"2023-04-24"},{"lineNumber":39,"author":{"gitId":"zzlilyzz"},"content":"     * @return Bye( \u0027༥\u0027 ). Hope to see you again soon!","lastModifiedDate":"2023-04-24"},{"lineNumber":40,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":41,"author":{"gitId":"zzlilyzz"},"content":"    public String showBye() {","lastModifiedDate":"2023-04-21"},{"lineNumber":42,"author":{"gitId":"zzlilyzz"},"content":"        return \"\\t Bye( \u0027༥\u0027 ). Hope to see you again soon!\";","lastModifiedDate":"2023-04-24"},{"lineNumber":43,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-21"},{"lineNumber":44,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-23"},{"lineNumber":45,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":46,"author":{"gitId":"zzlilyzz"},"content":"     * The Ui of break line for evey chat block","lastModifiedDate":"2023-04-24"},{"lineNumber":47,"author":{"gitId":"zzlilyzz"},"content":"     * @return the break Line","lastModifiedDate":"2023-04-24"},{"lineNumber":48,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":49,"author":{"gitId":"zzlilyzz"},"content":"    public String showLine() {","lastModifiedDate":"2023-04-21"},{"lineNumber":50,"author":{"gitId":"zzlilyzz"},"content":"        return \"\\t♡____________________________________________________________♡\\n\";","lastModifiedDate":"2023-04-21"},{"lineNumber":51,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-21"},{"lineNumber":52,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-23"},{"lineNumber":53,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":54,"author":{"gitId":"zzlilyzz"},"content":"     * The message when cannot load the tasks from the file","lastModifiedDate":"2023-04-24"},{"lineNumber":55,"author":{"gitId":"zzlilyzz"},"content":"     * @return ☹ OOPS!!! I\u0027m sorry, but I couldn\u0027t load your tasks from the file.","lastModifiedDate":"2023-04-24"},{"lineNumber":56,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":57,"author":{"gitId":"zzlilyzz"},"content":"    public String showLoadingError() {","lastModifiedDate":"2023-04-21"},{"lineNumber":58,"author":{"gitId":"zzlilyzz"},"content":"        return \"\\t (\u003ew\u003c) OOPS!!! I\u0027m sorry, but I couldn\u0027t load your tasks from the file.\";","lastModifiedDate":"2023-04-24"},{"lineNumber":59,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-21"},{"lineNumber":60,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-23"},{"lineNumber":61,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":62,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":63,"author":{"gitId":"zzlilyzz"},"content":"     * The message when error occurred","lastModifiedDate":"2023-04-24"},{"lineNumber":64,"author":{"gitId":"zzlilyzz"},"content":"     * @param message string show the error message","lastModifiedDate":"2023-04-24"},{"lineNumber":65,"author":{"gitId":"zzlilyzz"},"content":"     * @return message string","lastModifiedDate":"2023-04-24"},{"lineNumber":66,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":67,"author":{"gitId":"zzlilyzz"},"content":"    public String showError(String message) {","lastModifiedDate":"2023-04-21"},{"lineNumber":68,"author":{"gitId":"zzlilyzz"},"content":"        return message;","lastModifiedDate":"2023-04-21"},{"lineNumber":69,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-21"},{"lineNumber":70,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-23"},{"lineNumber":71,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":72,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":73,"author":{"gitId":"zzlilyzz"},"content":"     * Reads a command from the user input.","lastModifiedDate":"2023-04-24"},{"lineNumber":74,"author":{"gitId":"zzlilyzz"},"content":"     * @return a String representing the command entered by the user.","lastModifiedDate":"2023-04-24"},{"lineNumber":75,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":76,"author":{"gitId":"zzlilyzz"},"content":"    public String readCommand() {","lastModifiedDate":"2023-04-21"},{"lineNumber":77,"author":{"gitId":"zzlilyzz"},"content":"        Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2023-04-21"},{"lineNumber":78,"author":{"gitId":"zzlilyzz"},"content":"        return in.nextLine();","lastModifiedDate":"2023-04-21"},{"lineNumber":79,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-21"},{"lineNumber":80,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-23"},{"lineNumber":81,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":82,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":83,"author":{"gitId":"zzlilyzz"},"content":"     * Returns a formatted string containing the tasks in the given TaskList object.","lastModifiedDate":"2023-04-24"},{"lineNumber":84,"author":{"gitId":"zzlilyzz"},"content":"     * If the TaskList is empty, returns a message indicating that there are no pending tasks.","lastModifiedDate":"2023-04-24"},{"lineNumber":85,"author":{"gitId":"zzlilyzz"},"content":"     * @param tasks the TaskList object containing the tasks to be displayed","lastModifiedDate":"2023-04-24"},{"lineNumber":86,"author":{"gitId":"zzlilyzz"},"content":"     * @return a formatted string containing the tasks in the given TaskList object, or a message indicating that there are no pending tasks","lastModifiedDate":"2023-04-24"},{"lineNumber":87,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":88,"author":{"gitId":"zzlilyzz"},"content":"    public String showList(TaskList tasks) {","lastModifiedDate":"2023-04-21"},{"lineNumber":89,"author":{"gitId":"zzlilyzz"},"content":"        if (tasks.getLength() \u003d\u003d 0) {","lastModifiedDate":"2023-04-24"},{"lineNumber":90,"author":{"gitId":"zzlilyzz"},"content":"            return \"\\t No task is pending now! Please add task first Ծ‸Ծ\\n\";","lastModifiedDate":"2023-04-24"},{"lineNumber":91,"author":{"gitId":"zzlilyzz"},"content":"        }","lastModifiedDate":"2023-04-24"},{"lineNumber":92,"author":{"gitId":"zzlilyzz"},"content":"        StringBuilder result \u003d new StringBuilder(\"\\t Here are the tasks in your list:\\n\");","lastModifiedDate":"2023-04-24"},{"lineNumber":93,"author":{"gitId":"zzlilyzz"},"content":"        for (int i \u003d 0; i \u003c tasks.getLength(); i++) {","lastModifiedDate":"2023-04-21"},{"lineNumber":94,"author":{"gitId":"zzlilyzz"},"content":"            String taskString \u003d tasks.getTask(i).toString();","lastModifiedDate":"2023-04-24"},{"lineNumber":95,"author":{"gitId":"zzlilyzz"},"content":"            if (taskString !\u003d null) {","lastModifiedDate":"2023-04-24"},{"lineNumber":96,"author":{"gitId":"zzlilyzz"},"content":"                result.append(\"\\t \").append((i + 1)).append(\".\").append(taskString).append(\"\\n\");","lastModifiedDate":"2023-04-24"},{"lineNumber":97,"author":{"gitId":"zzlilyzz"},"content":"            }","lastModifiedDate":"2023-04-24"},{"lineNumber":98,"author":{"gitId":"zzlilyzz"},"content":"        }","lastModifiedDate":"2023-04-21"},{"lineNumber":99,"author":{"gitId":"zzlilyzz"},"content":"        return result.toString();","lastModifiedDate":"2023-04-21"},{"lineNumber":100,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-21"},{"lineNumber":101,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-23"},{"lineNumber":102,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":103,"author":{"gitId":"zzlilyzz"},"content":"     * Return the massage when the task is done","lastModifiedDate":"2023-04-24"},{"lineNumber":104,"author":{"gitId":"zzlilyzz"},"content":"     * @param tasks the tasks","lastModifiedDate":"2023-04-24"},{"lineNumber":105,"author":{"gitId":"zzlilyzz"},"content":"     * @param item the task details","lastModifiedDate":"2023-04-24"},{"lineNumber":106,"author":{"gitId":"zzlilyzz"},"content":"     * @return the message and the task details","lastModifiedDate":"2023-04-24"},{"lineNumber":107,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":108,"author":{"gitId":"zzlilyzz"},"content":"    public String showDone(TaskList tasks, String item) {","lastModifiedDate":"2023-04-21"},{"lineNumber":109,"author":{"gitId":"zzlilyzz"},"content":"        return \"\\t Nice (•̀ᴗ• )! I\u0027ve marked this task as done:\\n\" + item;","lastModifiedDate":"2023-04-24"},{"lineNumber":110,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-21"},{"lineNumber":111,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-23"},{"lineNumber":112,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":113,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":114,"author":{"gitId":"zzlilyzz"},"content":"     * Return the massage when the task is undone","lastModifiedDate":"2023-04-24"},{"lineNumber":115,"author":{"gitId":"zzlilyzz"},"content":"     * @param tasks the tasks","lastModifiedDate":"2023-04-24"},{"lineNumber":116,"author":{"gitId":"zzlilyzz"},"content":"     * @param item the task details","lastModifiedDate":"2023-04-24"},{"lineNumber":117,"author":{"gitId":"zzlilyzz"},"content":"     * @return the message and the task details","lastModifiedDate":"2023-04-24"},{"lineNumber":118,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":119,"author":{"gitId":"zzlilyzz"},"content":"    public String showUndone(TaskList tasks, String item) {","lastModifiedDate":"2023-04-21"},{"lineNumber":120,"author":{"gitId":"zzlilyzz"},"content":"        return \"\\t OK ⚆_⚆, I\u0027ve marked this task as not done yet:\\n\" + item;","lastModifiedDate":"2023-04-24"},{"lineNumber":121,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-21"},{"lineNumber":122,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-23"},{"lineNumber":123,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":124,"author":{"gitId":"zzlilyzz"},"content":"     * Return message when user delete a task","lastModifiedDate":"2023-04-24"},{"lineNumber":125,"author":{"gitId":"zzlilyzz"},"content":"     * @param tasks the tasks","lastModifiedDate":"2023-04-24"},{"lineNumber":126,"author":{"gitId":"zzlilyzz"},"content":"     * @param item the task details","lastModifiedDate":"2023-04-24"},{"lineNumber":127,"author":{"gitId":"zzlilyzz"},"content":"     * @return confirm message and details of deleted tasks, and the message about how many tasks left now","lastModifiedDate":"2023-04-24"},{"lineNumber":128,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":129,"author":{"gitId":"zzlilyzz"},"content":"    public String showDelete(TaskList tasks, String item) {","lastModifiedDate":"2023-04-21"},{"lineNumber":130,"author":{"gitId":"zzlilyzz"},"content":"        return \"\\t Noted･◡･. I\u0027ve removed this task:\\n\" + item + \"\\n\\t Now you have \" + (tasks.getLength()) + \" tasks in the list *⸜( •ᴗ• )⸝*\";","lastModifiedDate":"2023-04-24"},{"lineNumber":131,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-21"},{"lineNumber":132,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-23"},{"lineNumber":133,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":134,"author":{"gitId":"zzlilyzz"},"content":"     * The message when user successfully add a task","lastModifiedDate":"2023-04-24"},{"lineNumber":135,"author":{"gitId":"zzlilyzz"},"content":"     * @param tasks the tasks","lastModifiedDate":"2023-04-24"},{"lineNumber":136,"author":{"gitId":"zzlilyzz"},"content":"     * @param item the task details","lastModifiedDate":"2023-04-24"},{"lineNumber":137,"author":{"gitId":"zzlilyzz"},"content":"     * @return the confirmation of successfully added task, the task details and the amount of tasks left","lastModifiedDate":"2023-04-24"},{"lineNumber":138,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":139,"author":{"gitId":"zzlilyzz"},"content":"    public String showAdd(TaskList tasks, String item) {","lastModifiedDate":"2023-04-21"},{"lineNumber":140,"author":{"gitId":"zzlilyzz"},"content":"        return \"\\t ๐•ᴗ•๐ added:\\n\" + item + \"\\n\\t Now you have \" + tasks.getLength() + \" tasks in the list *⸜( •ᴗ• )⸝*\";","lastModifiedDate":"2023-04-24"},{"lineNumber":141,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":142,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-21"},{"lineNumber":143,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-23"},{"lineNumber":144,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":145,"author":{"gitId":"zzlilyzz"},"content":"     * Returns a formatted string of the tasks in the given TaskList that","lastModifiedDate":"2023-04-24"},{"lineNumber":146,"author":{"gitId":"zzlilyzz"},"content":"     * match the provided keyword.","lastModifiedDate":"2023-04-24"},{"lineNumber":147,"author":{"gitId":"zzlilyzz"},"content":"     * @param tasks the tasks object","lastModifiedDate":"2023-04-24"},{"lineNumber":148,"author":{"gitId":"zzlilyzz"},"content":"     * @param keyword the keyword object","lastModifiedDate":"2023-04-24"},{"lineNumber":149,"author":{"gitId":"zzlilyzz"},"content":"     * @return matched tasks by list","lastModifiedDate":"2023-04-24"},{"lineNumber":150,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":151,"author":{"gitId":"zzlilyzz"},"content":"    public String showFind(TaskList tasks, String keyword) {","lastModifiedDate":"2023-04-23"},{"lineNumber":152,"author":{"gitId":"zzlilyzz"},"content":"        TaskList resultTaskList \u003d tasks.findTasks(keyword);","lastModifiedDate":"2023-04-23"},{"lineNumber":153,"author":{"gitId":"zzlilyzz"},"content":"        if (resultTaskList.getLength()\u003d\u003d0) {","lastModifiedDate":"2023-04-24"},{"lineNumber":154,"author":{"gitId":"zzlilyzz"},"content":"            return \"\\t(\u003e_\u003c) Sorry, no matching tasks found.\";","lastModifiedDate":"2023-04-24"},{"lineNumber":155,"author":{"gitId":"zzlilyzz"},"content":"        } else {","lastModifiedDate":"2023-04-24"},{"lineNumber":156,"author":{"gitId":"zzlilyzz"},"content":"            StringBuilder result \u003d new StringBuilder(\"\\t Here are the matching tasks in your list:\\n\");","lastModifiedDate":"2023-04-24"},{"lineNumber":157,"author":{"gitId":"zzlilyzz"},"content":"            for (int i \u003d 0; i \u003c resultTaskList.getLength(); i++) {","lastModifiedDate":"2023-04-23"},{"lineNumber":158,"author":{"gitId":"zzlilyzz"},"content":"                result.append(\"\\t \").append((i + 1)).append(\".\").append(resultTaskList.getTask(i)).append(\"\\n\");","lastModifiedDate":"2023-04-24"},{"lineNumber":159,"author":{"gitId":"zzlilyzz"},"content":"            }","lastModifiedDate":"2023-04-23"},{"lineNumber":160,"author":{"gitId":"zzlilyzz"},"content":"            return result.toString();","lastModifiedDate":"2023-04-23"},{"lineNumber":161,"author":{"gitId":"zzlilyzz"},"content":"        }","lastModifiedDate":"2023-04-23"},{"lineNumber":162,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-24"},{"lineNumber":163,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":164,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-23"},{"lineNumber":165,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":166,"author":{"gitId":"zzlilyzz"},"content":"     * Returns a string representation of the tasks that are due before the given end time.","lastModifiedDate":"2023-04-24"},{"lineNumber":167,"author":{"gitId":"zzlilyzz"},"content":"     * @param taskList the task list","lastModifiedDate":"2023-04-24"},{"lineNumber":168,"author":{"gitId":"zzlilyzz"},"content":"     * @param endTime the due time","lastModifiedDate":"2023-04-24"},{"lineNumber":169,"author":{"gitId":"zzlilyzz"},"content":"     * @return the tasks which deadline before the due date and time input","lastModifiedDate":"2023-04-24"},{"lineNumber":170,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":171,"author":{"gitId":"zzlilyzz"},"content":"    public String showDue(TaskList taskList, LocalDateTime endTime) {","lastModifiedDate":"2023-04-23"},{"lineNumber":172,"author":{"gitId":"zzlilyzz"},"content":"        StringBuilder result \u003d new StringBuilder(\"\\t Here are the tasks due by \" + endTime + \" in your list:\\n\");","lastModifiedDate":"2023-04-24"},{"lineNumber":173,"author":{"gitId":"zzlilyzz"},"content":"        TaskList dueTaskList \u003d taskList.tasksDueBefore(endTime);","lastModifiedDate":"2023-04-23"},{"lineNumber":174,"author":{"gitId":"zzlilyzz"},"content":"        for (int i \u003d 0; i \u003c dueTaskList.getLength(); i++) {","lastModifiedDate":"2023-04-23"},{"lineNumber":175,"author":{"gitId":"zzlilyzz"},"content":"            result.append(\"\\t \").append((i + 1)).append(\".\").append(dueTaskList.getTask(i)).append(\"\\n\");","lastModifiedDate":"2023-04-24"},{"lineNumber":176,"author":{"gitId":"zzlilyzz"},"content":"        }","lastModifiedDate":"2023-04-23"},{"lineNumber":177,"author":{"gitId":"zzlilyzz"},"content":"        return result.toString();","lastModifiedDate":"2023-04-23"},{"lineNumber":178,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-23"},{"lineNumber":179,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-23"},{"lineNumber":180,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-23"},{"lineNumber":181,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":182,"author":{"gitId":"zzlilyzz"},"content":"     * The string of help information","lastModifiedDate":"2023-04-24"},{"lineNumber":183,"author":{"gitId":"zzlilyzz"},"content":"     * @return the information about the commands that can use","lastModifiedDate":"2023-04-24"},{"lineNumber":184,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":185,"author":{"gitId":"zzlilyzz"},"content":"    public String showHelp() {","lastModifiedDate":"2023-04-24"},{"lineNumber":186,"author":{"gitId":"zzlilyzz"},"content":"        return \"\\t Here are the commands you can use:\\n\" +","lastModifiedDate":"2023-04-24"},{"lineNumber":187,"author":{"gitId":"zzlilyzz"},"content":"                \"\\t 1. todo \u003cdescription\u003e\\n\" +","lastModifiedDate":"2023-04-24"},{"lineNumber":188,"author":{"gitId":"zzlilyzz"},"content":"                \"\\t 2. deadline \u003cdescription\u003e /by \u003cdate\u003e\\n\" +","lastModifiedDate":"2023-04-24"},{"lineNumber":189,"author":{"gitId":"zzlilyzz"},"content":"                \"\\t 3. event \u003cdescription\u003e /from \u003cdate\u003e /to \u003cdate\u003e\\n\" +","lastModifiedDate":"2023-04-24"},{"lineNumber":190,"author":{"gitId":"zzlilyzz"},"content":"                \"\\t 4. list\\n\" +","lastModifiedDate":"2023-04-24"},{"lineNumber":191,"author":{"gitId":"zzlilyzz"},"content":"                \"\\t 5. mark \u003cindex\u003e\\n\" +","lastModifiedDate":"2023-04-24"},{"lineNumber":192,"author":{"gitId":"zzlilyzz"},"content":"                \"\\t 6. unmark \u003cindex\u003e\\n\" +","lastModifiedDate":"2023-04-24"},{"lineNumber":193,"author":{"gitId":"zzlilyzz"},"content":"                \"\\t 7. delete \u003cindex\u003e\\n\" +","lastModifiedDate":"2023-04-24"},{"lineNumber":194,"author":{"gitId":"zzlilyzz"},"content":"                \"\\t 8. find \u003ckeyword\u003e\\n\" +","lastModifiedDate":"2023-04-24"},{"lineNumber":195,"author":{"gitId":"zzlilyzz"},"content":"                \"\\t 9. due \u003cdate\u003e\\n\" +","lastModifiedDate":"2023-04-24"},{"lineNumber":196,"author":{"gitId":"zzlilyzz"},"content":"                \"\\t 10. bye\";","lastModifiedDate":"2023-04-24"},{"lineNumber":197,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-24"},{"lineNumber":198,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":199,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":200,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":201,"author":{"gitId":"zzlilyzz"},"content":"     * The return message when user input invalid command","lastModifiedDate":"2023-04-24"},{"lineNumber":202,"author":{"gitId":"zzlilyzz"},"content":"     * @return the notification message and guid user to use correct command","lastModifiedDate":"2023-04-24"},{"lineNumber":203,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":204,"author":{"gitId":"zzlilyzz"},"content":"    public String showInvalid() {","lastModifiedDate":"2023-04-21"},{"lineNumber":205,"author":{"gitId":"zzlilyzz"},"content":"        return \"\\t Ծ‸Ծ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\"","lastModifiedDate":"2023-04-24"},{"lineNumber":206,"author":{"gitId":"zzlilyzz"},"content":"                + \"\\n\\t You can entre keyword \u0027help/ for more details!･◡･\";","lastModifiedDate":"2023-04-24"},{"lineNumber":207,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-21"},{"lineNumber":208,"author":{"gitId":"zzlilyzz"},"content":"}","lastModifiedDate":"2023-04-21"}],"authorContributionMap":{"zzlilyzz":208}},{"path":"src/main/java/duke/util/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zzlilyzz"},"content":"package duke.util;","lastModifiedDate":"2023-04-22"},{"lineNumber":2,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-22"},{"lineNumber":3,"author":{"gitId":"zzlilyzz"},"content":"import duke.command.Command;","lastModifiedDate":"2023-04-22"},{"lineNumber":4,"author":{"gitId":"zzlilyzz"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2023-04-22"},{"lineNumber":5,"author":{"gitId":"zzlilyzz"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-04-23"},{"lineNumber":6,"author":{"gitId":"zzlilyzz"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2023-04-23"},{"lineNumber":7,"author":{"gitId":"zzlilyzz"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-04-23"},{"lineNumber":8,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":9,"author":{"gitId":"zzlilyzz"},"content":"/**","lastModifiedDate":"2023-04-24"},{"lineNumber":10,"author":{"gitId":"zzlilyzz"},"content":" * The Parser class is responsible for parsing the user input and creating the appropriate Command object to be executed by Duke.","lastModifiedDate":"2023-04-24"},{"lineNumber":11,"author":{"gitId":"zzlilyzz"},"content":" * The parse method takes in a String of user input and uses a switch statement to determine the type of Command to create based on the command keyword.","lastModifiedDate":"2023-04-24"},{"lineNumber":12,"author":{"gitId":"zzlilyzz"},"content":" * If the input String is not recognized as a valid command, a DukeException is thrown with an error message.","lastModifiedDate":"2023-04-24"},{"lineNumber":13,"author":{"gitId":"zzlilyzz"},"content":" */","lastModifiedDate":"2023-04-24"},{"lineNumber":14,"author":{"gitId":"zzlilyzz"},"content":"public class Parser {","lastModifiedDate":"2023-04-21"},{"lineNumber":15,"author":{"gitId":"zzlilyzz"},"content":"    public static Command parse(String fullCommand) throws DukeException {","lastModifiedDate":"2023-04-22"},{"lineNumber":16,"author":{"gitId":"zzlilyzz"},"content":"        String[] command \u003d fullCommand.split(\" \", 2);","lastModifiedDate":"2023-04-21"},{"lineNumber":17,"author":{"gitId":"zzlilyzz"},"content":"        switch (command[0]) {","lastModifiedDate":"2023-04-21"},{"lineNumber":18,"author":{"gitId":"zzlilyzz"},"content":"            case \"help\":","lastModifiedDate":"2023-04-21"},{"lineNumber":19,"author":{"gitId":"zzlilyzz"},"content":"                return new Command(Command.CommandType.HELP);","lastModifiedDate":"2023-04-21"},{"lineNumber":20,"author":{"gitId":"zzlilyzz"},"content":"            case \"bye\":","lastModifiedDate":"2023-04-21"},{"lineNumber":21,"author":{"gitId":"zzlilyzz"},"content":"                return new Command(Command.CommandType.BYE);","lastModifiedDate":"2023-04-21"},{"lineNumber":22,"author":{"gitId":"zzlilyzz"},"content":"            case \"list\":","lastModifiedDate":"2023-04-21"},{"lineNumber":23,"author":{"gitId":"zzlilyzz"},"content":"                return new Command(Command.CommandType.LIST);","lastModifiedDate":"2023-04-21"},{"lineNumber":24,"author":{"gitId":"zzlilyzz"},"content":"            case \"mark\":","lastModifiedDate":"2023-04-22"},{"lineNumber":25,"author":{"gitId":"zzlilyzz"},"content":"                try {","lastModifiedDate":"2023-04-22"},{"lineNumber":26,"author":{"gitId":"zzlilyzz"},"content":"                    return new Command(Command.CommandType.MARK, Integer.parseInt(command[1]));","lastModifiedDate":"2023-04-22"},{"lineNumber":27,"author":{"gitId":"zzlilyzz"},"content":"                } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-04-22"},{"lineNumber":28,"author":{"gitId":"zzlilyzz"},"content":"                    throw new DukeException(\"\\t Ծ‸Ծ OOPS!!! You need to specify which task to mark as done.\");","lastModifiedDate":"2023-04-24"},{"lineNumber":29,"author":{"gitId":"zzlilyzz"},"content":"                } catch (NumberFormatException e) {","lastModifiedDate":"2023-04-22"},{"lineNumber":30,"author":{"gitId":"zzlilyzz"},"content":"                    throw new DukeException(\"\\t Ծ‸Ծ OOPS!!! Index must be a integer number.\");","lastModifiedDate":"2023-04-24"},{"lineNumber":31,"author":{"gitId":"zzlilyzz"},"content":"                }","lastModifiedDate":"2023-04-22"},{"lineNumber":32,"author":{"gitId":"zzlilyzz"},"content":"            case \"unmark\":","lastModifiedDate":"2023-04-22"},{"lineNumber":33,"author":{"gitId":"zzlilyzz"},"content":"                try {","lastModifiedDate":"2023-04-22"},{"lineNumber":34,"author":{"gitId":"zzlilyzz"},"content":"                    return new Command(Command.CommandType.UNMARK, Integer.parseInt(command[1]));","lastModifiedDate":"2023-04-22"},{"lineNumber":35,"author":{"gitId":"zzlilyzz"},"content":"                } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-04-22"},{"lineNumber":36,"author":{"gitId":"zzlilyzz"},"content":"                    throw new DukeException(\"\\t Ծ‸Ծ OOPS!!! You need to specify which task to mark as undone.\");","lastModifiedDate":"2023-04-24"},{"lineNumber":37,"author":{"gitId":"zzlilyzz"},"content":"                } catch (NumberFormatException e) {","lastModifiedDate":"2023-04-22"},{"lineNumber":38,"author":{"gitId":"zzlilyzz"},"content":"                    throw new DukeException(\"\\t Ծ‸Ծ OOPS!!! Index must be a integer number.\");","lastModifiedDate":"2023-04-24"},{"lineNumber":39,"author":{"gitId":"zzlilyzz"},"content":"                }","lastModifiedDate":"2023-04-22"},{"lineNumber":40,"author":{"gitId":"zzlilyzz"},"content":"            case \"delete\":","lastModifiedDate":"2023-04-21"},{"lineNumber":41,"author":{"gitId":"zzlilyzz"},"content":"                try {","lastModifiedDate":"2023-04-22"},{"lineNumber":42,"author":{"gitId":"zzlilyzz"},"content":"                    return new Command(Command.CommandType.DELETE, Integer.parseInt(command[1]));","lastModifiedDate":"2023-04-21"},{"lineNumber":43,"author":{"gitId":"zzlilyzz"},"content":"                } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-04-22"},{"lineNumber":44,"author":{"gitId":"zzlilyzz"},"content":"                    throw new DukeException(\"\\t Ծ‸Ծ OOPS!!! You need to specify which task to delete.\");","lastModifiedDate":"2023-04-24"},{"lineNumber":45,"author":{"gitId":"zzlilyzz"},"content":"                } catch (NumberFormatException e) {","lastModifiedDate":"2023-04-22"},{"lineNumber":46,"author":{"gitId":"zzlilyzz"},"content":"                    throw new DukeException(\"\\t Ծ‸Ծ OOPS!!! Index must be a integer number.\");","lastModifiedDate":"2023-04-24"},{"lineNumber":47,"author":{"gitId":"zzlilyzz"},"content":"                }","lastModifiedDate":"2023-04-22"},{"lineNumber":48,"author":{"gitId":"zzlilyzz"},"content":"            case \"todo\":","lastModifiedDate":"2023-04-21"},{"lineNumber":49,"author":{"gitId":"zzlilyzz"},"content":"                try {","lastModifiedDate":"2023-04-22"},{"lineNumber":50,"author":{"gitId":"zzlilyzz"},"content":"                    return new Command(Command.CommandType.TODO, command[1]);","lastModifiedDate":"2023-04-21"},{"lineNumber":51,"author":{"gitId":"zzlilyzz"},"content":"                } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-04-22"},{"lineNumber":52,"author":{"gitId":"zzlilyzz"},"content":"                    throw new DukeException(\"\\t Ծ‸Ծ OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2023-04-24"},{"lineNumber":53,"author":{"gitId":"zzlilyzz"},"content":"                }","lastModifiedDate":"2023-04-22"},{"lineNumber":54,"author":{"gitId":"zzlilyzz"},"content":"            case \"deadline\":","lastModifiedDate":"2023-04-21"},{"lineNumber":55,"author":{"gitId":"zzlilyzz"},"content":"                try {","lastModifiedDate":"2023-04-22"},{"lineNumber":56,"author":{"gitId":"zzlilyzz"},"content":"                    String deadlineDescription \u003d command[1].split(\" /by \", 2)[0];","lastModifiedDate":"2023-04-21"},{"lineNumber":57,"author":{"gitId":"zzlilyzz"},"content":"                    String deadlineTime \u003d command[1].split(\" /by \", 2)[1];","lastModifiedDate":"2023-04-21"},{"lineNumber":58,"author":{"gitId":"zzlilyzz"},"content":"                    DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2023-04-23"},{"lineNumber":59,"author":{"gitId":"zzlilyzz"},"content":"                    return new Command(Command.CommandType.DEADLINE, deadlineDescription, LocalDateTime.parse(deadlineTime, formatter));","lastModifiedDate":"2023-04-23"},{"lineNumber":60,"author":{"gitId":"zzlilyzz"},"content":"                } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-04-22"},{"lineNumber":61,"author":{"gitId":"zzlilyzz"},"content":"                    throw new DukeException(\"\\t Ծ‸Ծ OOPS!!! The description and time of a deadline cannot be empty.\");","lastModifiedDate":"2023-04-24"},{"lineNumber":62,"author":{"gitId":"zzlilyzz"},"content":"                } catch (DateTimeException e) {","lastModifiedDate":"2023-04-23"},{"lineNumber":63,"author":{"gitId":"zzlilyzz"},"content":"                    throw new DukeException(\"\\t Ծ‸Ծ OOPS!!! The time of a deadline must be in the format yyyy-mm-dd hh:mm.\");","lastModifiedDate":"2023-04-24"},{"lineNumber":64,"author":{"gitId":"zzlilyzz"},"content":"                }","lastModifiedDate":"2023-04-22"},{"lineNumber":65,"author":{"gitId":"zzlilyzz"},"content":"            case \"event\":","lastModifiedDate":"2023-04-21"},{"lineNumber":66,"author":{"gitId":"zzlilyzz"},"content":"                try {","lastModifiedDate":"2023-04-22"},{"lineNumber":67,"author":{"gitId":"zzlilyzz"},"content":"                    String eventDescription \u003d command[1].split(\" /from \", 2)[0];","lastModifiedDate":"2023-04-21"},{"lineNumber":68,"author":{"gitId":"zzlilyzz"},"content":"                    String eventStartTime \u003d command[1].split(\" /from \", 2)[1].split(\" /to \", 2)[0];","lastModifiedDate":"2023-04-21"},{"lineNumber":69,"author":{"gitId":"zzlilyzz"},"content":"                    String eventEndTime \u003d command[1].split(\" /from \", 2)[1].split(\" /to \", 2)[1];","lastModifiedDate":"2023-04-21"},{"lineNumber":70,"author":{"gitId":"zzlilyzz"},"content":"                    DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2023-04-23"},{"lineNumber":71,"author":{"gitId":"zzlilyzz"},"content":"                    return new Command(Command.CommandType.EVENT, eventDescription, LocalDateTime.parse(eventStartTime, formatter), LocalDateTime.parse(eventEndTime, formatter));","lastModifiedDate":"2023-04-23"},{"lineNumber":72,"author":{"gitId":"zzlilyzz"},"content":"                } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-04-22"},{"lineNumber":73,"author":{"gitId":"zzlilyzz"},"content":"                    throw new DukeException(\"\\t Ծ‸Ծ OOPS!!! The description, start time and end time of an event cannot be empty.\");","lastModifiedDate":"2023-04-24"},{"lineNumber":74,"author":{"gitId":"zzlilyzz"},"content":"                } catch (DateTimeException e) {","lastModifiedDate":"2023-04-23"},{"lineNumber":75,"author":{"gitId":"zzlilyzz"},"content":"                    throw new DukeException(\"\\t Ծ‸Ծ OOPS!!! The time of a event must be in the format yyyy-mm-dd hh:mm.\");","lastModifiedDate":"2023-04-24"},{"lineNumber":76,"author":{"gitId":"zzlilyzz"},"content":"                }","lastModifiedDate":"2023-04-22"},{"lineNumber":77,"author":{"gitId":"zzlilyzz"},"content":"            case \"find\":","lastModifiedDate":"2023-04-22"},{"lineNumber":78,"author":{"gitId":"zzlilyzz"},"content":"                try {","lastModifiedDate":"2023-04-22"},{"lineNumber":79,"author":{"gitId":"zzlilyzz"},"content":"                    return new Command(Command.CommandType.FIND, command[1]);","lastModifiedDate":"2023-04-22"},{"lineNumber":80,"author":{"gitId":"zzlilyzz"},"content":"                } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-04-22"},{"lineNumber":81,"author":{"gitId":"zzlilyzz"},"content":"                    throw new DukeException(\"\\t Ծ‸Ծ OOPS!!! You need to specify the keyword.\");","lastModifiedDate":"2023-04-24"},{"lineNumber":82,"author":{"gitId":"zzlilyzz"},"content":"                }","lastModifiedDate":"2023-04-23"},{"lineNumber":83,"author":{"gitId":"zzlilyzz"},"content":"            case \"due\":","lastModifiedDate":"2023-04-23"},{"lineNumber":84,"author":{"gitId":"zzlilyzz"},"content":"                try {","lastModifiedDate":"2023-04-23"},{"lineNumber":85,"author":{"gitId":"zzlilyzz"},"content":"                    String endTime \u003d command[1];","lastModifiedDate":"2023-04-23"},{"lineNumber":86,"author":{"gitId":"zzlilyzz"},"content":"                    DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2023-04-23"},{"lineNumber":87,"author":{"gitId":"zzlilyzz"},"content":"                    return new Command(Command.CommandType.DUE, LocalDateTime.parse(endTime, formatter));","lastModifiedDate":"2023-04-23"},{"lineNumber":88,"author":{"gitId":"zzlilyzz"},"content":"                } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-04-23"},{"lineNumber":89,"author":{"gitId":"zzlilyzz"},"content":"                    throw new DukeException(\"\\t Ծ‸Ծ OOPS!!! You need to specify the date.\");","lastModifiedDate":"2023-04-24"},{"lineNumber":90,"author":{"gitId":"zzlilyzz"},"content":"                } catch (DateTimeException e) {","lastModifiedDate":"2023-04-23"},{"lineNumber":91,"author":{"gitId":"zzlilyzz"},"content":"                    throw new DukeException(\"\\t Ծ‸Ծ OOPS!!! The time must be in the format yyyy-mm-dd hh:mm.\");","lastModifiedDate":"2023-04-24"},{"lineNumber":92,"author":{"gitId":"zzlilyzz"},"content":"                }","lastModifiedDate":"2023-04-22"},{"lineNumber":93,"author":{"gitId":"zzlilyzz"},"content":"            default:","lastModifiedDate":"2023-04-21"},{"lineNumber":94,"author":{"gitId":"zzlilyzz"},"content":"                throw new DukeException(\"\\t Ծ‸Ծ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\" + \"\\n\\t You can entre keyword \u0027help\u0027 for more details!･◡･\");","lastModifiedDate":"2023-04-24"},{"lineNumber":95,"author":{"gitId":"zzlilyzz"},"content":"        }","lastModifiedDate":"2023-04-21"},{"lineNumber":96,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-21"},{"lineNumber":97,"author":{"gitId":"zzlilyzz"},"content":"}","lastModifiedDate":"2023-04-21"}],"authorContributionMap":{"zzlilyzz":97}},{"path":"src/main/java/duke/util/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zzlilyzz"},"content":"package duke.util;","lastModifiedDate":"2023-04-22"},{"lineNumber":2,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-22"},{"lineNumber":3,"author":{"gitId":"zzlilyzz"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2023-04-22"},{"lineNumber":4,"author":{"gitId":"zzlilyzz"},"content":"import java.sql.Connection;","lastModifiedDate":"2023-04-22"},{"lineNumber":5,"author":{"gitId":"zzlilyzz"},"content":"import java.sql.DriverManager;","lastModifiedDate":"2023-04-22"},{"lineNumber":6,"author":{"gitId":"zzlilyzz"},"content":"import java.sql.SQLException;","lastModifiedDate":"2023-04-22"},{"lineNumber":7,"author":{"gitId":"zzlilyzz"},"content":"import java.sql.Statement;","lastModifiedDate":"2023-04-22"},{"lineNumber":8,"author":{"gitId":"zzlilyzz"},"content":"import java.sql.ResultSet;","lastModifiedDate":"2023-04-22"},{"lineNumber":9,"author":{"gitId":"zzlilyzz"},"content":"import duke.task.Task;","lastModifiedDate":"2023-04-22"},{"lineNumber":10,"author":{"gitId":"zzlilyzz"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-04-22"},{"lineNumber":11,"author":{"gitId":"zzlilyzz"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-04-22"},{"lineNumber":12,"author":{"gitId":"zzlilyzz"},"content":"import duke.task.Event;","lastModifiedDate":"2023-04-22"},{"lineNumber":13,"author":{"gitId":"zzlilyzz"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-04-23"},{"lineNumber":14,"author":{"gitId":"zzlilyzz"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-04-23"},{"lineNumber":15,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-23"},{"lineNumber":16,"author":{"gitId":"zzlilyzz"},"content":"/**","lastModifiedDate":"2023-04-24"},{"lineNumber":17,"author":{"gitId":"zzlilyzz"},"content":" * Storage class will storage the tasks data in sql","lastModifiedDate":"2023-04-24"},{"lineNumber":18,"author":{"gitId":"zzlilyzz"},"content":" */","lastModifiedDate":"2023-04-24"},{"lineNumber":19,"author":{"gitId":"zzlilyzz"},"content":"public class Storage {","lastModifiedDate":"2023-04-22"},{"lineNumber":20,"author":{"gitId":"zzlilyzz"},"content":"    private final String filePath;","lastModifiedDate":"2023-04-22"},{"lineNumber":21,"author":{"gitId":"zzlilyzz"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-04-22"},{"lineNumber":22,"author":{"gitId":"zzlilyzz"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-04-22"},{"lineNumber":23,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-22"},{"lineNumber":24,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-22"},{"lineNumber":25,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":26,"author":{"gitId":"zzlilyzz"},"content":"     * Load methods is used to low the existing tasks data from sql","lastModifiedDate":"2023-04-24"},{"lineNumber":27,"author":{"gitId":"zzlilyzz"},"content":"     * @return the database of task list","lastModifiedDate":"2023-04-24"},{"lineNumber":28,"author":{"gitId":"zzlilyzz"},"content":"     * @throws DukeException Invalid date format in database","lastModifiedDate":"2023-04-24"},{"lineNumber":29,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":30,"author":{"gitId":"zzlilyzz"},"content":"    public TaskList load() throws DukeException {","lastModifiedDate":"2023-04-22"},{"lineNumber":31,"author":{"gitId":"zzlilyzz"},"content":"        try {","lastModifiedDate":"2023-04-22"},{"lineNumber":32,"author":{"gitId":"zzlilyzz"},"content":"            Connection conn \u003d DriverManager.getConnection(\"jdbc:sqlite:\" + this.filePath);","lastModifiedDate":"2023-04-22"},{"lineNumber":33,"author":{"gitId":"zzlilyzz"},"content":"            assert conn !\u003d null;","lastModifiedDate":"2023-04-25"},{"lineNumber":34,"author":{"gitId":"zzlilyzz"},"content":"            Statement stmt \u003d conn.createStatement();","lastModifiedDate":"2023-04-22"},{"lineNumber":35,"author":{"gitId":"zzlilyzz"},"content":"            ResultSet rs \u003d stmt.executeQuery(\"SELECT * FROM tasks\");","lastModifiedDate":"2023-04-22"},{"lineNumber":36,"author":{"gitId":"zzlilyzz"},"content":"            TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-04-22"},{"lineNumber":37,"author":{"gitId":"zzlilyzz"},"content":"            while (rs.next()) {","lastModifiedDate":"2023-04-22"},{"lineNumber":38,"author":{"gitId":"zzlilyzz"},"content":"                String taskType \u003d rs.getString(\"type\");","lastModifiedDate":"2023-04-22"},{"lineNumber":39,"author":{"gitId":"zzlilyzz"},"content":"                String taskDescription \u003d rs.getString(\"description\");","lastModifiedDate":"2023-04-22"},{"lineNumber":40,"author":{"gitId":"zzlilyzz"},"content":"                String taskStatus \u003d rs.getString(\"done\");","lastModifiedDate":"2023-04-22"},{"lineNumber":41,"author":{"gitId":"zzlilyzz"},"content":"                String taskStartDate \u003d rs.getString(\"start_time\");","lastModifiedDate":"2023-04-22"},{"lineNumber":42,"author":{"gitId":"zzlilyzz"},"content":"                String taskEndDate \u003d rs.getString(\"end_time\");","lastModifiedDate":"2023-04-22"},{"lineNumber":43,"author":{"gitId":"zzlilyzz"},"content":"                switch (taskType) {","lastModifiedDate":"2023-04-22"},{"lineNumber":44,"author":{"gitId":"zzlilyzz"},"content":"                    case \"T\":","lastModifiedDate":"2023-04-22"},{"lineNumber":45,"author":{"gitId":"zzlilyzz"},"content":"                        Todo todo \u003d new Todo(taskDescription);","lastModifiedDate":"2023-04-22"},{"lineNumber":46,"author":{"gitId":"zzlilyzz"},"content":"                        if (taskStatus.equals(\"1\")) {","lastModifiedDate":"2023-04-22"},{"lineNumber":47,"author":{"gitId":"zzlilyzz"},"content":"                            todo.markAsDone();","lastModifiedDate":"2023-04-22"},{"lineNumber":48,"author":{"gitId":"zzlilyzz"},"content":"                        }","lastModifiedDate":"2023-04-22"},{"lineNumber":49,"author":{"gitId":"zzlilyzz"},"content":"                        tasks.addTask(todo);","lastModifiedDate":"2023-04-22"},{"lineNumber":50,"author":{"gitId":"zzlilyzz"},"content":"                        break;","lastModifiedDate":"2023-04-22"},{"lineNumber":51,"author":{"gitId":"zzlilyzz"},"content":"                    case \"D\":","lastModifiedDate":"2023-04-22"},{"lineNumber":52,"author":{"gitId":"zzlilyzz"},"content":"                        try {","lastModifiedDate":"2023-04-23"},{"lineNumber":53,"author":{"gitId":"zzlilyzz"},"content":"                            Deadline deadline \u003d new Deadline(taskDescription, LocalDateTime.parse(taskEndDate));","lastModifiedDate":"2023-04-23"},{"lineNumber":54,"author":{"gitId":"zzlilyzz"},"content":"                            if (taskStatus.equals(\"1\")) {","lastModifiedDate":"2023-04-22"},{"lineNumber":55,"author":{"gitId":"zzlilyzz"},"content":"                                deadline.markAsDone();","lastModifiedDate":"2023-04-22"},{"lineNumber":56,"author":{"gitId":"zzlilyzz"},"content":"                            }","lastModifiedDate":"2023-04-22"},{"lineNumber":57,"author":{"gitId":"zzlilyzz"},"content":"                            tasks.addTask(deadline);","lastModifiedDate":"2023-04-22"},{"lineNumber":58,"author":{"gitId":"zzlilyzz"},"content":"                        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-04-23"},{"lineNumber":59,"author":{"gitId":"zzlilyzz"},"content":"                            throw new DukeException(\"Invalid date format in database\");","lastModifiedDate":"2023-04-23"},{"lineNumber":60,"author":{"gitId":"zzlilyzz"},"content":"                        }","lastModifiedDate":"2023-04-23"},{"lineNumber":61,"author":{"gitId":"zzlilyzz"},"content":"                        break;","lastModifiedDate":"2023-04-22"},{"lineNumber":62,"author":{"gitId":"zzlilyzz"},"content":"                    case \"E\":","lastModifiedDate":"2023-04-22"},{"lineNumber":63,"author":{"gitId":"zzlilyzz"},"content":"                        try {","lastModifiedDate":"2023-04-23"},{"lineNumber":64,"author":{"gitId":"zzlilyzz"},"content":"                            Event event \u003d new Event(taskDescription, LocalDateTime.parse(taskStartDate), LocalDateTime.parse(taskEndDate));","lastModifiedDate":"2023-04-23"},{"lineNumber":65,"author":{"gitId":"zzlilyzz"},"content":"                            if (taskStatus.equals(\"1\")) {","lastModifiedDate":"2023-04-22"},{"lineNumber":66,"author":{"gitId":"zzlilyzz"},"content":"                                event.markAsDone();","lastModifiedDate":"2023-04-22"},{"lineNumber":67,"author":{"gitId":"zzlilyzz"},"content":"                            }","lastModifiedDate":"2023-04-22"},{"lineNumber":68,"author":{"gitId":"zzlilyzz"},"content":"                            tasks.addTask(event);","lastModifiedDate":"2023-04-22"},{"lineNumber":69,"author":{"gitId":"zzlilyzz"},"content":"                        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-04-23"},{"lineNumber":70,"author":{"gitId":"zzlilyzz"},"content":"                            throw new DukeException(\"Invalid date format in database\");","lastModifiedDate":"2023-04-23"},{"lineNumber":71,"author":{"gitId":"zzlilyzz"},"content":"                        }","lastModifiedDate":"2023-04-23"},{"lineNumber":72,"author":{"gitId":"zzlilyzz"},"content":"                        break;","lastModifiedDate":"2023-04-22"},{"lineNumber":73,"author":{"gitId":"zzlilyzz"},"content":"                }","lastModifiedDate":"2023-04-22"},{"lineNumber":74,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-22"},{"lineNumber":75,"author":{"gitId":"zzlilyzz"},"content":"            }","lastModifiedDate":"2023-04-22"},{"lineNumber":76,"author":{"gitId":"zzlilyzz"},"content":"            return tasks;","lastModifiedDate":"2023-04-22"},{"lineNumber":77,"author":{"gitId":"zzlilyzz"},"content":"        } catch (SQLException e) {","lastModifiedDate":"2023-04-22"},{"lineNumber":78,"author":{"gitId":"zzlilyzz"},"content":"            throw new DukeException(e.getMessage());","lastModifiedDate":"2023-04-22"},{"lineNumber":79,"author":{"gitId":"zzlilyzz"},"content":"        }","lastModifiedDate":"2023-04-22"},{"lineNumber":80,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-22"},{"lineNumber":81,"author":{"gitId":"zzlilyzz"},"content":"    public void save(TaskList tasks) throws DukeException {","lastModifiedDate":"2023-04-22"},{"lineNumber":82,"author":{"gitId":"zzlilyzz"},"content":"        try {","lastModifiedDate":"2023-04-22"},{"lineNumber":83,"author":{"gitId":"zzlilyzz"},"content":"            Connection conn \u003d DriverManager.getConnection(\"jdbc:sqlite:\" + this.filePath);","lastModifiedDate":"2023-04-22"},{"lineNumber":84,"author":{"gitId":"zzlilyzz"},"content":"            assert conn !\u003d null;","lastModifiedDate":"2023-04-25"},{"lineNumber":85,"author":{"gitId":"zzlilyzz"},"content":"            Statement stmt \u003d conn.createStatement();","lastModifiedDate":"2023-04-22"},{"lineNumber":86,"author":{"gitId":"zzlilyzz"},"content":"            stmt.execute(\"DROP TABLE IF EXISTS tasks\");","lastModifiedDate":"2023-04-22"},{"lineNumber":87,"author":{"gitId":"zzlilyzz"},"content":"            stmt.execute(\"CREATE TABLE tasks(id INTEGER PRIMARY KEY, type TEXT NOT NULL, description TEXT NOT NULL, start_time TEXT, end_time TEXT, done INTEGER NOT NULL)\");","lastModifiedDate":"2023-04-22"},{"lineNumber":88,"author":{"gitId":"zzlilyzz"},"content":"            for (int i \u003d 0; i \u003c tasks.getLength(); i++) {","lastModifiedDate":"2023-04-22"},{"lineNumber":89,"author":{"gitId":"zzlilyzz"},"content":"                Task task \u003d tasks.getTask(i);","lastModifiedDate":"2023-04-22"},{"lineNumber":90,"author":{"gitId":"zzlilyzz"},"content":"                String taskType \u003d task.getTaskType();","lastModifiedDate":"2023-04-22"},{"lineNumber":91,"author":{"gitId":"zzlilyzz"},"content":"                String taskDescription \u003d task.getDescription();","lastModifiedDate":"2023-04-22"},{"lineNumber":92,"author":{"gitId":"zzlilyzz"},"content":"                String taskStatus \u003d task.getTaskStatusInString();","lastModifiedDate":"2023-04-22"},{"lineNumber":93,"author":{"gitId":"zzlilyzz"},"content":"                String taskStartDate \u003d task.getTaskStartTime();","lastModifiedDate":"2023-04-22"},{"lineNumber":94,"author":{"gitId":"zzlilyzz"},"content":"                String taskEndDate \u003d task.getTaskEndTime();","lastModifiedDate":"2023-04-22"},{"lineNumber":95,"author":{"gitId":"zzlilyzz"},"content":"                String sql \u003d \"INSERT INTO tasks(id, type, description, start_time, end_time, done) \\n\"","lastModifiedDate":"2023-04-22"},{"lineNumber":96,"author":{"gitId":"zzlilyzz"},"content":"                        + \"VALUES (null, \u0027\" + taskType + \"\u0027, \u0027\" + taskDescription + \"\u0027, \u0027\" + taskStartDate + \"\u0027, \u0027\" + taskEndDate + \"\u0027, \" + taskStatus + \")\";","lastModifiedDate":"2023-04-22"},{"lineNumber":97,"author":{"gitId":"zzlilyzz"},"content":"                stmt.execute(sql);","lastModifiedDate":"2023-04-22"},{"lineNumber":98,"author":{"gitId":"zzlilyzz"},"content":"            }","lastModifiedDate":"2023-04-22"},{"lineNumber":99,"author":{"gitId":"zzlilyzz"},"content":"        } catch (SQLException e) {","lastModifiedDate":"2023-04-22"},{"lineNumber":100,"author":{"gitId":"zzlilyzz"},"content":"            throw new DukeException(e.getMessage());","lastModifiedDate":"2023-04-22"},{"lineNumber":101,"author":{"gitId":"zzlilyzz"},"content":"        }","lastModifiedDate":"2023-04-22"},{"lineNumber":102,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-22"},{"lineNumber":103,"author":{"gitId":"zzlilyzz"},"content":"}","lastModifiedDate":"2023-04-22"}],"authorContributionMap":{"zzlilyzz":103}},{"path":"src/main/java/duke/util/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zzlilyzz"},"content":"package duke.util;","lastModifiedDate":"2023-04-22"},{"lineNumber":2,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-22"},{"lineNumber":3,"author":{"gitId":"zzlilyzz"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-04-17"},{"lineNumber":4,"author":{"gitId":"zzlilyzz"},"content":"import duke.task.Task;","lastModifiedDate":"2023-04-22"},{"lineNumber":5,"author":{"gitId":"zzlilyzz"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2023-04-22"},{"lineNumber":6,"author":{"gitId":"zzlilyzz"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-04-23"},{"lineNumber":7,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":8,"author":{"gitId":"zzlilyzz"},"content":"/**","lastModifiedDate":"2023-04-24"},{"lineNumber":9,"author":{"gitId":"zzlilyzz"},"content":" * The TaskList class represents a list of tasks","lastModifiedDate":"2023-04-24"},{"lineNumber":10,"author":{"gitId":"zzlilyzz"},"content":" */","lastModifiedDate":"2023-04-24"},{"lineNumber":11,"author":{"gitId":"zzlilyzz"},"content":"public class TaskList {","lastModifiedDate":"2023-04-17"},{"lineNumber":12,"author":{"gitId":"zzlilyzz"},"content":"    private final ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-04-21"},{"lineNumber":13,"author":{"gitId":"zzlilyzz"},"content":"    private final int length;","lastModifiedDate":"2023-04-21"},{"lineNumber":14,"author":{"gitId":"zzlilyzz"},"content":"    private final boolean isEmpty;","lastModifiedDate":"2023-04-21"},{"lineNumber":15,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-17"},{"lineNumber":16,"author":{"gitId":"zzlilyzz"},"content":"    public TaskList() {","lastModifiedDate":"2023-04-17"},{"lineNumber":17,"author":{"gitId":"zzlilyzz"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-04-21"},{"lineNumber":18,"author":{"gitId":"zzlilyzz"},"content":"        this.length \u003d 0;","lastModifiedDate":"2023-04-17"},{"lineNumber":19,"author":{"gitId":"zzlilyzz"},"content":"        this.isEmpty \u003d true;","lastModifiedDate":"2023-04-21"},{"lineNumber":20,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-17"},{"lineNumber":21,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-17"},{"lineNumber":22,"author":{"gitId":"zzlilyzz"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-04-21"},{"lineNumber":23,"author":{"gitId":"zzlilyzz"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2023-04-21"},{"lineNumber":24,"author":{"gitId":"zzlilyzz"},"content":"        this.length \u003d tasks.size();","lastModifiedDate":"2023-04-21"},{"lineNumber":25,"author":{"gitId":"zzlilyzz"},"content":"        this.isEmpty \u003d false;","lastModifiedDate":"2023-04-17"},{"lineNumber":26,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-17"},{"lineNumber":27,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-17"},{"lineNumber":28,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":29,"author":{"gitId":"zzlilyzz"},"content":"     * Adds a task to the task list.","lastModifiedDate":"2023-04-24"},{"lineNumber":30,"author":{"gitId":"zzlilyzz"},"content":"     * @param task the task to be added to the task list","lastModifiedDate":"2023-04-24"},{"lineNumber":31,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":32,"author":{"gitId":"zzlilyzz"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2023-04-21"},{"lineNumber":33,"author":{"gitId":"zzlilyzz"},"content":"        this.tasks.add(task);","lastModifiedDate":"2023-04-21"},{"lineNumber":34,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-17"},{"lineNumber":35,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-17"},{"lineNumber":36,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":37,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":38,"author":{"gitId":"zzlilyzz"},"content":"     * Deletes a task from the task list.","lastModifiedDate":"2023-04-24"},{"lineNumber":39,"author":{"gitId":"zzlilyzz"},"content":"     * @param index the index of the task to be deleted","lastModifiedDate":"2023-04-24"},{"lineNumber":40,"author":{"gitId":"zzlilyzz"},"content":"     * @return the task that was deleted","lastModifiedDate":"2023-04-24"},{"lineNumber":41,"author":{"gitId":"zzlilyzz"},"content":"     * @throws DukeException if the index is out of range","lastModifiedDate":"2023-04-24"},{"lineNumber":42,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":43,"author":{"gitId":"zzlilyzz"},"content":"    public Task deleteTask(int index) throws DukeException {","lastModifiedDate":"2023-04-22"},{"lineNumber":44,"author":{"gitId":"zzlilyzz"},"content":"        try {","lastModifiedDate":"2023-04-22"},{"lineNumber":45,"author":{"gitId":"zzlilyzz"},"content":"            return this.tasks.remove(index);","lastModifiedDate":"2023-04-21"},{"lineNumber":46,"author":{"gitId":"zzlilyzz"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-04-22"},{"lineNumber":47,"author":{"gitId":"zzlilyzz"},"content":"            throw new DukeException(\"\\t (\u003ew\u003c)OOPS!!! The index is out of range.\");","lastModifiedDate":"2023-04-24"},{"lineNumber":48,"author":{"gitId":"zzlilyzz"},"content":"        }","lastModifiedDate":"2023-04-22"},{"lineNumber":49,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-17"},{"lineNumber":50,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-17"},{"lineNumber":51,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":52,"author":{"gitId":"zzlilyzz"},"content":"     * Get tasks from task list","lastModifiedDate":"2023-04-24"},{"lineNumber":53,"author":{"gitId":"zzlilyzz"},"content":"     * @param index  index the index of the task to be retrieved","lastModifiedDate":"2023-04-24"},{"lineNumber":54,"author":{"gitId":"zzlilyzz"},"content":"     * @return the task at the specified index","lastModifiedDate":"2023-04-24"},{"lineNumber":55,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":56,"author":{"gitId":"zzlilyzz"},"content":"    public Task getTask(int index) {","lastModifiedDate":"2023-04-21"},{"lineNumber":57,"author":{"gitId":"zzlilyzz"},"content":"        return this.tasks.get(index);","lastModifiedDate":"2023-04-21"},{"lineNumber":58,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-17"},{"lineNumber":59,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-17"},{"lineNumber":60,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":61,"author":{"gitId":"zzlilyzz"},"content":"     * Get the length of task list","lastModifiedDate":"2023-04-24"},{"lineNumber":62,"author":{"gitId":"zzlilyzz"},"content":"     * @return length of task list","lastModifiedDate":"2023-04-24"},{"lineNumber":63,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":64,"author":{"gitId":"zzlilyzz"},"content":"    public int getLength() {","lastModifiedDate":"2023-04-21"},{"lineNumber":65,"author":{"gitId":"zzlilyzz"},"content":"        return this.tasks.size();","lastModifiedDate":"2023-04-21"},{"lineNumber":66,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-17"},{"lineNumber":67,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":68,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":69,"author":{"gitId":"zzlilyzz"},"content":"     * Marks a task as done.","lastModifiedDate":"2023-04-24"},{"lineNumber":70,"author":{"gitId":"zzlilyzz"},"content":"     * @param index the index of the task to be marked as done","lastModifiedDate":"2023-04-24"},{"lineNumber":71,"author":{"gitId":"zzlilyzz"},"content":"     * @return the task that was marked as done","lastModifiedDate":"2023-04-24"},{"lineNumber":72,"author":{"gitId":"zzlilyzz"},"content":"     * @throws DukeException if the index is out of range","lastModifiedDate":"2023-04-24"},{"lineNumber":73,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":74,"author":{"gitId":"zzlilyzz"},"content":"    public Task markDone(int index) throws DukeException {","lastModifiedDate":"2023-04-22"},{"lineNumber":75,"author":{"gitId":"zzlilyzz"},"content":"        try {","lastModifiedDate":"2023-04-22"},{"lineNumber":76,"author":{"gitId":"zzlilyzz"},"content":"            Task task \u003d this.tasks.get(index);","lastModifiedDate":"2023-04-21"},{"lineNumber":77,"author":{"gitId":"zzlilyzz"},"content":"            task.markAsDone();","lastModifiedDate":"2023-04-21"},{"lineNumber":78,"author":{"gitId":"zzlilyzz"},"content":"            return task;","lastModifiedDate":"2023-04-21"},{"lineNumber":79,"author":{"gitId":"zzlilyzz"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-04-22"},{"lineNumber":80,"author":{"gitId":"zzlilyzz"},"content":"            throw new DukeException(\"\\t (\u003ew\u003c)OOPS!!! The index is out of range.\");","lastModifiedDate":"2023-04-24"},{"lineNumber":81,"author":{"gitId":"zzlilyzz"},"content":"        }","lastModifiedDate":"2023-04-17"},{"lineNumber":82,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-22"},{"lineNumber":83,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":84,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":85,"author":{"gitId":"zzlilyzz"},"content":"     * Marks a task as undone.","lastModifiedDate":"2023-04-24"},{"lineNumber":86,"author":{"gitId":"zzlilyzz"},"content":"     * @param index the index of the task to be marked as undone","lastModifiedDate":"2023-04-24"},{"lineNumber":87,"author":{"gitId":"zzlilyzz"},"content":"     * @return the task that was marked as undone","lastModifiedDate":"2023-04-24"},{"lineNumber":88,"author":{"gitId":"zzlilyzz"},"content":"     * @throws DukeException if the index is out of range","lastModifiedDate":"2023-04-24"},{"lineNumber":89,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":90,"author":{"gitId":"zzlilyzz"},"content":"    public Task markUndone(int index) throws DukeException {","lastModifiedDate":"2023-04-22"},{"lineNumber":91,"author":{"gitId":"zzlilyzz"},"content":"        try {","lastModifiedDate":"2023-04-22"},{"lineNumber":92,"author":{"gitId":"zzlilyzz"},"content":"            Task task \u003d this.tasks.get(index);","lastModifiedDate":"2023-04-21"},{"lineNumber":93,"author":{"gitId":"zzlilyzz"},"content":"            task.markAsUndone();","lastModifiedDate":"2023-04-21"},{"lineNumber":94,"author":{"gitId":"zzlilyzz"},"content":"            return task;","lastModifiedDate":"2023-04-21"},{"lineNumber":95,"author":{"gitId":"zzlilyzz"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-04-22"},{"lineNumber":96,"author":{"gitId":"zzlilyzz"},"content":"            throw new DukeException(\"\\t (\u003ew\u003c)OOPS!!! The index is out of range.\");","lastModifiedDate":"2023-04-24"},{"lineNumber":97,"author":{"gitId":"zzlilyzz"},"content":"        }","lastModifiedDate":"2023-04-22"},{"lineNumber":98,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-21"},{"lineNumber":99,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":100,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":101,"author":{"gitId":"zzlilyzz"},"content":"     * Find the task include the keyword","lastModifiedDate":"2023-04-24"},{"lineNumber":102,"author":{"gitId":"zzlilyzz"},"content":"     * @param keyword the input keyword","lastModifiedDate":"2023-04-24"},{"lineNumber":103,"author":{"gitId":"zzlilyzz"},"content":"     * @return the task that matches keyword","lastModifiedDate":"2023-04-24"},{"lineNumber":104,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":105,"author":{"gitId":"zzlilyzz"},"content":"    public TaskList findTasks(String keyword) {","lastModifiedDate":"2023-04-23"},{"lineNumber":106,"author":{"gitId":"zzlilyzz"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-04-23"},{"lineNumber":107,"author":{"gitId":"zzlilyzz"},"content":"        for (Task task : this.tasks) {","lastModifiedDate":"2023-04-23"},{"lineNumber":108,"author":{"gitId":"zzlilyzz"},"content":"            if (task.getDescription().contains(keyword)) {","lastModifiedDate":"2023-04-23"},{"lineNumber":109,"author":{"gitId":"zzlilyzz"},"content":"                tasks.add(task);","lastModifiedDate":"2023-04-23"},{"lineNumber":110,"author":{"gitId":"zzlilyzz"},"content":"            }","lastModifiedDate":"2023-04-23"},{"lineNumber":111,"author":{"gitId":"zzlilyzz"},"content":"        }","lastModifiedDate":"2023-04-23"},{"lineNumber":112,"author":{"gitId":"zzlilyzz"},"content":"        return new TaskList(tasks);","lastModifiedDate":"2023-04-23"},{"lineNumber":113,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-23"},{"lineNumber":114,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":115,"author":{"gitId":"zzlilyzz"},"content":"    /**","lastModifiedDate":"2023-04-24"},{"lineNumber":116,"author":{"gitId":"zzlilyzz"},"content":"     * Find the tasks before the due date and time","lastModifiedDate":"2023-04-24"},{"lineNumber":117,"author":{"gitId":"zzlilyzz"},"content":"     * @param dueTime the due date and time","lastModifiedDate":"2023-04-24"},{"lineNumber":118,"author":{"gitId":"zzlilyzz"},"content":"     * @return the tasks before the due date and time","lastModifiedDate":"2023-04-24"},{"lineNumber":119,"author":{"gitId":"zzlilyzz"},"content":"     */","lastModifiedDate":"2023-04-24"},{"lineNumber":120,"author":{"gitId":"zzlilyzz"},"content":"    public TaskList tasksDueBefore(LocalDateTime dueTime) {","lastModifiedDate":"2023-04-23"},{"lineNumber":121,"author":{"gitId":"zzlilyzz"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-04-23"},{"lineNumber":122,"author":{"gitId":"zzlilyzz"},"content":"        for (Task task : this.tasks) {","lastModifiedDate":"2023-04-23"},{"lineNumber":123,"author":{"gitId":"zzlilyzz"},"content":"            if (!task.getTaskType().equals(\"T\") \u0026\u0026 LocalDateTime.parse(task.getTaskEndTime()).isBefore(dueTime)) {","lastModifiedDate":"2023-04-23"},{"lineNumber":124,"author":{"gitId":"zzlilyzz"},"content":"                tasks.add(task);","lastModifiedDate":"2023-04-23"},{"lineNumber":125,"author":{"gitId":"zzlilyzz"},"content":"            }","lastModifiedDate":"2023-04-23"},{"lineNumber":126,"author":{"gitId":"zzlilyzz"},"content":"        }","lastModifiedDate":"2023-04-23"},{"lineNumber":127,"author":{"gitId":"zzlilyzz"},"content":"        return new TaskList(tasks);","lastModifiedDate":"2023-04-23"},{"lineNumber":128,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-23"},{"lineNumber":129,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":130,"author":{"gitId":"zzlilyzz"},"content":"}","lastModifiedDate":"2023-04-17"}],"authorContributionMap":{"zzlilyzz":130}},{"path":"src/test/java/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zzlilyzz"},"content":"package duke.task;","lastModifiedDate":"2023-04-24"},{"lineNumber":2,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":3,"author":{"gitId":"zzlilyzz"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-04-24"},{"lineNumber":4,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":5,"author":{"gitId":"zzlilyzz"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-04-24"},{"lineNumber":6,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":7,"author":{"gitId":"zzlilyzz"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-04-24"},{"lineNumber":8,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":9,"author":{"gitId":"zzlilyzz"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-04-24"},{"lineNumber":10,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":11,"author":{"gitId":"zzlilyzz"},"content":"public class DeadlineTest {","lastModifiedDate":"2023-04-24"},{"lineNumber":12,"author":{"gitId":"zzlilyzz"},"content":"    @Test","lastModifiedDate":"2023-04-24"},{"lineNumber":13,"author":{"gitId":"zzlilyzz"},"content":"    public void testStringConversion() {","lastModifiedDate":"2023-04-24"},{"lineNumber":14,"author":{"gitId":"zzlilyzz"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2023-04-24"},{"lineNumber":15,"author":{"gitId":"zzlilyzz"},"content":"        LocalDateTime time \u003d LocalDateTime.parse(\"2019-02-12 18:00\", formatter);","lastModifiedDate":"2023-04-24"},{"lineNumber":16,"author":{"gitId":"zzlilyzz"},"content":"        assertEquals(\"\\t [D][ ] return book (by: Feb 12 2019 18:00)\", new Deadline(\"return book\", time).toString());","lastModifiedDate":"2023-04-24"},{"lineNumber":17,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-24"},{"lineNumber":18,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":19,"author":{"gitId":"zzlilyzz"},"content":"}","lastModifiedDate":"2023-04-24"}],"authorContributionMap":{"zzlilyzz":19}},{"path":"src/test/java/duke/task/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zzlilyzz"},"content":"package duke.task;","lastModifiedDate":"2023-04-24"},{"lineNumber":2,"author":{"gitId":"zzlilyzz"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-04-24"},{"lineNumber":3,"author":{"gitId":"zzlilyzz"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-04-24"},{"lineNumber":4,"author":{"gitId":"zzlilyzz"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-04-24"},{"lineNumber":5,"author":{"gitId":"zzlilyzz"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-04-24"},{"lineNumber":6,"author":{"gitId":"zzlilyzz"},"content":"","lastModifiedDate":"2023-04-24"},{"lineNumber":7,"author":{"gitId":"zzlilyzz"},"content":"public class EventTest {","lastModifiedDate":"2023-04-24"},{"lineNumber":8,"author":{"gitId":"zzlilyzz"},"content":"    @Test","lastModifiedDate":"2023-04-24"},{"lineNumber":9,"author":{"gitId":"zzlilyzz"},"content":"    public void testStringConversion() {","lastModifiedDate":"2023-04-24"},{"lineNumber":10,"author":{"gitId":"zzlilyzz"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2023-04-24"},{"lineNumber":11,"author":{"gitId":"zzlilyzz"},"content":"        LocalDateTime startTime \u003d LocalDateTime.parse(\"2023-03-17 17:00\", formatter);","lastModifiedDate":"2023-04-24"},{"lineNumber":12,"author":{"gitId":"zzlilyzz"},"content":"        LocalDateTime endTime \u003d LocalDateTime.parse(\"2023-03-17 18:30\", formatter);","lastModifiedDate":"2023-04-24"},{"lineNumber":13,"author":{"gitId":"zzlilyzz"},"content":"        assertEquals(\"\\t [E][ ] project meeting (From: Mar 17 2023 17:00 to Mar 17 2023 18:30)\", new Event(\"project meeting\", startTime, endTime).toString());","lastModifiedDate":"2023-04-24"},{"lineNumber":14,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-24"},{"lineNumber":15,"author":{"gitId":"zzlilyzz"},"content":"}","lastModifiedDate":"2023-04-24"}],"authorContributionMap":{"zzlilyzz":15}},{"path":"src/test/java/duke/task/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zzlilyzz"},"content":"package duke.task;","lastModifiedDate":"2023-04-24"},{"lineNumber":2,"author":{"gitId":"zzlilyzz"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-04-24"},{"lineNumber":3,"author":{"gitId":"zzlilyzz"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-04-24"},{"lineNumber":4,"author":{"gitId":"zzlilyzz"},"content":"public class TodoTest {","lastModifiedDate":"2023-04-24"},{"lineNumber":5,"author":{"gitId":"zzlilyzz"},"content":"    @Test","lastModifiedDate":"2023-04-24"},{"lineNumber":6,"author":{"gitId":"zzlilyzz"},"content":"    public void testStringConversion() {","lastModifiedDate":"2023-04-24"},{"lineNumber":7,"author":{"gitId":"zzlilyzz"},"content":"        assertEquals(\"\\t [T][ ] read book\", new Todo(\"read book\").toString());","lastModifiedDate":"2023-04-24"},{"lineNumber":8,"author":{"gitId":"zzlilyzz"},"content":"    }","lastModifiedDate":"2023-04-24"},{"lineNumber":9,"author":{"gitId":"zzlilyzz"},"content":"}","lastModifiedDate":"2023-04-24"}],"authorContributionMap":{"zzlilyzz":9}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"zzlilyzz"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-04-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"zzlilyzz":1,"-":20}}]
